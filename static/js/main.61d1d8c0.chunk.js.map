{"version":3,"sources":["utils/fontHelpers.ts","Common/Preloader/Preloader.module.css","components/Header/AppHeader.module.css","Common/Post/Post.tsx","Hocs/withAuthRedirect.tsx","reducers/usersReducer.ts","Common/Post/LikesBlock/LikesBlock.tsx","Common/Post/PostActions/PostActions.tsx","Common/AddMessageForm/EmojiPicker/EmojiPicker.tsx","Common/AddMessageForm/AddMessageForm.tsx","Common/Counter/Counter.tsx","components/API/chat-api.ts","reducers/chatReducer.ts","components/Navbar/Navbar.module.css","Common/Routes.tsx","Common/FormComponents/FieldsComponentsFormik.tsx","reportWebVitals.js","assets/images/vk-rounded.svg","components/Navbar/Navbar.tsx","reducers/authReducer.ts","reducers/appReducer.ts","assets/images/logo.svg","components/Header/AppHeader.tsx","Common/GlobalAlert/GlobalAlert.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/AdditionalInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/AdditionalInfo/AdditionalInfo.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoParts/AdditionalInfoParts.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoForm.tsx","components/Profile/ProfileInfo/ProfileAvatar/AvatarUploadButton/AvatarUploadButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/AddDialogButton/AddDialogButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","assets/images/social-network-pattern-background.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/NotFound.tsx","Common/SuspenseFallback/SuspenseFallback.tsx","Pages/StartPage.tsx","Content.tsx","App.tsx","redux/reduxStore.ts","index.tsx","components/API/api.ts","utils/validators.ts","reducers/profileReducer.ts","types.ts","Common/Selectors/Selectors.ts","reducers/dialogsReducer.ts","assets/images/user-male.png","assets/images/preloader-spinner.svg","Common/Preloader/Preloader.tsx","utils/formikSetters.ts","Common/Post/PostActions/PostActions.module.css"],"names":["getFontsWithEmoji","theme","fontPool","typography","fontFamily","split","splice","join","module","exports","Post","props","classes","makeStyles","createStyles","postsItem","padding","justifyContent","rightSided","postWrapper","display","margin","spacing","width","blockWidth","text","whiteSpace","overflowWrap","flexDirection","useStyles","avatarSmall","avatar","userMale","secondary","Fragment","action","postId","primaryLinked","to","getRouteNameById","routes","dialogs","id","userId","userName","alignItems","className","variant","profile","alt","src","primary","primaryLink","withAuthRedirect","Component","connect","state","isAuth","auth","restProps","initialState","users","currentPage","pageSize","isUsersFetching","followingInProgress","filter","searchTerm","friend","mapUserFollowingStatus","userObject","status","followed","userActions","type","isFetching","getUsers","dispatch","getState","a","usersPage","Api","Users","data","items","processFollowUnfollow","apiMethod","actionCreator","follow","unfollow","usersReducer","map","user","likeWrapper","LikesBlock","iconSize","useDispatch","onClick","event","currentTarget","substr","profileActions","addLike","Tooltip","arrow","title","aria-label","likeCount","fontSize","FONT_SIZE","PostActions","onlyText","Typography","component","textWithOk","styles","textWithIconWrapper","style","color","icon","textWithWait","textWithLikes","likes","EmojiPicker","React","useState","anchorElement","setAnchorElement","isPopoverOpen","Boolean","IconButton","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","anchorEl","onClose","onSelect","onEmojiClick","set","AddMessageForm","minLength","minLengthCreator","minTextLength","maxLength","maxTextLength","maxLengthCreator","undefined","validatorsList","required","push","newPostForm","maxWidth","newPostFormInputWrapper","flexGrow","stretched","formik","useFormik","initialValues","newMessage","onSubmit","values","setSubmitting","resetForm","sendMessage","handleSubmit","value","placement","createField","FormikField","validatorCreator","multiline","emojiObject","setFieldValue","native","Button","disabled","isBlocked","isSubmitting","dirty","isValid","buttonText","Counter","useTheme","position","inCorner","top","right","label","count","size","subscribers","ws","closeHandler","console","log","notifyConnectionChanged","setTimeout","createChanel","messageHandler","newMessages","JSON","parse","forEach","message","nanoid","subscriber","openHandler","cleanUpWs","removeEventListener","close","WebSocket","addEventListener","chatApi","eventName","callback","send","messages","isConnected","chatActions","payload","_messageHandler","messageHandlerCreator","_connectionHandler","connectionHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","slice","PersonOutlinedIcon","EmailOutlinedIcon","FeaturedPlayListOutlinedIcon","LibraryMusicOutlinedIcon","MessageOutlinedIcon","PeopleAltOutlinedIcon","SettingsOutlinedIcon","getRouteIdByName","routeName","routeId","Object","keys","find","route","FormControl","field","children","meta","form","getFieldMeta","name","hasError","touched","error","helperText","elementProps","isValidElement","cloneElement","root","FormikCheckbox","formikSelect","memo","options","option","key","placeholder","validate","_path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MenuItem","selected","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","Navbar","currentRoute","useHistory","location","pathname","newMessagesCount","useSelector","getNewMessagesCountSelector","selectedIndex","setSelectedIndex","MenuList","currentRouteId","createElement","index","onMenuClick","drawerContainer","List","email","login","captchaUrl","authActions","url","getAuth","Auth","Me","getCaptcha","Security","authReducer","initDone","appActions","loginBlock","marginLeft","marginRight","subtitle1","appBar","zIndex","drawer","headerContentWrapper","menuButton","breakpoints","up","leftPart","AppHeader","getIsAuthSelector","getLoginSelector","ownerPhotos","getOwnerPhotosSelector","AppBar","Toolbar","edge","headerLogo","logo","Avatar","small","Logout","loginLink","GlobalAlert","Snackbar","isOpen","reason","setNotificationOpen","autoHideDuration","TransitionComponent","Slide","ProfileStatus","statusDiv","statusInput","statusText","divider","isStatusEditing","setStatusEditing","setStatus","useEffect","toggleEditing","updateStatus","statusFetching","Preloader","notCentered","isOwner","TextField","autoFocus","onBlur","onChange","target","Divider","_extends","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgVkRounded","_ref","svgRef","titleId","xmlns","height","viewBox","d","ForwardRef","ProfileContact","contactTitle","contactInfo","Icon","SvgIcon","VkRounded","rel","href","additionalInfo","additionalInfoItem","marginTop","wrapped","flexWrap","contacts","AdditionalInfo","ContactsList","contactValue","isNeedContacts","every","contact","aboutMe","lookingForAJob","lookingForAJobDescription","setEditMode","additionalInfoRow","flexBasis","textAlign","errorText","FormBasicInfo","checked","setChecked","Card","triggerCheckbox","FormContactsInfo","additionalInfoForm","buttonsWrapper","infoWrapper","errorsWrapper","AdditionalInfoForm","normalizeContacts","enableReinitialize","formData","setFieldError","hasApiErrors","saveProfile","submitCount","onChancel","input","AvatarUploadButton","accept","files","savePhoto","htmlFor","startIcon","AddDialogButton","history","startRefreshDialog","avatarWrapper","large","ProfileAvatar","profileAvatarLarge","largePhoto","wallpaper","backgroundImage","ProfileBackground","backgroundSize","profileDescriptionWrapper","profileDescription","ProfileInfo","isEditMode","photos","fullName","MAX_WIDTH","postsList","backgroundColor","palette","background","paper","postsTitle","postBlock","MyPosts","posts","postsData","post","sendPost","MyPostsContainer","profilePage","Profile","ProfileContainer","getProfile","parseInt","match","params","getStatus","getProfileData","prevProps","prevState","snapshot","mapDispatchToProps","withRouter","maxLength30","loginForm","checkboxWrapper","loginInput","alignSelf","marginBottom","LoginForm","password","rememberMe","captcha","errorCallback","emptyStatusCallback","Login","resultCode","captchaResultCodeType","captchaRequired","autoComplete","loginPage","getCaptchaUrlSelector","NotFound","fallbackWrapper","fallbackText","SuspenseFallback","Container","StartPage","Settings","lazy","Music","News","UsersContainer","DialogsContainer","ChatPage","Content","content","Suspense","fallback","exact","path","news","music","settings","chat","App","isInitDone","getAppInitDoneSelector","isNotificationOpen","notificationText","setNotificationText","isMenuOpen","setMenuOpen","down","drawerPaper","catchGenericError","response","window","getNewMessagesCount","getOwnerProfile","Drawer","rootReducer","combineReducers","profileReducer","dialogsPage","dialogsReducer","app","appReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","DEFAULT_API","axios","create","withCredentials","baseURL","headers","get","page","term","delete","resultCodesType","Success","result","put","file","FormData","append","Promise","resolve","reject","Dialogs","getDialogsList","getMessagesList","body","validators","validator","ownerProfile","newPost","deletePost","setProfile","setOwnersProfile","updateProfile","toggleStatusFetching","savePhotoSuccess","alert","ownerId","emptyErrorCallback","statusCallback","setErrors","replace","newProfile","getUsersSelector","getCurrentPageSelector","getPageSizeSelector","getIsUsersFetchingSelector","getFollowingInProgressSelector","getUsersFilterSelector","getOwnerIdSelector","getChatMessages","getIsChatConnectedSelector","getDialogsMessagesSelector","messageList","getDialogsUserListSelector","userList","getDialogHasMoreSelector","currentDialogHasMore","currentDialogId","currentDialogPage","getUnescapedMessages","messagesList","unescapedMessage","he","unescape","dialogsActions","messageSent","dialogsListReceived","list","messagesListReceived","chatChanged","chatId","chatMessagesRead","newMessagesCountReceived","countMessagesChanged","totalCount","messagesWasRead","userItem","hasNewMessages","preloaderWrapper","preloader","formikSetErrors","formikSetStatus","subkey","errorTextRaw","rawError","toLowerCase","substring"],"mappings":"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","file":"static/js/main.61d1d8c0.chunk.js","sourcesContent":["import {Theme} from '@material-ui/core/styles';\n\n/**\n * Returns fontFamily string.\n * @param {Theme} theme - Material-UI theme\n */\nexport function getFontsWithEmoji(theme: Theme) {\n    let fontPool = theme.typography.fontFamily?.split(',');\n    fontPool?.splice(1, 0, \"Twemoji Mozilla\");\n    return fontPool?.join(',');\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__1-vJZ\",\"preloader\":\"Preloader_preloader__1fZTW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerLogo\":\"AppHeader_headerLogo__1q3ko\",\"loginLink\":\"AppHeader_loginLink__1Epif\"};","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport userMale from \"../../assets/images/user-male.png\";\nimport {stringOrNull} from '../../types';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {NavLink} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../Routes';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype postPropsType = {\n    postId: string,\n    action?: React.ReactElement,\n    avatar: stringOrNull,\n    userName: stringOrNull,\n    userId?: number,\n    blockWidth?: string,\n    rightSided?: boolean,\n    primaryLink?: boolean,\n}\n\n/**\n * Unified post block with avatar, title, text and optional likes-block.\n * @param {postPropsType} props - props object\n * @param {string} props.postId - post ID as string\n * @param {React.ReactElement=} props.action - post text\n * @param {string|null} props.avatar - link to avatar image\n * @param {string|null} props.userName - text for title\n * @param {number=} props.userId - if exist, will append to avatar navlink\n * @param {string=} props.blockWidth - sets max-width of block (CSS value, i.e. \"5px\")\n * @param {boolean=} props.primaryLink - if true, title text will anchor\n * @constructor\n */\nconst Post: React.FC<postPropsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            postsItem: {\n                padding: 0,\n                justifyContent: props.rightSided ? 'end' : 'start'\n            },\n            postWrapper: {\n                display: 'flex',\n                margin: theme.spacing(1),\n                width: props.blockWidth || 'max-content',\n                padding: theme.spacing(1, 2)\n            },\n            text: {\n                whiteSpace: 'pre-line',\n                overflowWrap: 'break-word',\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                '& > p > span': {\n                    fontFamily: getFontsWithEmoji(theme)\n                },\n            }\n        }),\n    );\n\n    const classes = useStyles();\n    let avatarSmall = props.avatar || userMale;\n\n    const secondary = [\n        <React.Fragment key={props.postId}>\n            {props.action}\n        </React.Fragment>\n    ];\n\n    const primaryLinked = <NavLink to={`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`}>\n                              {props.userName}\n                          </NavLink>;\n\n    return(\n        <ListItem alignItems='flex-start' className={classes.postsItem}>\n            <Card variant={'outlined'} className={classes.postWrapper}>\n                <ListItemAvatar>\n                    {!!props.userId\n                        ? <NavLink to={`/${getRouteNameById(routes.profile.id)}/${props.userId}`}>\n                            <Avatar alt='ava' src={avatarSmall} />\n                          </NavLink>\n                        : <Avatar alt='ava' src={avatarSmall} />\n                    }\n                </ListItemAvatar>\n                <ListItemText className={classes.text}\n                              primary={!!props.primaryLink ? primaryLinked : props.userName}\n                              secondary={secondary}\n                />\n            </Card>\n        </ListItem>\n    );\n};\n\nexport default Post;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from '../redux/reduxStore';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\n/**\n * Returns component with redirect to login if user is not authorized. (generic-function)\n * @param {React.ComponentType} Component - component for wrapping\n */\nfunction withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\n    let mapStateToProps = (state: appStateType) => {\n        return (\n            {isAuth: state.auth.isAuth}\n        );\n    };\n\n    const AuthRedirect: React.FC<mapStatePropsType & {}> = (props) => {\n        let {isAuth, ...restProps} = props;\n\n        if (!isAuth) {\n            return <Redirect to='/login'/>\n        }\n\n        return <Component {...restProps as WCP}/>;\n    }\n\n    return connect(mapStateToProps)(AuthRedirect);\n}\n\nexport default withAuthRedirect;","import {Api} from '../components/API/api';\nimport {baseThunkType, arrayOfNumbers, usersType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {Dispatch} from 'redux';\n\nexport type initialStateType = {\n    users: Array<usersType>,\n    currentPage: number,\n    pageSize: number,\n    isUsersFetching: boolean,\n    followingInProgress: arrayOfNumbers,\n    filter: filterType\n}\n\nexport type filterType = {\n    searchTerm: stringOrNull,\n    friend: null | boolean\n}\ntype actionsType = inferActionsType<typeof userActions>;\ntype thunkType = baseThunkType<actionsType>;\n\ntype apiMethodType = typeof Api.Users.follow | typeof Api.Users.unfollow;\n\nconst initialState: initialStateType = {\n    users: [],\n    currentPage: 0,\n    pageSize: 12,\n    isUsersFetching: false,\n    followingInProgress: [],\n    filter: {\n        searchTerm: null,\n        friend: null\n    }\n};\n\nfunction mapUserFollowingStatus(userObject: usersType, userId: number, status: boolean) {\n        if (userObject.id === userId) {\n            return {...userObject, followed: status}\n        }\n        return userObject;\n}\n\nconst usersReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, true))\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, false))\n            }\n        case 'SN/USERS/ZERO_NEXT_PAGE':\n            return {...state, currentPage: 0};\n        case 'SN/USERS/SET_SEARCH_TERM':\n            return {...state, filter: {...action.filter}, users: []};\n        case 'SN/USERS/SET_USERS':\n            return {...state, users: [...state.users, ...action.users]}\n        case 'SN/USERS/NEXT_PAGE':\n            return {...state, currentPage: ++state.currentPage}\n        case 'SN/USERS/UPDATE_IS_USERS_FETCHING':\n            return {...state, isUsersFetching: action.isUsersFetching}\n        case 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING':\n            return {\n                ...state,\n                followingInProgress:\n                    action.isFetching\n                        ? [...state.followingInProgress, action.userId]\n                        : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userActions = {\n    followUser: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowUser: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    zeroNextPage: () => ({type: 'SN/USERS/ZERO_NEXT_PAGE'} as const),\n    setSearchFilter: (filter: filterType) => ({type: 'SN/USERS/SET_SEARCH_TERM', filter} as const),\n    setUsers: (users: Array<usersType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setNextPage: () => ({type: 'SN/USERS/NEXT_PAGE'} as const),\n    updateUsersFetching: (isUsersFetching: boolean) => ({\n        type: 'SN/USERS/UPDATE_IS_USERS_FETCHING',\n        isUsersFetching\n    } as const),\n    updateFollowingFetching: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING',\n        isFetching,\n        userId\n    } as const)\n}\n\n/**\n * Gets one page of users from API and sets it to state.\n * @param {number} pageSize - number of items in page\n * @param {number} currentPage - number of page\n * @param {filterType} filter - search filter\n */\nexport const getUsers = (pageSize: number, currentPage: number, filter: filterType): thunkType => {\n    return async (dispatch, getState) => {\n        dispatch(userActions.updateUsersFetching(true));\n        if (filter !== getState().usersPage.filter) {\n            dispatch(userActions.setSearchFilter(filter));\n            dispatch(userActions.zeroNextPage());\n        }\n\n        //TODO: хранить currentPage в стейте и оттуда же доставать\n        let data = await Api.Users.getUsers(pageSize, currentPage, filter);\n\n        dispatch(userActions.updateUsersFetching(false));\n\n        if (data === null) {\n            return;\n        }\n\n        dispatch(userActions.setUsers(data.items));\n        dispatch(userActions.setNextPage());\n    }\n}\n\n/**\n * Make process of following or unfollowing wia API and sets result to state.\n * @param {number} userId - ID of user which will be followed\\unfollowed\n * @param {Dispatch<actionsType>} dispatch - dispatch function\n * @param {apiMethodType} apiMethod - function of API\n * @param {function(number): actionsType} actionCreator - process which will be made\n */\nconst processFollowUnfollow = async (\n    userId: number,\n    dispatch: Dispatch<actionsType>,\n    apiMethod: apiMethodType,\n    actionCreator: (userId: number) => actionsType\n) => {\n    dispatch(userActions.updateFollowingFetching(true, userId));\n    let isSuccessful = await apiMethod(userId);\n\n    if (isSuccessful) {\n        dispatch(actionCreator(userId));\n    }\n\n    dispatch(userActions.updateFollowingFetching(false, userId));\n}\n\n/**\n * Makes following process\n * @param {number} userId - ID of user which will be followed\n */\nexport const follow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.follow, userActions.followUser);\n    }\n}\n\n/**\n * Makes unfollowing process\n * @param {number} userId - ID of user which will be unfollowed\n */\nexport const unfollow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.unfollow, userActions.unfollowUser);\n    }\n}\n\nexport default usersReducer;","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\n\ntype likesBlockPropsType = {\n    postId: string,\n    likeCount: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        likeWrapper: {\n            display: 'flex',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        }\n    }),\n);\n\n/**\n * Returns counter for post likes with tooltip and button to add like.\n * @param {likesBlockPropsType} props - props object\n * @param {string} props.postId - ID of post for identify it in DOM (must be unique)\n * @param {number} props.likeCount - current count of post likes\n * @constructor\n */\nexport const LikesBlock: React.FC<likesBlockPropsType> = (props) => {\n    const iconSize = 'small';\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    /**\n     * Add like to post\n     * @param {React.MouseEvent<HTMLSpanElement>} event - sets automatically, not need to put it\n     */\n    const likeHandler = (event: React.MouseEvent<HTMLSpanElement>) => {\n        let targetId = event.currentTarget.id;\n        let postId = targetId.substr(5);\n\n        if (postId) {\n            dispatch(profileActions.addLike(postId));\n        }\n    };\n\n    return (\n        <span onClick={likeHandler} id={'post-' + props.postId} className={classes.likeWrapper}>\n            <Tooltip arrow title='Like' aria-label='like'>\n                {props.likeCount ? <ThumbUpIcon fontSize={iconSize}/> : <ThumbUpOutlinedIcon fontSize={iconSize}/>}\n            </Tooltip>\n            <span>{props.likeCount}</span>\n        </span>\n    );\n};","import React from 'react';\nimport styles from './PostActions.module.css'\nimport Typography from '@material-ui/core/Typography';\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\nimport ScheduleOutlinedIcon from '@material-ui/icons/ScheduleOutlined';\nimport {LikesBlock} from '../LikesBlock/LikesBlock';\n\n/**\n * @const\n * @description - value of css font-size for icons.\n */\nconst FONT_SIZE = '0.9rem';\n\nexport const PostActions = {\n    onlyText(text: string) {\n        return <Typography component='span'>{text}</Typography>;\n    },\n    textWithOk(text: string) {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <CheckOutlinedIcon style={{fontSize: FONT_SIZE}} color='primary' className={styles.icon}/>\n            </span>\n        );\n    },\n    textWithWait(text: string) {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <ScheduleOutlinedIcon style={{fontSize: FONT_SIZE}} color='disabled' className={styles.icon}/>\n            </span>\n        );\n    },\n    textWithLikes(text: string, postId: string, likes: number) {\n        return (\n            <>\n                <Typography component='span'>{text}</Typography>\n                <LikesBlock postId={postId} likeCount={likes}/>\n            </>\n        );\n    }\n}","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\nimport Popover from '@material-ui/core/Popover';\nimport 'emoji-mart/css/emoji-mart.css'\nimport {BaseEmoji, Picker} from 'emoji-mart'\n\ntype emojiPickerPropsType = {\n    onEmojiClick: (emojiObject:  BaseEmoji) => void\n}\n\n/**\n * Returns IconButton with emoji picker in popup.\n * @param {emojiPickerPropsType} props - props object\n * @param {function(emojiObject: BaseEmoji):void} props.onEmojiClick - function which will set picked emoji\n * @constructor\n */\nexport const EmojiPicker: React.FC<emojiPickerPropsType> = (props) => {\n    const [anchorElement, setAnchorElement] = React.useState<HTMLButtonElement | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorElement(null);\n    };\n\n    const isPopoverOpen = Boolean(anchorElement);\n\n    return (\n        <React.Fragment>\n            <IconButton onClick={handleClick}>\n                <EmojiEmotionsOutlinedIcon/>\n            </IconButton>\n            <Popover\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={isPopoverOpen}\n                anchorEl={anchorElement}\n                onClose={handleClose}\n            >\n                <Picker onSelect={props.onEmojiClick}\n                        set='apple'\n                />\n            </Popover>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {createField, FormikField} from '../FormComponents/FieldsComponentsFormik';\nimport {maxLengthCreator, minLengthCreator, required, validatorCreator} from '../../utils/validators';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useDispatch} from 'react-redux';\nimport {EmojiPicker} from './EmojiPicker/EmojiPicker';\nimport {BaseEmoji} from 'emoji-mart';\n\ntype propsType = {\n    blockWidth?: string,\n    buttonText: string,\n    minTextLength: number,\n    maxTextLength?: number,\n    isBlocked?: boolean,\n    sendMessage: (text: string) => void\n};\n\ntype formDataType = {\n    newMessage: string\n}\n\ntype fieldNamesType = keyof formDataType;\n\n/**\n * Returns form for adding new message with one multiline input and one button.\n * @param {propsType} props - props object.\n * @param {string=} props.blockWidth - width of form (optional param, 'inherit' by default)\n * @param {string} props.buttonText - text on button\n * @param {number} props.minTextLength - min length of input value\n * @param {number=} props.maxTextLength - max length of input value (optional)\n * @param {boolean} props.isBlocked - is need to disable button\n * @param {function(text: string): void} props.sendMessage - callback for set new message\n * @constructor\n */\nexport const AddMessageForm: React.FC<propsType> = (props) => {\n    let minLength = minLengthCreator(props.minTextLength);\n    let maxLength = props.maxTextLength ? maxLengthCreator(props.maxTextLength) : undefined;\n\n    let validatorsList = [required, minLength];\n\n    if (maxLength !== undefined) {\n        validatorsList.push(maxLength);\n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            newPostForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: props.blockWidth || 'inherit',\n                '& > div': {\n                    display: 'flex',\n                    margin: theme.spacing(1),\n                },\n            },\n            newPostFormInputWrapper: {\n                display: 'flex',\n                '& > div': {\n                    display: 'flex',\n                    flexGrow: 1,\n                    margin: theme.spacing(1),\n                },\n            },\n            stretched: {\n                flexGrow: 1,\n            }\n        }),\n    );\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onSubmit(values: formDataType, {setSubmitting, resetForm}: FormikHelpers<formDataType>) {\n        dispatch(props.sendMessage(values.newMessage));\n        setSubmitting(false);\n        resetForm();\n    }\n\n    const formik = useFormik({\n        initialValues: {newMessage: ''},\n        onSubmit,\n    });\n\n    const onEmojiClick = (emojiObject: BaseEmoji) => {\n        formik.setFieldValue('newMessage', formik.values.newMessage + emojiObject.native);\n    };\n\n    return (\n        <form onSubmit={formik.handleSubmit} className={classes.newPostForm}>\n            <div className={classes.newPostFormInputWrapper}>\n                <FormikProvider value={formik}>\n                    <Tooltip title={'You can type multiline. Just hit enter.'} aria-label='Hint' placement=\"right\" arrow>\n                        {createField<fieldNamesType>(\n                            classes.stretched,\n                            'Type something',\n                            'newMessage',\n                            FormikField,\n                            validatorCreator(validatorsList),\n                            {multiline: true}\n                        )}\n                    </Tooltip>\n                </FormikProvider>\n                <EmojiPicker onEmojiClick={onEmojiClick}/>\n            </div>\n            <div>\n                <Button variant='contained'\n                        color='primary'\n                        type='submit'\n                        disabled={!!props.isBlocked || formik.isSubmitting || !formik.dirty || !formik.isValid}\n                >\n                    {props.buttonText}\n                </Button>\n            </div>\n        </form>\n    );\n}","import React from 'react';\nimport {useTheme} from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\n\ntype counterPropsType = {\n    count: number,\n    inCorner?: boolean\n}\n\n/**\n * Returns small numeric label.\n * @param {counterPropsType} props - props object\n * @param {number} props.count - number which will be show.\n * @param {boolean=} props.isInCorner - if true, will be positioned in top-right corner (optional).\n * @constructor\n */\nexport const Counter: React.FC<counterPropsType> = (props) => {\n    const theme = useTheme();\n    return (\n        <Chip style={{\n                margin: theme.spacing(0, 1),\n                position: props.inCorner ? 'absolute' : undefined,\n                top: props.inCorner ? theme.spacing(1) : undefined,\n                right: props.inCorner ? theme.spacing(0) : undefined\n                }}\n              color='primary'\n              label={props.count}\n              size='small'/>\n    );\n}","import {nanoid} from 'nanoid';\n\ntype ApiMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n};\n\nexport type eventNamesType = 'message-received' | 'connection-changed';\n\nexport interface messageType extends ApiMessageType {\n    id: string\n}\n\ntype messageReceivedSubscriberType = (messages: Array<messageType>) => void;\ntype connectionChangedSubscriberType = (status: boolean) => void;\ntype subscribersType = {\n    'message-received': Array<messageReceivedSubscriberType>,\n    'connection-changed': Array<connectionChangedSubscriberType>\n}\n\n/** @constant\n *  @type string\n *  @description URL to websocket end-point */\nconst BASE_URL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx';\n\nlet subscribers: subscribersType = {\n    'message-received': [],\n    'connection-changed': []\n};\n\nlet ws: WebSocket | null = null;\n\n/**\n * Notify subscribers about connection closing and restart it's connection.\n */\nfunction closeHandler() {\n    console.log('CLOSE WS');\n    notifyConnectionChanged(false);\n    setTimeout(createChanel, 3000);\n}\n\n/**\n * Notify subscribers about new message was received.\n * @param {MessageEvent} event\n */\nfunction messageHandler(event: MessageEvent) {\n    const newMessages = JSON.parse(event.data);\n    newMessages.forEach((message: messageType) => message.id = nanoid());\n    subscribers['message-received'].forEach(subscriber => subscriber(newMessages));\n}\n\n/**\n * Notify about connection is opened\n */\nfunction openHandler() {\n    notifyConnectionChanged(true);\n}\n\n/**\n * Notify subscribers about connection status was changed.\n * @param {boolean} status - connection ready or not.\n */\nfunction notifyConnectionChanged(status: boolean) {\n    subscribers['connection-changed'].forEach(subscriber => subscriber(status));\n}\n\n/**\n * Clean WebSocket object from listeners and closes connection.\n */\nfunction cleanUpWs() {\n    ws?.removeEventListener('close', closeHandler);\n    ws?.removeEventListener('message', messageHandler);\n    ws?.removeEventListener('open', openHandler);\n    ws?.close();\n}\n\n/**\n * Cleanup old connection and creates new.\n */\nfunction createChanel() {\n    cleanUpWs();\n    ws = new WebSocket(BASE_URL);\n    notifyConnectionChanged(false);\n    ws.addEventListener('close', closeHandler);\n    ws.addEventListener('message', messageHandler);\n    ws.addEventListener('open', openHandler);\n}\n\nexport const chatApi = {\n    //TODO: refactor this\n    subscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName].push(callback);\n        // @ts-ignore\n        return () => subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    //TODO: refactor this too\n    unsubscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    sendMessage(message: string) {\n        ws?.send(message);\n    },\n    connect() {\n        createChanel();\n    },\n    disconnect() {\n        cleanUpWs();\n        subscribers['message-received'] = [];\n        subscribers['connection-changed'] = [];\n    }\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {chatApi, messageType} from '../components/API/chat-api';\nimport {Dispatch} from 'redux';\n\n/**\n * @constant\n * @type number\n * @description Maximal number of posts in chat\n */\nconst MAX_CHAT_MESSAGES = 100;\n\nexport type initialStateType = {\n    messages: Array<messageType>,\n    isConnected: boolean\n};\n\ntype actionsType = inferActionsType<typeof chatActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    messages: [],\n    isConnected: false\n};\n\nconst chatReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/CHAT/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload].slice(-MAX_CHAT_MESSAGES)\n            };\n        case 'SN/CHAT/CHAT_CLEARED':\n            return {\n                ...state,\n                messages: []\n            };\n        case 'SN/CHAT/CONNECTION_CHANGED':\n            return {\n                ...state,\n                isConnected: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const chatActions = {\n    messagesReceived: (messages: Array<messageType>) => ({type: 'SN/CHAT/MESSAGES_RECEIVED', payload: messages} as const),\n    chatCleared: () => ({type: 'SN/CHAT/CHAT_CLEARED'} as const),\n    connectionChanged: (isConnected: boolean) => ({type: 'SN/CHAT/CONNECTION_CHANGED', payload: isConnected} as const)\n}\n\nlet _messageHandler: ((messages: Array<messageType>) => void) | null = null;\n\n/**\n * Helper function for create listener of new messages.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet messageHandlerCreator = (dispatch: Dispatch) => {\n    if (_messageHandler === null) {\n        _messageHandler = (messages) => {\n            dispatch(chatActions.messagesReceived(messages));\n        }\n    }\n\n    return _messageHandler;\n};\n\nlet _connectionHandler: ((status: boolean) => void) | null = null;\n\n/**\n * Helper function for create listener of connection.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet connectionHandlerCreator = (dispatch: Dispatch) => {\n    if (_connectionHandler === null) {\n        _connectionHandler = (status) => {\n            dispatch(chatActions.connectionChanged(status));\n        }\n    }\n\n    return _connectionHandler;\n};\n\n/**\n * Starts connection to chat and will set new messages and connection status to state.\n */\nexport const startMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.connect();\n    chatApi.subscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.subscribe('connection-changed', connectionHandlerCreator(dispatch));\n}\n\n/**\n * Stops listeners, clears chat and disconnects from server.\n */\nexport const stopMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.unsubscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.unsubscribe('connection-changed', connectionHandlerCreator(dispatch));\n    dispatch(chatActions.chatCleared());\n    chatApi.disconnect();\n}\n\n/**\n * Send new message to chat\n * @param {string} message - text of message\n */\nexport const sendMessage = (message: string): thunkType => () => {\n    chatApi.sendMessage(message);\n}\n\nexport default chatReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerContainer\":\"Navbar_drawerContainer__1aacK\"};","import PersonOutlinedIcon from '@material-ui/icons/PersonOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport FeaturedPlayListOutlinedIcon from '@material-ui/icons/FeaturedPlayListOutlined';\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined';\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\nimport {SvgIconTypeMap} from '@material-ui/core';\n\nexport type routesVariants = 'profile' | 'dialogs' | 'news' | 'music' | 'chat' | 'users' | 'settings';\n\nexport type routesType = {\n    [key in routesVariants]: {\n        id: number,\n        title: string,\n        icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>\n    };\n};\n\n/**\n * Object for pages routines in app.\n */\nexport const routes: routesType = {\n    'profile': {id: 1, title: 'Profile', icon: PersonOutlinedIcon},\n    'dialogs': {id: 2, title: 'Dialogs', icon: EmailOutlinedIcon},\n    'news': {id: 3, title: 'News', icon: FeaturedPlayListOutlinedIcon},\n    'music': {id: 4, title: 'Music', icon: LibraryMusicOutlinedIcon},\n    'chat': {id: 5, title: 'Chat', icon: MessageOutlinedIcon},\n    'users': {id: 6, title: 'Users', icon: PeopleAltOutlinedIcon},\n    'settings': {id: 7, title: 'Settings', icon: SettingsOutlinedIcon},\n}\n\n/**\n * Gets route ID.\n * @param {routesVariants} routeName route as string\n */\nexport const getRouteIdByName = (routeName: routesVariants) => {\n    return routeName in routes ? routes[routeName].id : 0;\n}\n\n/**\n * Gets route name as string.\n * @param {number} routeId route ID\n */\nexport const getRouteNameById = (routeId: number) => {\n    return Object.keys(routes).find(route => routes[route as routesVariants].id === routeId);\n}","import React from \"react\";\nimport {Field, FieldProps} from \"formik\";\nimport {validatorType} from \"../../utils/validators\";\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {createStyles, makeStyles} from '@material-ui/core';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype elementPropsType = {\n    error?: boolean,\n    helperText?: string\n};\n\n/**\n * Constructs wrapped component for formik field.\n * @param {Object} field\n * @param {Object | Array} children - React children\n * @param {Object} props - any needed props\n * @constructor\n */\nconst FormControl: React.FC<FieldProps> = ({field, children, ...props}) => {\n    const meta = props.form.getFieldMeta(field.name);\n    const hasError = meta.touched && meta.error;\n    const helperText = meta.error || undefined;\n\n    const elementProps: typeof field & typeof props & elementPropsType = {\n        ...field,\n        ...props\n    };\n\n    if (hasError) elementProps.error = !!hasError;\n    if (helperText) elementProps.helperText = helperText;\n\n    return (\n        <div>\n            {React.isValidElement(children) && React.cloneElement(children, elementProps)}\n        </div>\n    );\n};\n\n/**\n * Material-UI input for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikField: React.FC<FieldProps> = (props) => {\n    const useStyles = makeStyles((theme) =>\n        createStyles({\n            root: {\n                '& > div': {\n                    fontFamily: getFontsWithEmoji(theme)\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <FormControl {...props}><TextField classes={classes}/></FormControl>\n    );\n};\n\n/**\n * Material-UI checkbox for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikCheckbox: React.FC<FieldProps> = (props) => {\n    return (\n        <FormControl {...props}><Checkbox/></FormControl>\n    );\n};\n\n/**\n * Material-UI select for formik field constructor.\n * @param {Object} props - props.children must be transferred for select options and must be an Array\n */\nexport const formikSelect: React.FC<FieldProps> = React.memo((props) => {\n    let options = props.children as Array<{key: string, value: string}>;\n\n    return (\n        <FormControl {...props}>\n            <Select>\n                {options && options.map(option => {\n                    return(\n                        <MenuItem key={option.key} value={option.key}>{option.value}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n});\n\n/**\n * Creates formik field based on transferred component.\n * @param {string | undefined} className\n * @param {string | undefined} placeholder\n * @param {string} name - field name as string\n * @param {React.FC} component - valid React component\n * @param {validatorType} validate - field validator\n * @param {Object} props - any props as object\n */\nexport function createField<namesType extends string> (\n    className: string | undefined,\n    placeholder: string | undefined,\n    name: namesType,\n    component: React.FC<FieldProps>,\n    validate: validatorType,\n    props = {}\n) {\n    return (\n        <Field className={className}\n               placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgVkRounded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm.25 16.996h-2.134c-1.205 0-1.409-.687-2.401-1.679-.897-.897-1.395-.209-1.374 1.068.006.339-.161.611-.566.611-1.264 0-3.08.178-4.918-1.806-1.883-2.033-3.857-6.111-3.857-6.513 0-.237.196-.344.524-.344h2.17c.574 0 .623.284.783.649.667 1.521 2.265 4.574 2.69 2.87.244-.978.344-3.245-.703-3.44-.594-.11.452-.746 1.968-.746.377 0 .786.041 1.205.137.769.179.771.523.761 1.026-.039 1.903-.269 3.184.233 3.507.479.31 1.739-1.717 2.403-3.281.183-.433.219-.722.734-.722h2.654c1.39 0-.182 1.997-1.383 3.557-.968 1.255-.916 1.28.209 2.324.803.744 1.75 1.76 1.75 2.336.002.272-.21.446-.748.446z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgVkRounded);\nexport default __webpack_public_path__ + \"static/media/vk-rounded.850582a3.svg\";\nexport { ForwardRef as ReactComponent };","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport styles from './Navbar.module.css';\nimport {Link, LinkProps, useHistory} from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {getRouteIdByName, getRouteNameById, routes, routesVariants} from '../../Common/Routes';\nimport {useSelector} from 'react-redux';\nimport {getNewMessagesCountSelector} from '../../Common/Selectors/Selectors';\nimport {Counter} from '../../Common/Counter/Counter';\n\ninterface MainMenuItemProps {\n    icon: React.ReactElement;\n    primary: string;\n    secondary?: JSX.Element;\n    to: string;\n    selected?: boolean;\n    onClick: () => void;\n}\n\ntype navbarPropsType = {\n    onMenuClick: () => void\n}\n\n/**\n * Returns one item (<li> for <ul>) of app menu.\n * @param {MainMenuItemProps} props\n * @constructor\n */\nconst MenuItem = (props: MainMenuItemProps) => {\n    const {icon, primary, secondary, to, selected, onClick} = props;\n\n    const renderLink = React.useMemo(() =>\n            React.forwardRef<any, Omit<LinkProps, 'to'>>((itemProps, ref) => (\n                <Link to={to} ref={ref} {...itemProps} />\n            )),\n        [to]);\n\n    return (\n        <li>\n            <ListItem button component={renderLink} selected={selected} onClick={onClick}>\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText style={{display: 'flex'}} primary={primary} secondary={secondary}/>\n            </ListItem>\n        </li>\n    );\n}\n\n/**\n * Returns complete app menu list.\n * @constructor\n */\nconst Navbar: React.FC<navbarPropsType> = (props) => {\n    const history = useHistory();\n    const currentRoute = history.location.pathname.substr(1) as routesVariants;\n    const newMessagesCount = useSelector(getNewMessagesCountSelector);\n    const [selectedIndex, setSelectedIndex] = useState(getRouteIdByName(currentRoute));\n\n    const setActive = (index: number) => {\n        props.onMenuClick();\n        setSelectedIndex(index);\n    };\n\n    const MenuList = Object.keys(routes).map(route => {\n        let currentRoute = route as routesVariants;\n        let currentRouteId = routes[currentRoute].id;\n        let title = routes[currentRoute].title;\n        let icon = React.createElement(routes[currentRoute].icon);\n        let routeName = getRouteNameById(currentRouteId);\n        let secondary = (routeName === 'dialogs' && newMessagesCount > 0) ? <Counter count={newMessagesCount}/> : undefined;\n\n        return <MenuItem to={\"/\" + routeName}\n                         primary={title}\n                         secondary={secondary}\n                         icon={icon}\n                         selected={selectedIndex === currentRouteId}\n                         onClick={() => {setActive(currentRouteId)}}\n                         key={routeName}\n        />\n    });\n\n    return(\n        <div className={styles.drawerContainer}>\n            <List>\n                {MenuList}\n            </List>\n        </div>\n    );\n};\n\nexport default Navbar;","import {Api} from '../components/API/api';\nimport {baseThunkType, captchaResultCodeType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {emptyStatusCallback, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    id: number | null,\n    email: stringOrNull,\n    login: stringOrNull,\n    isAuth: boolean,\n    isFetching: boolean,\n    captchaUrl: stringOrNull\n}\n\ntype actionsType = inferActionsType<typeof authActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false,\n    captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/AUTH/SET_AUTH':\n            return {\n                ...state,\n                ...action.data\n            }\n        case 'SN/AUTH/GET_CAPTCHA_SUCCESS':\n            return {\n                ...state,\n                captchaUrl: action.url\n            }\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    setAuth: (id: number | null, email: stringOrNull, login: stringOrNull, isAuth:boolean) => ({\n        type: 'SN/AUTH/SET_AUTH',\n        data: {id, email, login, isAuth}} as const),\n    getCaptchaSuccess: (url: stringOrNull) => ({type: 'SN/AUTH/GET_CAPTCHA_SUCCESS', url} as const)\n}\n\n/**\n * Gets auth data from backend and set it to state if successful.\n */\nexport const getAuth = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Me();\n\n    if (data === null) {\n        return;\n    }\n\n    let {id, email, login} = data;\n    dispatch(authActions.setAuth(id, email, login, true));\n}\n\n/**\n * Sets user logged-in on backend, if needed captcha then requests it.\n * If successful sets auth data to state.\n * @param {string} email - user email\n * @param {string} password - user password\n * @param {boolean} rememberMe - is need long session\n * @param {string} captcha - captcha text from user\n * @param {(string):void=} errorCallback - callback calls on error from backend (optional)\n */\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string, errorCallback: setStatusType = emptyStatusCallback): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Login(email, password, rememberMe, captcha);\n\n    if (data.error) {\n        if (data.resultCode === captchaResultCodeType.captchaRequired) {\n            await dispatch(getCaptcha());\n        }\n\n        return errorCallback(data.error);\n    }\n\n    await dispatch(getAuth());\n    dispatch(authActions.getCaptchaSuccess(null));\n}\n\n/**\n * Sets user as logged-out on backend, if successful clears auth data in state.\n */\nexport const logout = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Logout();\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(authActions.setAuth(null, null, null, false));\n}\n\n/**\n * Gets url with captcha image from backend and sets it to state if successful.\n */\nexport const getCaptcha = (): thunkType => async (dispatch) => {\n    let url = await Api.Security.getCaptcha();\n\n    if (!url) {\n        return;\n    }\n\n    dispatch(authActions.getCaptchaSuccess(url));\n}\n\nexport default authReducer;","import {getAuth} from './authReducer';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {getNewMessagesCount} from './dialogsReducer';\nimport {getOwnerProfile} from './profileReducer';\n\nexport type initialStateType = {\n    initDone: boolean\n}\n\ntype actionsType = inferActionsType<typeof appActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    initDone: false\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/APP/SET_INIT_DONE':\n            return {\n                ...state,\n                initDone: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const appActions = {\n    setInitDone: () => ({type: 'SN/APP/SET_INIT_DONE'} as const)\n}\n\n/**\n * Gets data, needed for app start.\n */\nexport const makeInit = (): thunkType => async (dispatch) => {\n    try {\n        await dispatch(getAuth());\n        await dispatch(getNewMessagesCount());\n        await dispatch(getOwnerProfile());\n    }\n    finally {\n        dispatch(appActions.setInitDone());\n    }\n}\n\nexport default authReducer;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport styles from './AppHeader.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getIsAuthSelector, getLoginSelector, getOwnerPhotosSelector} from '../../Common/Selectors/Selectors';\nimport {logout} from '../../reducers/authReducer';\nimport logo from '../../assets/images/logo.svg';\nimport userMale from \"../../assets/images/user-male.png\";\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype appHeaderPropsType = {\n    onMenuClick: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginBlock: {\n            display: 'flex',\n            alignItems: 'center',\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n        },\n        login: {\n            ...theme.typography.subtitle1,\n            padding: theme.spacing(1),\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        headerContentWrapper: {\n            justifyContent: 'space-between'\n        },\n        menuButton: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        leftPart: {\n            display: 'flex'\n        }\n    }),\n);\n\n/**\n * Returns complete header for App with logo, menu-button, logout-button and owner-info.\n * @param {appHeaderPropsType} props - props object\n * @param {function():void} props.onMenuClick - function which will calls on menu-button click\n * @constructor\n */\nexport const AppHeader: React.FC<appHeaderPropsType> = (props) => {\n    const classes = useStyles();\n    const isAuth = useSelector(getIsAuthSelector);\n    const login = useSelector(getLoginSelector);\n    const ownerPhotos = useSelector(getOwnerPhotosSelector);\n\n    const dispatch = useDispatch();\n\n    const logoutCallback = () => {\n        dispatch(logout());\n    }\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.headerContentWrapper}>\n                <div className={classes.leftPart}>\n                    <IconButton color='inherit'\n                                edge='start'\n                                className={classes.menuButton}\n                                onClick={props.onMenuClick}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <img className={styles.headerLogo}\n                         src={logo}\n                         alt=\"logo\"/>\n                </div>\n                <div>\n                    {\n                        isAuth\n                            ? <div className={classes.loginBlock}>\n                                <Avatar alt={'Header Avatar'} src={ownerPhotos?.small || userMale}/>\n                                <Typography className={classes.login}>{login}</Typography>\n                                <IconButton onClick={logoutCallback}>\n                                    <ExitToAppOutlinedIcon/>\n                                </IconButton>\n                            </div>\n                            : <NavLink to='/login' className={styles.loginLink}>Login</NavLink>\n                    }\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};","import React, {Dispatch, SetStateAction} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\n\ntype globalAlertPropsType = {\n    isOpen: boolean,\n    text: string,\n    setNotificationOpen: Dispatch<SetStateAction<boolean>>\n}\n\n/**\n * Component for smooth popup alert.\n * @param {globalAlertPropsType} props\n * @constructor\n */\nexport const GlobalAlert: React.FC<globalAlertPropsType> = (props) => {\n    const handleNotificationClose = (event: React.SyntheticEvent | MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.setNotificationOpen(false);\n    };\n\n    return (\n        <Snackbar anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                  open={props.isOpen}\n                  onClose={handleNotificationClose}\n                  autoHideDuration={6000}\n                  TransitionComponent={Slide}\n                  message={props.text}\n        />\n    );\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    blockWidth?: string,\n    updateStatus: (status: string) => void\n};\n\n/**\n * Returns status block or input for editing status.\n * @param {propsType} props - props object\n * @param {string} props.status - status text\n * @param {boolean} props.isOwner - is user owner of this page\n * @param {boolean} props.statusFetching - fetching in progress flag\n * @param {string=} props.blockWidth - with of block (optional)\n * @param {function(status: string):void} props.updateStatus - callback for set status\n * @constructor\n */\nconst ProfileStatus: React.FC<propsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            statusDiv: {\n                display: 'flex',\n                maxWidth: props.blockWidth || 'auto',\n            },\n            statusInput: {\n                maxWidth: props.blockWidth || 'auto',\n                margin: theme.spacing(1),\n            },\n            statusText: {\n                overflowWrap: 'anywhere',\n                flexGrow: 1,\n                whiteSpace: 'pre-line'\n            },\n            divider: {\n                maxWidth: props.blockWidth || 'auto',\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let statusText = props.status || 'No status';\n\n    let [isStatusEditing, setStatusEditing] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const toggleEditing = () => {\n        setStatusEditing(!isStatusEditing);\n\n        if (isStatusEditing && status && (statusText !== status)) {\n            props.updateStatus(status);\n        }\n    }\n\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setStatus(event.target.value);\n    }\n\n    if (props.statusFetching) {\n        return <Preloader notCentered={true}/>\n    }\n\n    return isStatusEditing && props.isOwner\n        ? <Tooltip title=\"Click to empty place to save\" aria-label=\"save status\" placement=\"right\">\n            <TextField autoFocus={true}\n                       onBlur={toggleEditing}\n                       onChange={onStatusChange}\n                       className={classes.statusInput}\n                       value={status}\n                       multiline={true}\n            />\n          </Tooltip>\n        : <React.Fragment>\n            <div className={classes.statusDiv} onClick={toggleEditing}>\n                {props.isOwner\n                    ? <Tooltip title=\"Click to edit\" aria-label=\"edit status\" placement=\"right\">\n                        <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                    </Tooltip>\n                    : <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                }\n            </div>\n            <Divider className={classes.divider}/>\n        </React.Fragment>;\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HttpIcon from '@material-ui/icons/Http';\nimport {contactsType} from '../../../../../types';\nimport {ReactComponent as VkRounded} from '../../../../../assets/images/vk-rounded.svg';\n\ntype contactKeysType = keyof contactsType;\n\ntype propsType = {\n    contactTitle: contactKeysType,\n    contactInfo: string\n}\n\n/**\n * Returns one icon-button as anchor with contact.\n * @param {{\n * contactTitle: contactKeysType\n * contactInfo: string\n * }} props - props like contactsType\n * @param {contactKeysType} props.contactTitle - name of contact\n * @param {string} props.contactInfo - contact link\n * @constructor\n */\nexport const ProfileContact: React.FC<propsType> = ({contactTitle, contactInfo}) => {\n    let Icon = <div/>;\n\n    switch (contactTitle) {\n        case 'facebook':\n            Icon = <FacebookIcon/>;\n            break;\n        case 'website':\n            Icon = <LanguageIcon/>;\n            break;\n        case 'vk':\n            Icon = <SvgIcon component={VkRounded}/>;\n            break;\n        case 'twitter':\n            Icon = <TwitterIcon/>;\n            break;\n        case 'instagram':\n            Icon = <InstagramIcon/>;\n            break;\n        case 'youtube':\n            Icon = <YouTubeIcon/>;\n            break;\n        case 'github':\n            Icon = <GitHubIcon/>;\n            break;\n        case 'mainLink':\n            Icon = <HttpIcon/>;\n            break;\n    }\n\n    return (\n        <IconButton color=\"primary\" component='a' rel={'noreferrer'} href={contactInfo} target={'_blank'}>\n            {Icon}\n        </IconButton>\n    );\n}","import React from \"react\";\nimport {contactsType} from '../../../../types';\nimport {ProfileContact} from './ProfileContact/ProfileContact';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    aboutMe: string,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    contacts: contactsType,\n    isOwner: boolean,\n    blockWidth: string,\n    setEditMode: () => void\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfo: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > div': {\n                marginLeft: theme.spacing(2),\n                marginRight: theme.spacing(2),\n            },\n        },\n        additionalInfoItem: {\n            marginTop: theme.spacing(1)\n        },\n        wrapped: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        contacts: {\n            display: 'flex',\n            alignItems: 'center',\n            width: '100%'\n        }\n    }),\n);\n\n/**\n * Returns array of ProfileContacts if contact value is not empty.\n * @param {contactsType} contacts - array of contacts from profile.\n */\nfunction getContactsList (contacts: contactsType) {\n    return Object.keys(contacts).map((key) => {\n        let contactValue = contacts[key as keyof contactsType];\n\n        return contactValue\n            ? <ProfileContact key={key} contactTitle={key as keyof contactsType} contactInfo={contactValue}/>\n            : null;\n    })\n}\n\n/**\n * Returns additional info about user with 3 text blocks and 1 block of contact-links.\n * If user is owner of profile also returns button for edit data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let ContactsList = getContactsList(props.contacts);\n    let isNeedContacts = !ContactsList.every(contact => contact === null);\n\n    return (\n        <div className={classes.additionalInfo} style={{maxWidth: props.blockWidth}}>\n            <div className={classes.additionalInfoItem}>\n                <Typography>About Me: {props.aboutMe || 'Empty'}</Typography>\n                <Typography>Looking for a job: {props.lookingForAJob ? 'Yes' : 'No'}</Typography>\n                {props.lookingForAJob && <Typography className={classes.wrapped}>\n                    Job description: {props.lookingForAJobDescription}\n                </Typography>}\n            </div>\n\n            {isNeedContacts\n                ? <div className={classes.contacts}>\n                    <div>\n                        <Typography>Contacts:</Typography>\n                    </div>\n                    <div  className={classes.wrapped}>\n                        {ContactsList}\n                    </div>\n                </div>\n                : <div className={classes.contacts}>\n                    <Typography>no contacts</Typography>\n                </div>\n            }\n            {props.isOwner && <Button color='primary' variant='contained' onClick={props.setEditMode}>Edit info</Button>}\n        </div>\n    );\n};\n\nexport default AdditionalInfo","import React, {useState} from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport {createField, FormikCheckbox, FormikField} from '../../../../../Common/FormComponents/FieldsComponentsFormik';\nimport {required, validatorCreator} from '../../../../../utils/validators';\nimport {ErrorMessage} from 'formik';\nimport {fieldNamesType} from '../AdditionalInfoForm';\nimport {contactsType} from '../../../../../types';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoRow: {\n            display: 'flex',\n            justifyContent: 'start',\n            alignItems: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n            '& > p': {\n                flexBasis: '92px',\n                textAlign: 'end',\n                margin: theme.spacing(1),\n            },\n            '& > div': {\n                flexGrow: 1,\n                display: 'flex'\n            }\n        },\n        stretched: {\n            flexGrow: 1\n        },\n        errorText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n    }),\n);\n\ntype formBasicInfoPropsType = {\n    checked: boolean,\n    triggerCheckbox: () => void\n}\n\n/**\n * Returns fields: fullName, aboutMe, lookingForAJob, lookingForAJobDescription\n * for profile-info form with needed handlers.\n * @param {formBasicInfoPropsType} props\n * @constructor\n */\nexport const FormBasicInfo: React.FC<formBasicInfoPropsType> = (props) => {\n    const classes = useStyles();\n    const [checked, setChecked] = useState(props.checked);\n\n    /**\n     * Checkbox trigger handler. Sets value to Checkbox and to formik differently.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     * @param event\n     */\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.triggerCheckbox();\n        setChecked(event.target.checked);\n    };\n\n    return (\n        <Card variant={'outlined'}>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Full name: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Your name',\n                    'fullName',\n                    FormikField,\n                    validatorCreator([required])\n                )}\n                <ErrorMessage name='fullName'/>\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>About me: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about you',\n                    'aboutMe',\n                    FormikField,\n                    validatorCreator([])\n                )}\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Look for job: </Typography>\n                {createField<fieldNamesType>(\n                    undefined,\n                    undefined,\n                    'lookingForAJob',\n                    FormikCheckbox,\n                    validatorCreator([]),\n                    {checked, color: 'primary', onChange}\n                )}\n            </div>\n            <div className={classes.errorText}><ErrorMessage name={'lookingForAJob'}/></div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Skills: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about job or skills',\n                    'lookingForAJobDescription',\n                    FormikField,\n                    validatorCreator([]),\n                    {multiline: true}\n                )}\n            </div>\n        </Card>\n    );\n}\n\ntype formContactsInfoPropsType = {\n    contacts: contactsType\n}\n\n/**\n * Returns fields with contacts for profile-info form.\n * @param {formContactsInfoPropsType} props\n * @constructor\n */\nexport const FormContactsInfo: React.FC<formContactsInfoPropsType> = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Card variant={'outlined'}>\n            {Object.keys(props.contacts).map(key => {\n                return (\n                    <div key={key} className={classes.additionalInfoRow}><Typography>{key}:</Typography>\n                        {createField(\n                            classes.stretched,\n                            key + ' link with http',\n                            'contacts.' + key,\n                            FormikField,\n                            validatorCreator([])\n                        )}\n                    </div>\n                );\n            })}\n        </Card>\n    );\n}","import React from \"react\";\nimport {contactsType, profileType} from '../../../../types';\nimport Button from '@material-ui/core/Button';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {useDispatch} from 'react-redux';\nimport {saveProfile} from '../../../../reducers/profileReducer';\nimport {FormBasicInfo, FormContactsInfo} from './AdditionalInfoParts/AdditionalInfoParts';\n\ntype propsType = {\n    profile: profileType,\n    onChancel: () => void\n}\n\ntype formDataType = profileType;\nexport type fieldNamesType = keyof formDataType;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoForm: {\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        buttonsWrapper: {\n            display: 'flex',\n            justifyContent: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        infoWrapper: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                flexGrow: 1,\n                flexBasis: '460px',\n            }\n        },\n        statusText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n        errorsWrapper: {\n            display: 'flex',\n            justifyContent: 'center'\n        }\n    }),\n);\n\n/**\n * Sets every contact value to empty string if it's value is null.\n * Because Material-UI not allow null as value to input.\n * @param {contactsType} contacts - object with contacts\n */\nfunction normalizeContacts (contacts: contactsType) {\n    for (let contact in contacts) {\n        if (contacts.hasOwnProperty(contact)) {\n            contacts[contact as keyof contactsType] = contacts[contact as keyof contactsType] || '';\n        }\n\n    }\n\n    return contacts;\n}\n\n/**\n * Returns form with profile-info data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfoForm: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    let initialValues = props.profile;\n    initialValues.contacts = normalizeContacts(initialValues.contacts);\n\n    const formik = useFormik({\n        initialValues: props.profile,\n        enableReinitialize: true,\n        onSubmit: onSubmit,\n    });\n\n    async function onSubmit (formData: profileType, {setSubmitting, setFieldError, setStatus}: FormikHelpers<profileType>) {\n        let hasApiErrors = '';\n\n        try {\n            await dispatch(saveProfile(formData,  setFieldError, setStatus));\n        }\n        catch (error) {\n            hasApiErrors = error;\n        }\n        finally {\n            setSubmitting(false);\n        }\n\n        if (!hasApiErrors && formik.submitCount > 0) {\n            props.onChancel();\n        }\n    }\n\n    /**\n     * Handler for manually trigger lookingForAJob-checkbox in formik.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     */\n    function triggerCheckbox() {\n        formik.setFieldValue(\"lookingForAJob\", !formik.values.lookingForAJob);\n    }\n\n    return (\n        <form className={classes.additionalInfoForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n            <div className={classes.infoWrapper}>\n                <FormBasicInfo checked={props.profile.lookingForAJob} triggerCheckbox={triggerCheckbox}/>\n                <FormContactsInfo contacts={props.profile.contacts}/>\n            </div>\n            <div className={classes.errorsWrapper}>\n                <div className={classes.statusText}>{formik.status}</div>\n            </div>\n            <div className={classes.buttonsWrapper}>\n                <Button color='primary'\n                        variant='contained'\n                        type='submit'\n                        disabled={formik.isSubmitting || !formik.isValid || !formik.dirty}\n                >Save</Button>\n                <Button color='secondary' variant='contained' onClick={props.onChancel}>Cancel</Button>\n            </div>\n            </FormikProvider>\n        </form>\n    );\n}\n\nexport default AdditionalInfoForm;","import React, {ChangeEvent} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {savePhoto} from '../../../../../reducers/profileReducer';\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        input: {\n            display: 'none',\n        },\n        label: {\n            display: 'flex',\n            justifyContent: 'center',\n        }\n    }),\n);\n\n/**\n * Returns styled button for upload user's avatar.\n * @constructor\n */\nexport const AvatarUploadButton: React.FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onFileChange(event: ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n        }\n\n        dispatch(savePhoto(event.target.files[0]));\n    }\n\n    return (\n        <>\n            <input className={classes.input}\n                   accept='image/*'\n                   type='file'\n                   id='icon-button-file'\n                   onChange={onFileChange}\n            />\n            <label htmlFor='icon-button-file' className={classes.label}>\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        startIcon={<PhotoCamera/>}\n                >\n                    Upload\n                </Button>\n            </label>\n        </>\n    );\n}","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {startRefreshDialog} from '../../../../../reducers/dialogsReducer';\nimport {getRouteNameById, routes} from '../../../../../Common/Routes';\nimport Button from '@material-ui/core/Button';\n\ntype addDialogButtonPropsType = {\n    userId: number\n}\n\n/**\n * Returns button for start new dialog.\n * @param {addDialogButtonPropsType} props - props object\n * @param {number} props.userId - user's profile ID\n * @constructor\n */\nexport const AddDialogButton: React.FC<addDialogButtonPropsType> = (props) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    /**\n     * Add new dialog or refresh existing.\n     * Redirects to new dialog's route.\n     */\n    const addDialog = () => {\n        dispatch(startRefreshDialog(props.userId));\n        history.push(`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`);\n    }\n\n    return (\n        <Button variant='contained' color='primary' onClick={addDialog}>Start dialog</Button>\n    );\n}","import {stringOrNull} from '../../../../types';\nimport React from 'react';\nimport userMale from '../../../../assets/images/user-male.png';\nimport Avatar from '@material-ui/core/Avatar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AvatarUploadButton} from './AvatarUploadButton/AvatarUploadButton';\nimport {AddDialogButton} from './AddDialogButton/AddDialogButton';\n\ntype profileAvatarPropsType = {\n    largePhoto: stringOrNull,\n    isOwner: boolean,\n    userId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        avatarWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(38),\n            height: theme.spacing(38),\n        }\n    }),\n);\n\n/**\n * Returns avatar-block with avatar-image and button for upload new.\n * If user is not owner of this profile returns avatar without button.\n * @param {profileAvatarPropsType} props - url to image, user ID and isOwner.\n * @constructor\n */\nexport const ProfileAvatar: React.FC<profileAvatarPropsType> = (props) => {\n    const classes = useStyles();\n    const profileAvatarLarge = props.largePhoto || userMale;\n\n    return (\n        <div className={classes.avatarWrapper}>\n            <Avatar className={classes.large} src={profileAvatarLarge}/>\n            {props.isOwner ? <AvatarUploadButton/> : <AddDialogButton userId={props.userId} />}\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/social-network-pattern-background.066f3894.jpg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport AdditionalInfo from \"./AdditionalInfo/AdditionalInfo\";\nimport AdditionalInfoForm from \"./AdditionalInfoForm/AdditionalInfoForm\";\nimport {profileType} from '../../../types';\nimport {ProfileAvatar} from './ProfileAvatar/ProfileAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport ProfileBackground from '../../../assets/images/social-network-pattern-background.jpg';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nexport type propsType = {\n    profile: profileType | null,\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    updateStatus: (status: string) => void,\n}\n\nconst wallpaperBlend = 'linear-gradient(rgba(255,255,255,.95), rgba(255,255,255,.95))';\nconst blockWidth = '30ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        wallpaper: {\n            backgroundImage: `${wallpaperBlend}, url(${ProfileBackground})`,\n            backgroundSize: '40%',\n            margin: theme.spacing(-3)\n        },\n        profileDescriptionWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n            margin: theme.spacing(0, 4),\n        },\n        profileDescription: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: theme.spacing(1)\n        }\n    }),\n);\n\n/**\n * Returns profile-block with avatar, status and profile info.\n * @param {propsType} props - props\n * @constructor\n */\nconst ProfileInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let [isEditMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.wallpaper}>\n            <div className={classes.profileDescription}>\n                <ProfileAvatar largePhoto={props.profile.photos.large} isOwner={props.isOwner} userId={props.profile.userId}/>\n                <div className={classes.profileDescriptionWrapper}>\n                    <Typography variant='h4'>{props.profile.fullName}</Typography>\n                    <ProfileStatus status={props.status}\n                                   updateStatus={props.updateStatus}\n                                   statusFetching={props.statusFetching}\n                                   isOwner={props.isOwner}\n                                   blockWidth={blockWidth}\n                    />\n                    {isEditMode\n                            ? <AdditionalInfoForm onChancel={() => setEditMode(false)}\n                                                  profile={props.profile}\n                            />\n                            : <AdditionalInfo aboutMe={props.profile.aboutMe}\n                                              lookingForAJob={props.profile.lookingForAJob}\n                                              lookingForAJobDescription={props.profile.lookingForAJobDescription}\n                                              contacts={props.profile.contacts}\n                                              setEditMode={() => setEditMode(true)}\n                                              isOwner={props.isOwner}\n                                              blockWidth={blockWidth}\n                            />\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport Post from '../../../Common/Post/Post';\nimport {postsDataType, stringOrNull} from '../../../types';\nimport List from '@material-ui/core/List';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AddMessageForm} from '../../../Common/AddMessageForm/AddMessageForm';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Typography from '@material-ui/core/Typography';\nimport {PostActions} from '../../../Common/Post/PostActions/PostActions';\n\nexport type myPostsPropsType = {\n    postsData: Array<postsDataType>,\n    avatar: stringOrNull,\n    userName: stringOrNull\n}\n\n/**\n * @const\n * @type string\n * @description block max width.\n */\nconst MAX_WIDTH = '30ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        postsList: {\n            width: '100%',\n            maxWidth: MAX_WIDTH,\n            backgroundColor: theme.palette.background.paper,\n            display: 'flex',\n            flexDirection: 'column-reverse'\n        },\n        postsTitle: {\n            margin: theme.spacing(2, 0)\n        },\n        postBlock: {\n            padding: theme.spacing(1)\n        }\n    })\n);\n\n/**\n * Component with title, form and list of posts.\n * @param {myPostsPropsType} props\n * @constructor\n */\nconst MyPosts: React.FC<myPostsPropsType> = (props) => {\n    const classes = useStyles();\n\n    let posts = props.postsData.map( (post) =>\n        <Post key={'MyPost' +post.id}\n              postId={post.id}\n              action={PostActions.textWithLikes(post.text, post.id, post.likes)}\n              avatar={props.avatar}\n              userName={props.userName}\n              blockWidth={MAX_WIDTH}\n        />\n    );\n\n    return (\n        <div className={classes.postBlock}>\n            <Typography variant='h5' className={classes.postsTitle}>Posts</Typography>\n            <AddMessageForm blockWidth={MAX_WIDTH}\n                            sendMessage={profileActions.sendPost}\n                            buttonText='Add Post'\n                            minTextLength={2}\n                            maxTextLength={100}\n            />\n            <List className={classes.postsList}>\n                {posts}\n            </List>\n        </div>\n    );\n};\n\nexport default MyPosts;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport {connect} from \"react-redux\";\nimport MyPosts, {myPostsPropsType} from \"./MyPosts\";\nimport {appStateType} from '../../../redux/reduxStore';\n\nlet mapStateToProps = (state: appStateType) => {\n    return (\n        {\n            postsData: state.profilePage.postsData,\n            avatar: state.profilePage.profile ? state.profilePage.profile.photos.small : '',\n            userName: state.auth.login\n        }\n    );\n};\n\nconst MyPostsContainer = connect<myPostsPropsType, {}, {}, appStateType>(\n    mapStateToProps,\n    {}\n)(MyPosts);\n\nexport default MyPostsContainer;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport ProfileInfo, {propsType} from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\ntype profilePropsType = propsType;\n\n/**\n * Whole profile-page with info about user and posts-block.\n * @param {profilePropsType} props\n * @constructor\n */\nconst Profile: React.FC<profilePropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         statusFetching={props.statusFetching}\n                         isOwner={props.isOwner}\n            />\n            <MyPostsContainer/>\n        </div>);\n};\n\nexport default Profile;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus, updateStatus} from \"../../reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport withAuthRedirect from \"../../Hocs/withAuthRedirect\";\nimport {MatchParams, profileType} from \"../../types\";\nimport {appStateType} from \"../../redux/reduxStore\";\n\ntype matchType = RouteComponentProps<MatchParams>;\n\ntype mapStatePropsType = {\n    profile: profileType | null,\n    status: string,\n    statusFetching: boolean\n};\n\ntype mapDispatchPropsType = {\n    getProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n    updateStatus: (status: string) => void,\n};\n\ntype ownPropsType = {\n};\n\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType;\n\n/**\n * Class component which returns profile-page.\n * If not logged-in will redirect to login.\n */\nclass ProfileContainer extends React.Component<propsType & matchType> {\n    getProfileData() {\n        this.props.getProfile(parseInt(this.props.match.params.userId));\n        this.props.getStatus(parseInt(this.props.match.params.userId));\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    componentDidUpdate(prevProps: mapStatePropsType  & matchType, prevState: appStateType, snapshot: any) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.getProfileData();\n        }\n    }\n    render() {\n        return <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\n    }\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        statusFetching: state.profilePage.statusFetching\n    }\n}\n\nconst mapDispatchToProps: mapDispatchPropsType = {\n    getProfile,\n    getStatus,\n    updateStatus,\n}\n\nexport default connect<\n    mapStatePropsType,\n    mapDispatchPropsType,\n    ownPropsType,\n    appStateType\n    >(mapStateToProps, mapDispatchToProps) (withRouter(withAuthRedirect(ProfileContainer)));","import {stringOrNull} from '../../../types';\nimport {maxLengthCreator, required, validatorCreator} from '../../../utils/validators';\nimport React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport Button from '@material-ui/core/Button';\nimport {useDispatch} from 'react-redux';\nimport {login} from '../../../reducers/authReducer';\nimport {createField, FormikCheckbox, FormikField} from '../../../Common/FormComponents/FieldsComponentsFormik';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nlet maxLength30 = maxLengthCreator(30);\n\nexport type loginFormDataType = {\n    login: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\ntype fieldNamesType = keyof loginFormDataType\ntype loginFormPropsType = {\n    captchaUrl: stringOrNull\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginForm: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '20ch',\n            margin: theme.spacing(1),\n            '& > *': {\n                display: 'flex',\n            },\n        },\n        checkboxWrapper: {\n            alignItems: 'center'\n        },\n        loginInput: {\n            flexGrow: 1,\n            margin: theme.spacing(1),\n        },\n        errorText: {\n            color: 'red',\n            alignSelf: 'center',\n            marginBottom: theme.spacing(1),\n        }\n    }),\n);\n\n/**\n * Form for login process with two static inputs, one optional input with image for captcha, checkbox and button.\n * @param {loginFormPropsType} props - url to captcha img\n * @constructor\n */\nconst LoginForm: React.FC<loginFormPropsType> = (props) => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const initialValues = {\n        login: '',\n        password: '',\n        rememberMe: false,\n        captcha: ''\n    }\n\n    const onSubmit = (formData: loginFormDataType, {setSubmitting}: FormikHelpers<loginFormDataType>) => {\n        dispatch(login(formData.login, formData.password, formData.rememberMe, formData.captcha, formik.setStatus));\n        setSubmitting(false);\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n    });\n\n    return (\n        <form className={classes.loginForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter login',\n                    'login',\n                    FormikField,\n                    validatorCreator([required, maxLength30])\n                )}\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter password',\n                    'password',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {type: 'password'}\n                )}\n                <div className={classes.checkboxWrapper}>\n                    {createField<fieldNamesType>(\n                        undefined,\n                        undefined,\n                        'rememberMe',\n                        FormikCheckbox,\n                        validatorCreator([]),\n                        {color: 'primary'}\n                    )}\n                    <span>remember me</span>\n                </div>\n                {props.captchaUrl && <img alt={'captcha'} src={props.captchaUrl}/>}\n                {props.captchaUrl && createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter symbols from image',\n                    'captcha',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {autoComplete: 'off'}\n                )}\n            </FormikProvider>\n            {formik.status && <div className={classes.errorText}>{formik.status}</div>}\n            <Button variant='contained'\n                    color='primary'\n                    type='submit'\n                    disabled={formik.isSubmitting || !formik.isValid}\n            >\n                Login\n            </Button>\n        </form>\n    );\n}\n\nexport default LoginForm;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {getCaptchaUrlSelector, getIsAuthSelector} from '../../Common/Selectors/Selectors';\nimport LoginForm from './LoginForm/LoginForm';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        loginPage: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '80vh'\n        }\n    }),\n);\n\n/**\n * Login-page with header and form.\n * @constructor\n */\nexport const Login: React.FC = () => {\n    const classes = useStyles();\n    const auth = useSelector(getIsAuthSelector);\n    const captchaUrl = useSelector(getCaptchaUrlSelector);\n\n    if (auth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={classes.loginPage}>\n            <Typography variant='h4'>Login</Typography>\n            <LoginForm captchaUrl={captchaUrl}/>\n        </div>\n    );\n}","import React from 'react';\n\nexport const NotFound: React.FC = () => {\n    return(\n        <div>404 Not Found</div>\n    );\n}","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        fallbackWrapper: {\n            display: 'flex',\n            flexDirection: 'column'\n        },\n        fallbackText: {\n            display: 'flex',\n            flexBasis: '80vh',\n            alignItems: 'center',\n            justifyContent: 'center',\n        }\n    }),\n);\n\nexport const SuspenseFallback: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.fallbackWrapper}>\n            <Container className={classes.fallbackText}>\n                <Typography color='textSecondary' variant='h3'>Loading...</Typography>\n            </Container>\n        </div>\n    );\n}","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\n\n/**\n * Page which will show to user after app-initialization end.\n * @constructor\n */\nconst StartPage = () => {\n    return <Redirect to={'/profile'}/>;\n}\n\nexport default StartPage;","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {Route, Switch} from 'react-router-dom';\nimport {getRouteNameById, routes} from './Common/Routes';\nimport {Login} from './components/Login/Login';\nimport {NotFound} from './components/NotFound';\nimport {SuspenseFallback} from './Common/SuspenseFallback/SuspenseFallback';\nimport StartPage from './Pages/StartPage';\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/Dialogs'));\nconst ChatPage = React.lazy(() => import('./Pages/ChatPage'));\n\n/**\n * Returns correct page depends on route, uses suspend for lazy-load.\n * @constructor\n */\nexport const Content: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            content: {\n                flexGrow: 1,\n                width: 330,\n                padding: theme.spacing(3),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    let DialogsComponent = () => <DialogsContainer/>;\n    let ProfileComponent = () => <ProfileContainer/>;\n\n    return (\n        <main className={classes.content}>\n            <Toolbar/>\n            <React.Suspense fallback={<SuspenseFallback/>}>\n                <Switch>\n                    <Route exact path=\"/\" component={StartPage}/>\n                    <Route path={'/' + getRouteNameById(routes.profile.id) + '/:userId?'} component={ProfileComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.dialogs.id) + '/:userId?'} component={DialogsComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.news.id)} component={News}/>\n                    <Route path={'/' + getRouteNameById(routes.music.id)} component={Music}/>\n                    <Route path={'/' + getRouteNameById(routes.users.id)} component={UsersContainer}/>\n                    <Route path={'/' + getRouteNameById(routes.settings.id)} component={Settings}/>\n                    <Route path={'/' + getRouteNameById(routes.chat.id)} component={ChatPage}/>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"*\" component={NotFound}/>\n                </Switch>\n            </React.Suspense>\n        </main>\n    );\n}","import React from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {makeInit} from \"./reducers/appReducer\";\nimport Preloader from \"./Common/Preloader/Preloader\";\nimport {AppHeader} from './components/Header/AppHeader';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {GlobalAlert} from './Common/GlobalAlert/GlobalAlert';\nimport {Content} from './Content';\nimport {getAppInitDoneSelector} from './Common/Selectors/Selectors';\n\nconst DRAWER_WIDTH = 240;\n\n/**\n * Returns whole app (header, menu and needed page).\n * @constructor\n */\nconst App: React.FC = () => {\n    const dispatch = useDispatch();\n    const isInitDone = useSelector(getAppInitDoneSelector);\n    const [isNotificationOpen, setNotificationOpen] = React.useState(false);\n    const [notificationText, setNotificationText] = React.useState('');\n    const [isMenuOpen, setMenuOpen] = React.useState<boolean>(false);\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n            },\n            drawer: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n                [theme.breakpoints.down('xs')]: {\n                    display: isMenuOpen ? '' : 'none',\n                },\n                flexShrink: 0,\n            },\n            drawerPaper: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n            },\n        }),\n    );\n\n    /**\n     * Catch error reason and set alert-data.\n     * @param reason\n     */\n    const catchGenericError = (reason: PromiseRejectionEvent) => {\n        let response = reason.reason.response;\n\n        if (response) {\n            setNotificationText('ERROR: server returned ' + response.status + ' ' + response.statusText);\n        } else {\n            setNotificationText('ERROR: server is not respond!');\n        }\n\n        setNotificationOpen(true);\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('unhandledrejection', catchGenericError);\n        dispatch(makeInit());\n\n        // returned function will be called on component unmount\n        return () => {\n            window.removeEventListener('unhandledrejection', catchGenericError);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const classes = useStyles();\n\n    if (!isInitDone) {\n        return <Preloader/>\n    }\n\n    function onMenuClick() {\n        setMenuOpen(!isMenuOpen);\n    }\n\n    return (\n        <div className={classes.root}>\n            <GlobalAlert isOpen={isNotificationOpen}\n                         text={notificationText}\n                         setNotificationOpen={setNotificationOpen}\n            />\n            <AppHeader onMenuClick={onMenuClick}/>\n            <Drawer className={classes.drawer} variant='permanent' classes={{paper: classes.drawerPaper}}>\n                <Toolbar />\n                <Navbar onMenuClick={onMenuClick}/>\n            </Drawer>\n            <Content/>\n        </div>\n    );\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer from \"../reducers/profileReducer\";\nimport dialogsReducer from \"../reducers/dialogsReducer\";\nimport usersReducer from \"../reducers/usersReducer\";\nimport authReducer from \"../reducers/authReducer\";\nimport appReducer from \"../reducers/appReducer\";\nimport thunk from \"redux-thunk\";\nimport chatReducer from '../reducers/chatReducer';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    chat: chatReducer\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type appStateType = ReturnType<rootReducerType>;\nexport type inferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto'\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\nimport {\n    basicResponseType,\n    captchaResultCodeType, messageListType, Override,\n    photosType,\n    profileType,\n    resultCodesType, stringOrNull, userListType, usersType\n} from \"../../types\";\nimport {filterType} from '../../reducers/usersReducer';\n\n/**\n * @const\n * @description Axios object with basic settings\n */\nconst DEFAULT_API = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '4b793204-e0f1-45c5-b96a-007d58f175b3'}\n    // headers: {'API-KEY': 'fd9a221c-3b90-4f5d-8c62-56d63fda2530'} //it's for second account\n});\n\ntype meResponseType = Override<basicResponseType, {\n    data: {\n        id: number,\n        email: string,\n        login: string\n    }\n}>;\n\ntype loginResponseType = Override<basicResponseType, {\n    data: {\n        id: number\n    },\n    resultCode: resultCodesType | captchaResultCodeType\n}>;\n\ntype updateProfileResponseType = Override<basicResponseType, {\n    fieldsErrors: Array<string>\n}>;\n\ntype savePhotoResponseType = Override<basicResponseType, {\n    data: {\n        photos: photosType,\n    },\n    fieldsErrors: Array<string>\n}>;\n\ntype captchaResponseType = {\n    url: string\n}\n\ntype getUsersResponseType = {\n    items: Array<usersType>,\n    totalCount: number,\n    error: string | null\n}\n\ntype dialogsListResponseType = Array<userListType>\n\ntype dialogsSendMessageResponseType = Override<basicResponseType, {\n    data: {\n        message: messageListType\n    },\n    fieldsErrors: Array<string>\n}>\n\ntype getMessagesListResponseType = {\n    items: Array<messageListType>,\n    totalCount: number,\n    error: stringOrNull\n}\n\n/**\n * @const\n * @description Api-object (documentation see at https://social-network.samuraijs.com/docs)\n */\nexport const Api = {\n    Users: {\n        getUsers: (pageSize = 4, currentPage = 0, filter: filterType) => {\n            return DEFAULT_API.get<getUsersResponseType>('users',\n                {params: {count: pageSize, page: currentPage + 1, term: filter.searchTerm, friend: filter.friend}}\n            ).then(response => {\n                if (response.data.items.length === 0) {\n                    return null;\n                }\n\n                return response.data;\n            });\n        },\n        unfollow: (userId: number) => {\n            return DEFAULT_API.delete<basicResponseType>('follow/' + userId)\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        follow: (userId: number) => {\n            return DEFAULT_API.post<basicResponseType>('follow/' + userId).then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        }\n    },\n    Auth: {\n        Me: () => {\n            return DEFAULT_API.get<meResponseType>('auth/me/').then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return response.data.data;\n                }\n\n                return null;\n            });\n        },\n        Login: (email: string, password: string, rememberMe: boolean, captcha: string) => {\n            return DEFAULT_API.post<loginResponseType>('auth/login/', {email, password, rememberMe, captcha}).then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return {result: response.data.data};\n                }\n\n                let message = response.data.messages.length ? response.data.messages[0] : 'Unknown error';\n                let resultCode = response.data.resultCode || -1;\n\n                return {error: message, resultCode: resultCode};\n            });\n        },\n        Logout: () => {\n            return DEFAULT_API.delete<basicResponseType>('auth/login/').then(response => {\n                return response.data.resultCode === resultCodesType.Success;\n            });\n        }\n    },\n    Profile: {\n        getProfile: (userId: number) => {\n            return DEFAULT_API.get<profileType>('profile/' + userId)\n                .then( response => {\n                    if (!response.data) {\n                        return null;\n                    }\n\n                    return response.data;\n                });\n        },\n        getStatus: (userId: number) => {\n            return DEFAULT_API.get<string>('profile/status/' + userId)\n                .then( response => {\n                    return response.data;\n                });\n        },\n        updateStatus: (status: string) => {\n            return DEFAULT_API.put<basicResponseType>('profile/status', {status})\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        savePhoto: (file: File) => {\n            const formData = new FormData();\n            formData.append('image', file);\n\n            return DEFAULT_API.put<savePhotoResponseType>('profile/photo', formData, {\n                headers: {'Content-Type': 'multipart/form-data'}\n            })\n                .then( response => {\n                    if (response.data.resultCode === 0) {\n                        return response.data.data.photos;\n                    }\n                });\n        },\n        saveProfile: (profile: profileType) => {\n            return DEFAULT_API.put<updateProfileResponseType>('profile', profile)\n                .then(response => {\n                    if (response.data.resultCode === resultCodesType.Success) {\n                        return Promise.resolve();\n                    } else {\n                        let reason = response.data.messages.length ? response.data.messages : ['Unknown error. (unknown)'];\n                        return Promise.reject(reason);\n                    }\n                });\n        }\n    },\n    Security: {\n        getCaptcha: () => {\n            return DEFAULT_API.get<captchaResponseType>('security/get-captcha-url')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data.url;\n                })\n        }\n    },\n    Dialogs: {\n        getDialogsList: () => {\n            return DEFAULT_API.get<dialogsListResponseType>('dialogs')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        startRefreshDialog: (userId: number) => {\n            return DEFAULT_API.put<basicResponseType>('dialogs/' + userId)\n                .then(response => {\n                    return response.data.resultCode === resultCodesType.Success\n                })\n        },\n        getMessagesList: (userId: number, page: number = 1, count: number = 10) => {\n            return DEFAULT_API.get<getMessagesListResponseType>('dialogs/' + userId + '/messages',\n                {params: {count: count, page: page + 1}})\n                .then(response => {\n                    if (response.data.error) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        sendMessage: (userId: number, message: string) => {\n            return DEFAULT_API.post<dialogsSendMessageResponseType>('dialogs/' + userId + '/messages', {body: message})\n                .then(response => {\n                    if (response.data.resultCode !== resultCodesType.Success) {\n                        return;\n                    }\n\n                    return response.data.data.message;\n                })\n        },\n        getNewMessagesCount: () => {\n            return DEFAULT_API.get<number>('dialogs/messages/new/count')\n                .then(response => {\n                    return response.data;\n                })\n        }\n    }\n}","export type validatorType = (value: string) => string | undefined;\n\n/**\n * Creates one validator from array of validators.\n * Returns error text or empty text as string.\n * Need for formik field-level validation.\n * @param {Array<validatorType>} validators - array of validators.\n */\nexport const validatorCreator = (validators: Array<validatorType>) => (value: string) => {\n    let error = '';\n\n    validators.forEach(validator => {\n        let result = validator(value);\n        if (result !== undefined) error = result;\n    })\n    return error;\n}\n\n/**\n * Validator for required string.\n * Returns undefined or error text as string.\n * @param {string} value - string from form for validation.\n */\nexport const required: validatorType = (value) => {\n    if (value) return undefined;\n    return 'Required field'\n}\n\n/**\n * Function which creates \"max length validator\".\n * @param {number} maxLength - max string length for validator.\n */\nexport const maxLengthCreator = (maxLength: number): validatorType => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength}`;\n    return undefined;\n}\n\n/**\n * Function which creates \"min length validator\".\n * @param {number} minLength - min string length for validator.\n */\nexport const minLengthCreator = (minLength: number): validatorType => (value) => {\n    if (value && value.length < minLength) return `Min length is ${minLength}`;\n    return undefined;\n}","import {Api} from '../components/API/api';\nimport {baseThunkType, contactsType, photosType, postsDataType, profileType} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {nanoid} from 'nanoid';\nimport {emptyErrorCallback, emptyStatusCallback, setErrors, setErrorsType, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    postsData: Array<postsDataType>,\n    profile: profileType | null,\n    ownerProfile: profileType | null,\n    statusFetching: boolean,\n    status: string\n}\n\ntype actionsType = inferActionsType<typeof profileActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    postsData: [\n        {id: nanoid(), text: 'First post!', likes: 15},\n        {id: nanoid(), text: 'Second post!', likes: 20},\n    ],\n    profile: null,\n    ownerProfile: null,\n    statusFetching: false,\n    status: ''\n};\n\nconst profileReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD_POST':\n            if (action.newPost === undefined || action.newPost.replace(/\\s+/g, '') === '') {\n                return state;\n            }\n\n            return {\n                ...state,\n                postsData: [...state.postsData, {id: nanoid(), text: action.newPost, likes: 0}]\n            };\n        case 'SN/PROFILE/DELETE_POST':\n            return {\n                ...state, postsData: state.postsData.filter(post => {\n                    return post.id !== action.postId;\n                })\n            };\n        case 'SN/PROFILE/SET_PROFILE':\n            return {...state, profile: action.profile};\n        case 'SN/PROFILE/SET_OWNER_PROFILE':\n            return {...state, ownerProfile: action.profile};\n        case 'SN/PROFILE/UPDATE_PROFILE':\n            let newProfile = {\n                ...(state.profile! as profileType),\n                ...action.profile,\n                contacts: {...(state.profile![\"contacts\"] as contactsType), ...action.profile.contacts}\n            };\n\n            return {\n                ...state,\n                profile: newProfile,\n                ownerProfile: newProfile\n            };\n        case 'SN/PROFILE/SET_STATUS':\n            return {...state, status: action.status};\n        case 'SN/PROFILE/TOGGLE_STATUS_FETCHING':\n            return {...state, statusFetching: !state.statusFetching};\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...(state.profile! as profileType), photos: action.photos},\n                ownerProfile: {...(state.ownerProfile! as profileType), photos: action.photos}\n            };\n        case 'SN/PROFILE/ADD_LIKE':\n            return {...state, postsData: state.postsData.map((post) => {\n                return post.id === action.postId ? {...post, likes: post.likes+1} : post;\n                })}\n        default:\n            return state;\n    }\n}\n\nexport const profileActions = {\n    sendPost: (newPost: string) => ({type: 'SN/PROFILE/ADD_POST', newPost} as const),\n    deletePost: (postId: string) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    setProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_PROFILE', profile} as const),\n    setOwnersProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_OWNER_PROFILE', profile} as const),\n    updateProfile: (profile: profileType) => ({type: 'SN/PROFILE/UPDATE_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    toggleStatusFetching: () => ({type: 'SN/PROFILE/TOGGLE_STATUS_FETCHING'} as const),\n    savePhotoSuccess: (photos: photosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n    addLike: (postId: string) => ({type: 'SN/PROFILE/ADD_LIKE', postId} as const),\n}\n\n/**\n * Requests status from api and set it to state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getStatus = (userId: number): thunkType => async (dispatch, getState) => {\n    let id = userId || getState().auth.id;\n\n    if (!id) {\n        return;\n    }\n\n    let data = await Api.Profile.getStatus(id);\n\n    if (data === null) {\n        dispatch(profileActions.setStatus(''));\n        return;\n    }\n\n    dispatch(profileActions.setStatus(data));\n}\n\n/**\n * Saves new status via API  and update it's in state.\n * @param {string} status - text of status\n */\nexport const updateStatus = (status: string): thunkType => async (dispatch) => {\n    dispatch(profileActions.toggleStatusFetching());\n\n    try {\n        let data = await Api.Profile.updateStatus(status);\n\n        if (!data) {\n            return;\n        }\n\n        dispatch(profileActions.setStatus(status));\n    } catch (reason) {\n        //TODO: переписать на нормальный вывод ошибки\n        alert('Не удалось сохранить статус, попробуйте позже!');\n    }\n\n    dispatch(profileActions.toggleStatusFetching());\n}\n\n/**\n * Requests user profile from api and set it to state.\n * If requested owners profile, it will returned from state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getProfile = (userId: number): thunkType => async (dispatch, getState) => {\n    const ownerId = getState().auth.id;\n    const id = userId || ownerId;\n\n    if (!id) {\n        return;\n    }\n\n    const ownerProfile = getState().profilePage.ownerProfile;\n\n    if (id === ownerId && ownerProfile !== null) {\n        dispatch(profileActions.setProfile({...ownerProfile}));\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(id);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setProfile(data));\n}\n\n/**\n * Requests owner profile from api and set it to state.\n */\nexport const getOwnerProfile = (): thunkType => async (dispatch, getState) => {\n    const userId = getState().auth.id;\n\n    if (!userId) {\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(userId);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setOwnersProfile(data));\n}\n\n/**\n * Saves new photo via API  and update it's in state.\n * @param {File} file - file data\n */\nexport const savePhoto = (file: File): thunkType => async (dispatch) => {\n    let data = await Api.Profile.savePhoto(file);\n\n    if (data === undefined) {\n        return;\n    }\n\n    dispatch(profileActions.savePhotoSuccess(data));\n}\n\n/**\n * Saves new profile-data via API  and update it's in state.\n * @param {profileType} profile - whole profile object\n * @param {setErrorsType=} errorCallback - formik setErrors function (optional)\n * @param {setStatusType=} statusCallback - formik setStatus function (optional)\n */\nexport const saveProfile = (\n    profile: profileType,\n    errorCallback: setErrorsType = emptyErrorCallback,\n    statusCallback: setStatusType = emptyStatusCallback\n): thunkType => (dispatch) => {\n    let promise = Api.Profile.saveProfile(profile);\n\n    return promise.then(\n        () => {\n            dispatch(profileActions.updateProfile(profile));\n            return Promise.resolve();\n        },\n        (data) => {\n            setErrors(data, errorCallback, statusCallback)\n            return Promise.reject('formHasErrors');\n    });\n}\n\nexport default profileReducer;","import {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {appStateType} from './redux/reduxStore';\n\nexport type Override<T1, T2> = Omit<T1, keyof T2> & T2;\n\nexport type stringOrNull = string | null;\n\nexport type profileType = {\n    userId: number,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    contacts: contactsType,\n    photos: photosType,\n    aboutMe: string\n}\n\nexport type contactsType = {\n    github: string,\n    vk: string,\n    facebook: string,\n    instagram: string,\n    twitter: string,\n    website: string,\n    youtube: string,\n    mainLink: string\n}\n\nexport type photosType = {\n    small: string | null,\n    large: string | null\n}\n\nexport type usersType = {\n    id: number,\n    name: string,\n    status: stringOrNull,\n    photos: photosType,\n    followed: boolean,\n    uniqueUrlName: stringOrNull\n}\n\nexport interface MatchParams {\n    userId: string;\n}\n\nexport type arrayOfNumbers = Array<number>;\n\nexport enum resultCodesType {\n    Success = 0,\n    Error = 1\n}\n\nexport enum captchaResultCodeType {\n    captchaRequired = 10\n}\n\nexport type basicResponseType = {\n    data: {},\n    resultCode: resultCodesType,\n    messages: Array<string>\n};\n\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, appStateType, unknown, A>;\n\nexport type postsDataType = {\n    id: string,\n    text: string,\n    likes: number\n}\n\nexport type userListType = {\n    id: number,\n    userName: string,\n    hasNewMessages: boolean,\n    newMessagesCount: number,\n    photos: photosType\n}\n\nexport type messageListType = {\n    id: string,\n    body: string,\n    senderId: number,\n    senderName: string,\n    recipientId: number,\n    viewed: boolean\n}","import {appStateType} from '../../redux/reduxStore';\n\nexport function getUsersSelector (state: appStateType) {\n    return state.usersPage.users;\n}\n\nexport function getCurrentPageSelector (state: appStateType) {\n    return state.usersPage.currentPage;\n}\n\nexport function getPageSizeSelector (state: appStateType) {\n    return state.usersPage.pageSize;\n}\n\nexport function getIsUsersFetchingSelector (state: appStateType) {\n    return state.usersPage.isUsersFetching;\n}\n\nexport function getFollowingInProgressSelector (state: appStateType) {\n    return state.usersPage.followingInProgress;\n}\n\nexport function getUsersFilterSelector (state: appStateType) {\n    return state.usersPage.filter;\n}\n\nexport function getIsAuthSelector (state: appStateType) {\n    return state.auth.isAuth;\n}\n\nexport function getCaptchaUrlSelector (state: appStateType) {\n    return state.auth.captchaUrl;\n}\n\nexport function getLoginSelector (state: appStateType) {\n    return state.auth.login;\n}\n\nexport function getOwnerIdSelector (state: appStateType) {\n    return state.auth.id;\n}\n\nexport function getChatMessages (state: appStateType) {\n    return state.chat.messages;\n}\n\nexport function getIsChatConnectedSelector (state: appStateType) {\n    return state.chat.isConnected;\n}\n\nexport function getDialogsMessagesSelector (state: appStateType) {\n    return state.dialogsPage.messageList;\n}\n\nexport function getDialogsUserListSelector (state: appStateType) {\n    return state.dialogsPage.userList;\n}\n\nexport function getNewMessagesCountSelector (state: appStateType) {\n    return state.dialogsPage.newMessagesCount;\n}\n\nexport function getDialogHasMoreSelector (state: appStateType) {\n    return state.dialogsPage.currentDialogHasMore;\n}\n\nexport function getAppInitDoneSelector (state: appStateType) {\n    return state.app.initDone;\n}\n\nexport function getOwnerPhotosSelector (state: appStateType) {\n    return state.profilePage.ownerProfile?.photos;\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType, messageListType, userListType} from '../types';\nimport {Api} from '../components/API/api';\nimport he from 'he';\n\nexport type initialStateType = {\n    userList: Array<userListType>,\n    messageList: Array<messageListType>,\n    currentDialogId: number,\n    currentDialogPage: number,\n    currentDialogHasMore: boolean,\n    newMessagesCount: number\n};\n\ntype actionsType = inferActionsType<typeof dialogsActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    userList: [],\n    messageList: [],\n    currentDialogId: 0,\n    currentDialogPage: 0,\n    currentDialogHasMore: false,\n    newMessagesCount: 0\n};\n\n/**\n * Unescape HTML-entities in every message body.\n * Returns new array.\n * @param {Array<messageListType>} messagesList - list of messages from API\n */\nfunction getUnescapedMessages(messagesList: Array<messageListType>): Array<messageListType> {\n    return  messagesList.map(message => {\n        let unescapedMessage = {...message};\n        unescapedMessage.body = he.unescape(message.body);\n        return unescapedMessage;\n    })\n}\n\nconst dialogsReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/ADD_MESSAGE':\n            return {\n                ...state,\n                messageList: [...state.messageList, {...action.newMessage}]\n            };\n        case 'SN/DIALOGS/DIALOGS_LIST_RECEIVED':\n            return {\n                ...state,\n                userList: [...action.payload]\n            }\n        case 'SN/DIALOGS/MESSAGES_LIST_RECEIVED':\n            return {\n                ...state,\n                messageList: [...getUnescapedMessages(action.payload), ...state.messageList],\n                currentDialogPage: state.currentDialogPage + 1\n            }\n        case 'SN/DIALOGS/CHAT_CHANGED':\n            return {\n                ...state,\n                currentDialogId: action.payload,\n                messageList: [],\n                currentDialogPage: 0,\n                currentDialogHasMore: false\n            }\n        case 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED':\n            return {\n                ...state,\n                newMessagesCount: action.payload\n            }\n        case 'SN/DIALOGS/CHAT_MESSAGES_READ': {\n            let messagesWasRead = 0;\n            return {\n                ...state,\n                userList: state.userList.map(userItem => {\n                    if (action.payload === userItem.id) {\n                        messagesWasRead = userItem.newMessagesCount;\n                        userItem.newMessagesCount = 0;\n                        userItem.hasNewMessages = false;\n                    }\n\n                    return userItem;\n                }),\n                newMessagesCount: state.newMessagesCount >= messagesWasRead ? state.newMessagesCount - messagesWasRead : 0\n            }\n        }\n        case 'SN/DIALOGS/HAS_NEW_MESSAGES_CHANGED':\n            return {\n                ...state,\n                currentDialogHasMore: action.payload > state.messageList.length\n            }\n        default:\n            return state;\n    }\n}\n\nexport const dialogsActions = {\n    messageSent: (newMessage: messageListType) => ({type: 'SN/DIALOGS/ADD_MESSAGE', newMessage} as const),\n    dialogsListReceived: (list: Array<userListType>) => ({type: 'SN/DIALOGS/DIALOGS_LIST_RECEIVED', payload: list} as const),\n    messagesListReceived: (list: Array<messageListType>) => ({type: 'SN/DIALOGS/MESSAGES_LIST_RECEIVED', payload: list} as const),\n    chatChanged: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_CHANGED', payload: chatId} as const),\n    chatMessagesRead: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_MESSAGES_READ', payload: chatId} as const),\n    newMessagesCountReceived: (count: number) => ({type: 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED', payload: count} as const),\n    countMessagesChanged: (count: number) => ({type: 'SN/DIALOGS/HAS_NEW_MESSAGES_CHANGED', payload: count} as const),\n}\n\n/**\n * Requests list of dialogs from api and set it to state.\n */\nexport const getDialogsList = (): thunkType => async (dispatch) => {\n    let data = await Api.Dialogs.getDialogsList();\n\n    if (!data || !data.length) {\n        dispatch(dialogsActions.dialogsListReceived([]));\n        return;\n    }\n\n    dispatch(dialogsActions.dialogsListReceived(data));\n}\n\n/**\n * Add new user in dialogs list or set it first if existing.\n * Reload dialogs list from API.\n * @param {number} userId - opponent ID\n */\nexport const startRefreshDialog = (userId: number): thunkType => async (dispatch) => {\n    let isSuccessful = await Api.Dialogs.startRefreshDialog(userId);\n\n    if (isSuccessful) {\n        await dispatch(getDialogsList());\n    }\n}\n\n/**\n * Requests list of messages from api and set it to state.\n * @param {number} userId - opponent ID\n */\nexport const getMessagesList = (userId: number): thunkType => async (dispatch, getState) => {\n    const dialogsPage = getState().dialogsPage;\n    let data = await Api.Dialogs.getMessagesList(userId, dialogsPage.currentDialogPage);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messagesListReceived(data.items));\n    dispatch(dialogsActions.countMessagesChanged(data.totalCount));\n}\n\n/**\n * Send new message to current dialog.\n * @param {string} text - text of message\n */\nexport const sendMessage = (text: string): thunkType => async (dispatch, getState) => {\n    let userId = getState().dialogsPage.currentDialogId;\n    let data = await Api.Dialogs.sendMessage(userId, text);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messageSent(data));\n}\n\n/**\n * Requests counter of new messages from api and set it to state.\n */\nexport const getNewMessagesCount = (): thunkType => async (dispatch, getState) => {\n    const isAuthorized = getState().auth.isAuth;\n\n    if (!isAuthorized) {\n        return;\n    }\n\n    let data = await Api.Dialogs.getNewMessagesCount();\n\n    dispatch(dialogsActions.newMessagesCountReceived(data));\n}\n\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user-male.ba3e9327.png\";","export default __webpack_public_path__ + \"static/media/preloader-spinner.635e13f4.svg\";","import React from \"react\";\nimport styles from './Preloader.module.css';\nimport preloader from \"../../assets/images/preloader-spinner.svg\";\n\ntype preloaderPropsType = {\n    notCentered?: boolean\n}\n\n/**\n * Returns block with preloader spinner.\n * @param {preloaderPropsType} props - props object\n * @param {boolean=} props.notCentered - if true, block will be aligned to center\n * @constructor\n */\nconst Preloader: React.FC<preloaderPropsType> = (props) => {\n    return (\n        <div className={!props.notCentered ? styles.preloaderWrapper : undefined}>\n            <img alt='preloader' className={styles.preloader} src={preloader}/>\n        </div>\n    );\n}\n\nexport default Preloader;","export type setErrorsType = (field: string, value: string | undefined) => void;\nexport type setStatusType = (field: string) => void;\n\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} field - not need to put param\n * @param {string|undefined} value - not need to put param\n */\nexport function emptyErrorCallback(field: string, value: string | undefined) {}\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} data - not need to put param\n */\nexport function emptyStatusCallback(data: string) {}\n\n/**\n * Call callback for every item in data. Parse every item to field name and error text.\n * @param {Array<string>} data - array with errors.\n * @param {setErrorsType} formikSetErrors - setErrors function from formik.\n * @param {setStatusType} formikSetStatus - setStatus function from formik.\n */\nexport function setErrors (data: Array<string>, formikSetErrors: setErrorsType, formikSetStatus: setStatusType) {\n    data.forEach(error => {\n        let rawError = error.split('(')[1],\n            hasSubkey = rawError.indexOf('->') !== -1,\n            key, subkey, errorTextRaw, errorText;\n\n        if (hasSubkey) {\n            key = rawError.split('->')[0].toLowerCase();\n            subkey = rawError.substring(0, rawError.length - 1).split('->')[1].toLowerCase();\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length - 1);\n\n            formikSetErrors(`${key}.${subkey}`, errorText);\n        } else {\n            key = rawError.substring(0, rawError.length - 1);\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length -1);\n\n            if (key === 'contacts') {\n                formikSetStatus(errorText);\n            }\n\n            formikSetErrors(key, errorText);\n        }\n    });\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWithIconWrapper\":\"PostActions_textWithIconWrapper__2-gBR\",\"icon\":\"PostActions_icon__3y829\"};"],"sourceRoot":""}