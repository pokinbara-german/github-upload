{"version":3,"sources":["utils/fontHelpers.ts","components/Common/Preloader/Preloader.module.css","components/Header/AppHeader.module.css","components/Common/Post/Post.tsx","Hocs/withAuthRedirect.tsx","reducers/usersReducer.ts","components/Common/AddMessageForm/EmojiPicker/EmojiPicker.tsx","components/Common/AddMessageForm/AddMessageForm.tsx","components/Common/Post/LikesBlock/LikesBlock.tsx","components/Common/Post/PostActions/PostActions.tsx","components/Common/Counter/Counter.tsx","API/chat-api.ts","reducers/chatReducer.ts","components/Navbar/Navbar.module.css","utils/routes.ts","components/Common/FormComponents/FieldsComponentsFormik.tsx","reportWebVitals.js","assets/images/vk-rounded.svg","components/Navbar/Navbar.tsx","reducers/authReducer.ts","reducers/appReducer.ts","assets/images/logo.svg","components/Header/AppHeader.tsx","components/Common/GlobalAlert/GlobalAlert.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/AdditionalInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/AdditionalInfo/AdditionalInfo.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoParts/AdditionalInfoParts.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoForm.tsx","components/Profile/ProfileInfo/ProfileAvatar/AvatarUploadButton/AvatarUploadButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/AddDialogButton/AddDialogButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","assets/images/social-network-pattern-background.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/NotFound/NotFound.tsx","components/Common/SuspenseFallback/SuspenseFallback.tsx","components/Start/Start.tsx","Content.tsx","App.tsx","redux/reduxStore.ts","index.tsx","API/api.ts","utils/validators.ts","selectors/selectors.ts","reducers/profileReducer.ts","types.ts","components/Common/Post/PostActions/PostActions.module.css","assets/images/preloader-spinner.svg","components/Common/Preloader/Preloader.tsx","reducers/dialogsReducer.ts","assets/images/user-male.png","utils/formikSetters.ts","components/Common/FullPageBlock/FullPageBlock.tsx"],"names":["getFontsWithEmoji","theme","fontPool","typography","fontFamily","split","splice","join","module","exports","Post","props","classes","makeStyles","createStyles","postsItem","padding","justifyContent","rightSided","postWrapper","display","margin","spacing","width","blockWidth","text","whiteSpace","overflowWrap","flexDirection","useStyles","avatarSmall","avatar","userMale","secondary","Fragment","action","postId","primaryLinked","to","getRouteNameById","routes","dialogs","id","userId","userName","alignItems","className","variant","profile","alt","src","primary","primaryLink","withAuthRedirect","Component","connect","state","isAuth","auth","restProps","initialState","users","currentPage","pageSize","isHasMore","isUsersFetching","followingInProgress","filter","searchTerm","friend","mapUserFollowingStatus","userObject","status","followed","userActions","type","count","isFetching","getUsers","dispatch","getState","a","usersPage","Api","Users","data","items","totalCount","processFollowUnfollow","apiMethod","actionCreator","follow","unfollow","usersReducer","map","user","length","EmojiPicker","React","useState","anchorElement","setAnchorElement","isPopoverOpen","Boolean","IconButton","onClick","event","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","anchorEl","onClose","onSelect","onEmojiClick","set","AddMessageForm","minLength","minLengthCreator","minTextLength","maxLength","maxTextLength","maxLengthCreator","undefined","validatorsList","required","push","newPostForm","maxWidth","newPostFormInputWrapper","flexGrow","stretched","useDispatch","formik","useFormik","initialValues","newMessage","onSubmit","values","setSubmitting","resetForm","sendMessage","handleSubmit","value","Tooltip","title","aria-label","placement","arrow","createField","FormikField","validatorCreator","multiline","emojiObject","setFieldValue","native","Button","color","disabled","isBlocked","isSubmitting","dirty","isValid","buttonText","likeWrapper","LikesBlock","iconSize","substr","profileActions","addLike","likeCount","fontSize","FONT_SIZE","getFormattedDate","date","indexOf","dateParts","datePart","replace","reverse","timePart","PostActions","onlyText","styles","textWithIconWrapper","Typography","component","textWithOk","secondRow","style","icon","textWithWait","textWithLikes","likes","DateBlock","Counter","useTheme","position","inCorner","top","right","label","size","subscribers","ws","closeHandler","console","log","notifyConnectionChanged","setTimeout","createChanel","messageHandler","newMessages","JSON","parse","forEach","message","nanoid","subscriber","openHandler","cleanUpWs","removeEventListener","close","WebSocket","addEventListener","chatApi","eventName","callback","send","messages","isConnected","chatActions","payload","_messageHandler","messageHandlerCreator","_connectionHandler","connectionHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","slice","PersonOutlinedIcon","EmailOutlinedIcon","FeaturedPlayListOutlinedIcon","LibraryMusicOutlinedIcon","MessageOutlinedIcon","PeopleAltOutlinedIcon","SettingsOutlinedIcon","getRouteIdByName","routeName","routeId","Object","keys","find","route","FormControl","field","children","meta","form","getFieldMeta","name","hasError","touched","error","helperText","elementProps","isValidElement","cloneElement","root","FormikCheckbox","formikSelect","memo","options","option","key","placeholder","validate","_path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MenuItem","selected","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","Navbar","currentRoute","useHistory","location","pathname","newMessagesCount","useSelector","getNewMessagesCountSelector","selectedIndex","setSelectedIndex","MenuList","currentRouteId","createElement","index","onMenuClick","drawerContainer","List","email","login","captchaUrl","authActions","url","getCaptcha","Security","authReducer","initDone","appActions","makeInit","Auth","Me","getNewMessagesCount","getOwnerProfile","loginBlock","marginLeft","marginRight","subtitle1","appBar","zIndex","drawer","headerContentWrapper","menuButton","breakpoints","up","leftPart","AppHeader","getIsAuthSelector","getLoginSelector","ownerPhotos","getOwnerPhotosSelector","AppBar","Toolbar","edge","headerLogo","logo","Avatar","small","Logout","loggedOut","loginLink","GlobalAlert","Snackbar","isOpen","reason","setNotificationOpen","autoHideDuration","TransitionComponent","Slide","ProfileStatus","getProfileStatusSelector","statusFetching","getProfileStatusFetchingSelector","statusDiv","statusInput","statusText","divider","isStatusEditing","setStatusEditing","newStatus","setNewStatus","useEffect","toggleEditing","updateStatus","Preloader","notCentered","isOwner","TextField","autoFocus","onBlur","onChange","target","Divider","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgVkRounded","_ref","svgRef","titleId","xmlns","height","viewBox","d","ForwardRef","ProfileContact","contactTitle","contactInfo","Icon","SvgIcon","VkRounded","rel","href","additionalInfo","additionalInfoItem","marginTop","wrapped","flexWrap","contacts","AdditionalInfo","ContactsList","contactValue","isNeedContacts","every","contact","aboutMe","lookingForAJob","lookingForAJobDescription","setEditMode","additionalInfoRow","flexBasis","textAlign","errorText","FormBasicInfo","checked","setChecked","Card","triggerCheckbox","FormContactsInfo","additionalInfoForm","buttonsWrapper","infoWrapper","errorsWrapper","AdditionalInfoForm","normalizeContacts","enableReinitialize","formData","setFieldError","setStatus","hasApiErrors","saveProfile","submitCount","onChancel","input","AvatarUploadButton","accept","files","savePhoto","htmlFor","startIcon","AddDialogButton","history","startRefreshDialog","avatarWrapper","large","ProfileAvatar","profileAvatarLarge","largePhoto","wallpaper","backgroundImage","ProfileBackground","backgroundSize","profileDescriptionWrapper","profileDescription","ProfileInfo","getProfileSelector","photos","isEditMode","fullName","MyPosts","postsList","backgroundColor","palette","background","paper","postsTitle","postBlock","postsData","getPostsSelector","posts","post","sendPost","BLOCK_WIDTH","Profile","ProfileContainer","getProfile","parseInt","match","params","getStatus","getProfileData","prevProps","prevState","snapshot","ownerId","mapDispatchToProps","profilePage","ownerProfile","toString","withRouter","maxLength30","loginForm","checkboxWrapper","loginInput","alignSelf","marginBottom","LoginForm","password","rememberMe","captcha","errorCallback","emptyStatusCallback","Login","resultCode","captchaResultCodeType","captchaRequired","autoComplete","loginPage","getCaptchaUrlSelector","NotFound","FullPageBlock","SuspenseFallback","Start","Settings","lazy","Music","News","UsersContainer","DialogsContainer","Chat","Content","content","Suspense","fallback","exact","path","news","music","settings","chat","App","isInitDone","getAppInitDoneSelector","isNotificationOpen","notificationText","setNotificationText","isMenuOpen","setMenuOpen","down","drawerPaper","catchGenericError","response","window","Drawer","rootReducer","combineReducers","profileReducer","dialogsPage","dialogsReducer","app","appReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","DEFAULT_API","axios","create","withCredentials","baseURL","headers","get","page","term","delete","resultCodesType","Success","result","put","file","FormData","append","Promise","resolve","reject","Dialogs","getDialogsList","getMessagesList","body","validators","validator","getUsersSelector","getIsUsersFetchingSelector","getFollowingInProgressSelector","getUsersFilterSelector","getUsersHasMoreSelector","getOwnerIdSelector","getChatMessages","getIsChatConnectedSelector","getDialogsMessagesSelector","messageList","getDialogsUserListSelector","userList","getDialogHasMoreSelector","currentDialogHasMore","getIsDialogsFetchingSelector","isDialogsFetching","getIsMessageSentFetchingSelector","isMessageSentFetching","getIsMessagesFetchingSelector","isMessagesFetching","newPost","deletePost","setProfile","setOwnersProfile","updateProfile","toggleStatusFetching","savePhotoSuccess","alert","emptyErrorCallback","statusCallback","setErrors","newProfile","preloaderWrapper","preloader","currentDialogId","currentDialogPage","getUnescapedMessages","messagesList","unescapedMessage","he","unescape","dialogsActions","messageSent","dialogsListReceived","list","messagesListReceived","chatChanged","chatId","chatMessagesRead","newMessagesCountReceived","countMessagesChanged","updateDialogsFetching","updateMessagesFetching","updateMessageSentFetching","messagesWasRead","userItem","hasNewMessages","formikSetErrors","formikSetStatus","subkey","errorTextRaw","rawError","toLowerCase","substring","fullPageBlock"],"mappings":"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","file":"static/js/main.5f258deb.chunk.js","sourcesContent":["import {Theme} from '@material-ui/core/styles';\n\n/**\n * Returns fontFamily string.\n * @param {Theme} theme - Material-UI theme\n */\nexport function getFontsWithEmoji(theme: Theme) {\n    let fontPool = theme.typography.fontFamily?.split(',');\n    fontPool?.splice(1, 0, \"Twemoji Mozilla\");\n    return fontPool?.join(',');\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__3Y8Jh\",\"preloader\":\"Preloader_preloader__8Ao-W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerLogo\":\"AppHeader_headerLogo__1q3ko\",\"loginLink\":\"AppHeader_loginLink__1Epif\"};","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport userMale from \"../../../assets/images/user-male.png\";\nimport {stringOrNull} from '../../../types';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {NavLink} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../../../utils/routes';\nimport {getFontsWithEmoji} from '../../../utils/fontHelpers';\n\ntype postPropsType = {\n    postId: string,\n    action?: React.ReactElement,\n    avatar: stringOrNull,\n    userName: stringOrNull,\n    userId?: number,\n    blockWidth?: string,\n    rightSided?: boolean,\n    primaryLink?: boolean,\n}\n\n/**\n * Unified post block with avatar, title, text and optional likes-block.\n * @param {postPropsType} props - props object\n * @param {string} props.postId - post ID as string\n * @param {React.ReactElement=} props.action - post text\n * @param {string|null} props.avatar - link to avatar image\n * @param {string|null} props.userName - text for title\n * @param {number=} props.userId - if exist, will append to avatar navlink\n * @param {string=} props.blockWidth - sets max-width of block (CSS value, i.e. \"5px\")\n * @param {boolean=} props.primaryLink - if true, title text will anchor\n * @constructor\n */\nconst Post: React.FC<postPropsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            postsItem: {\n                padding: 0,\n                justifyContent: props.rightSided ? 'end' : 'start'\n            },\n            postWrapper: {\n                display: 'flex',\n                margin: theme.spacing(1),\n                width: props.blockWidth || 'max-content',\n                padding: theme.spacing(1, 2)\n            },\n            text: {\n                whiteSpace: 'pre-line',\n                overflowWrap: 'break-word',\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                '& > p > span': {\n                    fontFamily: getFontsWithEmoji(theme)\n                },\n            }\n        }),\n    );\n\n    const classes = useStyles();\n    let avatarSmall = props.avatar || userMale;\n\n    const secondary = [\n        <React.Fragment key={props.postId}>\n            {props.action}\n        </React.Fragment>\n    ];\n\n    const primaryLinked = <NavLink to={`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`}>\n                              {props.userName}\n                          </NavLink>;\n\n    return(\n        <ListItem alignItems='flex-start' className={classes.postsItem}>\n            <Card variant={'outlined'} className={classes.postWrapper}>\n                <ListItemAvatar>\n                    {!!props.userId\n                        ? <NavLink to={`/${getRouteNameById(routes.profile.id)}/${props.userId}`}>\n                            <Avatar alt='ava' src={avatarSmall} />\n                          </NavLink>\n                        : <Avatar alt='ava' src={avatarSmall} />\n                    }\n                </ListItemAvatar>\n                <ListItemText className={classes.text}\n                              primary={!!props.primaryLink ? primaryLinked : props.userName}\n                              secondary={secondary}\n                />\n            </Card>\n        </ListItem>\n    );\n};\n\nexport default Post;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from '../redux/reduxStore';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\n/**\n * Returns component with redirect to login if user is not authorized. (generic-function)\n * @param {React.ComponentType} Component - component for wrapping\n */\nfunction withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\n    let mapStateToProps = (state: appStateType) => {\n        return (\n            {isAuth: state.auth.isAuth}\n        );\n    };\n\n    const AuthRedirect: React.FC<mapStatePropsType & {}> = (props) => {\n        let {isAuth, ...restProps} = props;\n\n        if (!isAuth) {\n            return <Redirect to='/login'/>\n        }\n\n        return <Component {...restProps as WCP}/>;\n    }\n\n    return connect(mapStateToProps)(AuthRedirect);\n}\n\nexport default withAuthRedirect;","import {Api} from '../API/api';\nimport {baseThunkType, arrayOfNumbers, usersType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {Dispatch} from 'redux';\n\nexport type initialStateType = {\n    users: Array<usersType>,\n    currentPage: number,\n    pageSize: number,\n    isHasMore: boolean,\n    isUsersFetching: boolean,\n    followingInProgress: arrayOfNumbers,\n    filter: filterType\n}\n\nexport type filterType = {\n    searchTerm: stringOrNull,\n    friend: null | boolean\n}\ntype actionsType = inferActionsType<typeof userActions>;\ntype thunkType = baseThunkType<actionsType>;\n\ntype apiMethodType = typeof Api.Users.follow | typeof Api.Users.unfollow;\n\nconst initialState: initialStateType = {\n    users: [],\n    currentPage: 0,\n    pageSize: 12,\n    isHasMore: false,\n    isUsersFetching: false,\n    followingInProgress: [],\n    filter: {\n        searchTerm: null,\n        friend: null\n    }\n};\n\n/**\n * Sets user with ID in list followed or unfollowed.\n * Returns new list of users.\n * @param {usersType} userObject - object of user from search\n * @param {number} userId - ID of profile\n * @param {boolean} status - true - is followed, false - is not\n */\nfunction mapUserFollowingStatus(userObject: usersType, userId: number, status: boolean) {\n        if (userObject.id === userId) {\n            return {...userObject, followed: status}\n        }\n        return userObject;\n}\n\nconst usersReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOWED':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, true))\n            }\n        case 'SN/USERS/UNFOLLOWED':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, false))\n            }\n        case 'SN/USERS/SET_SEARCH_TERM':\n            return {\n                ...state,\n                filter: {...action.filter},\n                users: [],\n                currentPage: 0,\n                isHasMore: false\n            }\n        case 'SN/USERS/USERS_LIST_RECEIVED':\n            return {\n                ...state,\n                users: [...state.users, ...action.users],\n                currentPage: ++state.currentPage\n            }\n        case 'SN/USERS/COUNT_USERS_CHANGED':\n            return {\n                ...state,\n                isHasMore: state.users.length < action.count\n            }\n        case 'SN/USERS/UPDATE_IS_USERS_FETCHING':\n            return {...state, isUsersFetching: action.isUsersFetching}\n        case 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING':\n            return {\n                ...state,\n                followingInProgress:\n                    action.isFetching\n                        ? [...state.followingInProgress, action.userId]\n                        : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userActions = {\n    /** Action after user following */\n    followUser: (userId: number) => ({type: 'SN/USERS/FOLLOWED', userId} as const),\n    /** Action after user unfollowing */\n    unfollowUser: (userId: number) => ({type: 'SN/USERS/UNFOLLOWED', userId} as const),\n    /** Action for set new search filter */\n    setSearchFilter: (filter: filterType) => ({type: 'SN/USERS/SET_SEARCH_TERM', filter} as const),\n    /** Action after users list was received from API */\n    usersListReceived: (users: Array<usersType>) => ({type: 'SN/USERS/USERS_LIST_RECEIVED', users} as const),\n    /** Action after received new value of total users */\n    countUsersChanged: (count: number) => ({type: 'SN/USERS/COUNT_USERS_CHANGED', count} as const),\n    /** Action which sets status of users list receiving. true - in progress, false - is done */\n    updateUsersFetching: (isUsersFetching: boolean) => ({\n        type: 'SN/USERS/UPDATE_IS_USERS_FETCHING',\n        isUsersFetching\n    } as const),\n    /** Action which sets status of users following\\unfollowing process. true - in progress, false - is done */\n    updateFollowingFetching: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING',\n        isFetching,\n        userId\n    } as const)\n}\n\n/**\n * Gets one page of users from API and sets it to state.\n * @param {filterType} filter - search filter\n */\nexport const getUsers = (filter: filterType): thunkType => {\n    return async (dispatch, getState) => {\n        dispatch(userActions.updateUsersFetching(true));\n\n        if (filter !== getState().usersPage.filter) {\n            dispatch(userActions.setSearchFilter(filter));\n        }\n\n        const currentPage = getState().usersPage.currentPage;\n        const pageSize = getState().usersPage.pageSize;\n\n        let data = await Api.Users.getUsers(pageSize, currentPage, filter);\n\n        dispatch(userActions.updateUsersFetching(false));\n\n        if (data === null) {\n            return;\n        }\n\n        dispatch(userActions.usersListReceived(data.items));\n        dispatch(userActions.countUsersChanged(data.totalCount));\n    }\n}\n\n/**\n * Make process of following or unfollowing wia API and sets result to state.\n * @param {number} userId - ID of user which will be followed\\unfollowed\n * @param {Dispatch<actionsType>} dispatch - dispatch function\n * @param {apiMethodType} apiMethod - function of API\n * @param {function(number): actionsType} actionCreator - process which will be made\n */\nconst processFollowUnfollow = async (\n    userId: number,\n    dispatch: Dispatch<actionsType>,\n    apiMethod: apiMethodType,\n    actionCreator: (userId: number) => actionsType\n) => {\n    dispatch(userActions.updateFollowingFetching(true, userId));\n    let isSuccessful = await apiMethod(userId);\n\n    if (isSuccessful) {\n        dispatch(actionCreator(userId));\n    }\n\n    dispatch(userActions.updateFollowingFetching(false, userId));\n}\n\n/**\n * Makes following process\n * @param {number} userId - ID of user which will be followed\n */\nexport const follow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.follow, userActions.followUser);\n    }\n}\n\n/**\n * Makes unfollowing process\n * @param {number} userId - ID of user which will be unfollowed\n */\nexport const unfollow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.unfollow, userActions.unfollowUser);\n    }\n}\n\nexport default usersReducer;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\nimport Popover from '@material-ui/core/Popover';\nimport 'emoji-mart/css/emoji-mart.css'\nimport {BaseEmoji, Picker} from 'emoji-mart'\n\ntype emojiPickerPropsType = {\n    onEmojiClick: (emojiObject:  BaseEmoji) => void\n}\n\n/**\n * Returns IconButton with emoji picker in popup.\n * @param {emojiPickerPropsType} props - props object\n * @param {function(emojiObject: BaseEmoji):void} props.onEmojiClick - function which will set picked emoji\n * @constructor\n */\nexport const EmojiPicker: React.FC<emojiPickerPropsType> = (props) => {\n    const [anchorElement, setAnchorElement] = React.useState<HTMLButtonElement | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorElement(null);\n    };\n\n    const isPopoverOpen = Boolean(anchorElement);\n\n    return (\n        <React.Fragment>\n            <IconButton onClick={handleClick}>\n                <EmojiEmotionsOutlinedIcon/>\n            </IconButton>\n            <Popover\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={isPopoverOpen}\n                anchorEl={anchorElement}\n                onClose={handleClose}\n            >\n                <Picker onSelect={props.onEmojiClick}\n                        set='apple'\n                />\n            </Popover>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {createField, FormikField} from '../FormComponents/FieldsComponentsFormik';\nimport {maxLengthCreator, minLengthCreator, required, validatorCreator} from '../../../utils/validators';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useDispatch} from 'react-redux';\nimport {EmojiPicker} from './EmojiPicker/EmojiPicker';\nimport {BaseEmoji} from 'emoji-mart';\n\ntype propsType = {\n    blockWidth?: string,\n    buttonText: string,\n    minTextLength: number,\n    maxTextLength?: number,\n    isBlocked?: boolean,\n    sendMessage: (text: string) => void\n};\n\ntype formDataType = {\n    newMessage: string\n}\n\ntype fieldNamesType = keyof formDataType;\n\n/**\n * Returns form for adding new message with one multiline input and one button.\n * @param {propsType} props - props object.\n * @param {string=} props.blockWidth - width of form (optional param, 'inherit' by default)\n * @param {string} props.buttonText - text on button\n * @param {number} props.minTextLength - min length of input value\n * @param {number=} props.maxTextLength - max length of input value (optional)\n * @param {boolean} props.isBlocked - is need to disable button\n * @param {function(text: string): void} props.sendMessage - callback for set new message\n * @constructor\n */\nexport const AddMessageForm: React.FC<propsType> = (props) => {\n    let minLength = minLengthCreator(props.minTextLength);\n    let maxLength = props.maxTextLength ? maxLengthCreator(props.maxTextLength) : undefined;\n\n    let validatorsList = [required, minLength];\n\n    if (maxLength !== undefined) {\n        validatorsList.push(maxLength);\n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            newPostForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: props.blockWidth || 'inherit',\n                '& > div': {\n                    display: 'flex',\n                    margin: theme.spacing(1),\n                },\n            },\n            newPostFormInputWrapper: {\n                display: 'flex',\n                '& > div': {\n                    display: 'flex',\n                    flexGrow: 1,\n                    margin: theme.spacing(1),\n                },\n            },\n            stretched: {\n                flexGrow: 1,\n            }\n        }),\n    );\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onSubmit(values: formDataType, {setSubmitting, resetForm}: FormikHelpers<formDataType>) {\n        dispatch(props.sendMessage(values.newMessage));\n        setSubmitting(false);\n        resetForm();\n    }\n\n    const formik = useFormik({\n        initialValues: {newMessage: ''},\n        onSubmit,\n    });\n\n    const onEmojiClick = (emojiObject: BaseEmoji) => {\n        formik.setFieldValue('newMessage', formik.values.newMessage + emojiObject.native);\n    };\n\n    return (\n        <form onSubmit={formik.handleSubmit} className={classes.newPostForm}>\n            <div className={classes.newPostFormInputWrapper}>\n                <FormikProvider value={formik}>\n                    <Tooltip title={'You can type multiline. Just hit enter.'} aria-label='Hint' placement=\"right\" arrow>\n                        {createField<fieldNamesType>(\n                            classes.stretched,\n                            'Type something',\n                            'newMessage',\n                            FormikField,\n                            validatorCreator(validatorsList),\n                            {multiline: true}\n                        )}\n                    </Tooltip>\n                </FormikProvider>\n                <EmojiPicker onEmojiClick={onEmojiClick}/>\n            </div>\n            <div>\n                <Button variant='contained'\n                        color='primary'\n                        type='submit'\n                        disabled={!!props.isBlocked || formik.isSubmitting || !formik.dirty || !formik.isValid}\n                >\n                    {props.buttonText}\n                </Button>\n            </div>\n        </form>\n    );\n}","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {profileActions} from '../../../../reducers/profileReducer';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\n\ntype likesBlockPropsType = {\n    postId: string,\n    likeCount: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        likeWrapper: {\n            display: 'flex',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        }\n    }),\n);\n\n/**\n * Returns counter for post likes with tooltip and button to add like.\n * @param {likesBlockPropsType} props - props object\n * @param {string} props.postId - ID of post for identify it in DOM (must be unique)\n * @param {number} props.likeCount - current count of post likes\n * @constructor\n */\nexport const LikesBlock: React.FC<likesBlockPropsType> = (props) => {\n    const iconSize = 'small';\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    /**\n     * Add like to post\n     * @param {React.MouseEvent<HTMLSpanElement>} event - sets automatically, not need to put it\n     */\n    const likeHandler = (event: React.MouseEvent<HTMLSpanElement>) => {\n        let targetId = event.currentTarget.id;\n        let postId = targetId.substr(5);\n\n        if (postId) {\n            dispatch(profileActions.addLike(postId));\n        }\n    };\n\n    return (\n        <span onClick={likeHandler} id={'post-' + props.postId} className={classes.likeWrapper}>\n            <Tooltip arrow title='Like' aria-label='like'>\n                {props.likeCount ? <ThumbUpIcon fontSize={iconSize}/> : <ThumbUpOutlinedIcon fontSize={iconSize}/>}\n            </Tooltip>\n            <span>{props.likeCount}</span>\n        </span>\n    );\n};","import React from 'react';\nimport styles from './PostActions.module.css'\nimport Typography from '@material-ui/core/Typography';\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\nimport DoneAllOutlinedIcon from '@material-ui/icons/DoneAllOutlined';\nimport {LikesBlock} from '../LikesBlock/LikesBlock';\n\n/**\n * @const\n * @description - value of css font-size for icons.\n */\nconst FONT_SIZE = '0.9rem';\n\n/**\n * @const\n * @description - value of css font-size for date block.\n */\nconst DATE_SIZE = '0.7rem';\n\n/**\n * Return date string in human readable format.\n * @param {string} date - date as string like \"2021-09-18T10:06:21.48\"\n */\nfunction getFormattedDate(date: string): string {\n    const separator = 'T';\n\n    if (!date || date.indexOf(separator) < 1) {\n        return '';\n    }\n\n    let dateParts = date.split(separator);\n    let datePart = dateParts[0].replace(/-/g, ' ').split(' ').reverse().join(' ');\n    let timePart = dateParts[1].split('.')[0];\n\n    return `${datePart} ${timePart}`;\n}\n\n/** Object with creators of ready actions for Post component */\nexport const PostActions = {\n    /**\n     * Returns ready action where only text.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    onlyText(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                {date && <DateBlock date={date}/>}\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text and icon of read message.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    textWithOk(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <span className={styles.secondRow}>\n                    {date && <DateBlock date={date}/>}\n                    <DoneAllOutlinedIcon style={{fontSize: FONT_SIZE}} color='primary' className={styles.icon}/>\n                </span>\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text and icon of unread message.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    textWithWait(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <span className={styles.secondRow}>\n                    {date && <DateBlock date={date}/>}\n                    <CheckOutlinedIcon style={{fontSize: FONT_SIZE}} color='disabled' className={styles.icon}/>\n                </span>\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text, likes counter and button for add likes.\n     * @param {string} text - text in action\n     * @param {string} postId - ID of post\n     * @param {number} likes - current number of likes\n     */\n    textWithLikes(text: string, postId: string, likes: number) {\n        return (\n            <>\n                <Typography component='span'>{text}</Typography>\n                <LikesBlock postId={postId} likeCount={likes}/>\n            </>\n        );\n    }\n}\n\ntype dateBlockPropsType = {\n    date: string\n}\n\n/**\n *\n * @param {dateBlockPropsType} props - props object\n * @param {string} props.date - date as text\n * @constructor\n */\nconst DateBlock:React.FC<dateBlockPropsType> = (props) => {\n    return (\n        <Typography component='span' style={{fontSize: DATE_SIZE}} color='textSecondary'>\n            {getFormattedDate(props.date)}\n        </Typography>\n    );\n}","import React from 'react';\nimport {useTheme} from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\n\ntype counterPropsType = {\n    count: number,\n    inCorner?: boolean\n}\n\n/**\n * Returns small numeric label.\n * @param {counterPropsType} props - props object\n * @param {number} props.count - number which will be show.\n * @param {boolean=} props.isInCorner - if true, will be positioned in top-right corner (optional).\n * @constructor\n */\nexport const Counter: React.FC<counterPropsType> = (props) => {\n    const theme = useTheme();\n    return (\n        <Chip style={{\n                margin: theme.spacing(0, 1),\n                position: props.inCorner ? 'absolute' : undefined,\n                top: props.inCorner ? theme.spacing(1) : undefined,\n                right: props.inCorner ? theme.spacing(0) : undefined\n                }}\n              color='primary'\n              label={props.count}\n              size='small'/>\n    );\n}","import {nanoid} from 'nanoid';\n\ntype ApiMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n};\n\nexport type eventNamesType = 'message-received' | 'connection-changed';\n\nexport interface messageType extends ApiMessageType {\n    id: string\n}\n\ntype messageReceivedSubscriberType = (messages: Array<messageType>) => void;\ntype connectionChangedSubscriberType = (status: boolean) => void;\ntype subscribersType = {\n    'message-received': Array<messageReceivedSubscriberType>,\n    'connection-changed': Array<connectionChangedSubscriberType>\n}\n\n/** @constant\n *  @type string\n *  @description URL to websocket end-point */\nconst BASE_URL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx';\n\nlet subscribers: subscribersType = {\n    'message-received': [],\n    'connection-changed': []\n};\n\nlet ws: WebSocket | null = null;\n\n/**\n * Notify subscribers about connection closing and restart it's connection.\n */\nfunction closeHandler() {\n    console.log('CLOSE WS');\n    notifyConnectionChanged(false);\n    setTimeout(createChanel, 3000);\n}\n\n/**\n * Notify subscribers about new message was received.\n * @param {MessageEvent} event\n */\nfunction messageHandler(event: MessageEvent) {\n    const newMessages = JSON.parse(event.data);\n    newMessages.forEach((message: messageType) => message.id = nanoid());\n    subscribers['message-received'].forEach(subscriber => subscriber(newMessages));\n}\n\n/**\n * Notify about connection is opened\n */\nfunction openHandler() {\n    notifyConnectionChanged(true);\n}\n\n/**\n * Notify subscribers about connection status was changed.\n * @param {boolean} status - connection ready or not.\n */\nfunction notifyConnectionChanged(status: boolean) {\n    subscribers['connection-changed'].forEach(subscriber => subscriber(status));\n}\n\n/**\n * Clean WebSocket object from listeners and closes connection.\n */\nfunction cleanUpWs() {\n    ws?.removeEventListener('close', closeHandler);\n    ws?.removeEventListener('message', messageHandler);\n    ws?.removeEventListener('open', openHandler);\n    ws?.close();\n}\n\n/**\n * Cleanup old connection and creates new.\n */\nfunction createChanel() {\n    cleanUpWs();\n    ws = new WebSocket(BASE_URL);\n    notifyConnectionChanged(false);\n    ws.addEventListener('close', closeHandler);\n    ws.addEventListener('message', messageHandler);\n    ws.addEventListener('open', openHandler);\n}\n\nexport const chatApi = {\n    //TODO: refactor this\n    subscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName].push(callback);\n        // @ts-ignore\n        return () => subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    //TODO: refactor this too\n    unsubscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    sendMessage(message: string) {\n        ws?.send(message);\n    },\n    connect() {\n        createChanel();\n    },\n    disconnect() {\n        cleanUpWs();\n        subscribers['message-received'] = [];\n        subscribers['connection-changed'] = [];\n    }\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {chatApi, messageType} from '../API/chat-api';\nimport {Dispatch} from 'redux';\n\n/**\n * @constant\n * @type number\n * @description Maximal number of posts in chat\n */\nconst MAX_CHAT_MESSAGES = 100;\n\nexport type initialStateType = {\n    messages: Array<messageType>,\n    isConnected: boolean\n};\n\ntype actionsType = inferActionsType<typeof chatActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    messages: [],\n    isConnected: false\n};\n\nconst chatReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/CHAT/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload].slice(-MAX_CHAT_MESSAGES)\n            };\n        case 'SN/CHAT/CHAT_CLEARED':\n            return {\n                ...state,\n                messages: []\n            };\n        case 'SN/CHAT/CONNECTION_CHANGED':\n            return {\n                ...state,\n                isConnected: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const chatActions = {\n    messagesReceived: (messages: Array<messageType>) => ({type: 'SN/CHAT/MESSAGES_RECEIVED', payload: messages} as const),\n    chatCleared: () => ({type: 'SN/CHAT/CHAT_CLEARED'} as const),\n    connectionChanged: (isConnected: boolean) => ({type: 'SN/CHAT/CONNECTION_CHANGED', payload: isConnected} as const)\n}\n\nlet _messageHandler: ((messages: Array<messageType>) => void) | null = null;\n\n/**\n * Helper function for create listener of new messages.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet messageHandlerCreator = (dispatch: Dispatch) => {\n    if (_messageHandler === null) {\n        _messageHandler = (messages) => {\n            dispatch(chatActions.messagesReceived(messages));\n        }\n    }\n\n    return _messageHandler;\n};\n\nlet _connectionHandler: ((status: boolean) => void) | null = null;\n\n/**\n * Helper function for create listener of connection.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet connectionHandlerCreator = (dispatch: Dispatch) => {\n    if (_connectionHandler === null) {\n        _connectionHandler = (status) => {\n            dispatch(chatActions.connectionChanged(status));\n        }\n    }\n\n    return _connectionHandler;\n};\n\n/**\n * Starts connection to chat and will set new messages and connection status to state.\n */\nexport const startMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.connect();\n    chatApi.subscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.subscribe('connection-changed', connectionHandlerCreator(dispatch));\n}\n\n/**\n * Stops listeners, clears chat and disconnects from server.\n */\nexport const stopMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.unsubscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.unsubscribe('connection-changed', connectionHandlerCreator(dispatch));\n    dispatch(chatActions.chatCleared());\n    chatApi.disconnect();\n}\n\n/**\n * Send new message to chat\n * @param {string} message - text of message\n */\nexport const sendMessage = (message: string): thunkType => () => {\n    chatApi.sendMessage(message);\n}\n\nexport default chatReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerContainer\":\"Navbar_drawerContainer__1aacK\"};","import PersonOutlinedIcon from '@material-ui/icons/PersonOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport FeaturedPlayListOutlinedIcon from '@material-ui/icons/FeaturedPlayListOutlined';\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined';\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\nimport {SvgIconTypeMap} from '@material-ui/core';\n\nexport type routesVariants = 'profile' | 'dialogs' | 'news' | 'music' | 'chat' | 'users' | 'settings';\n\nexport type routesType = {\n    [key in routesVariants]: {\n        id: number,\n        title: string,\n        icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>\n    };\n};\n\n/**\n * Object for pages routines in app.\n */\nexport const routes: routesType = {\n    'profile': {id: 1, title: 'Profile', icon: PersonOutlinedIcon},\n    'dialogs': {id: 2, title: 'Dialogs', icon: EmailOutlinedIcon},\n    'news': {id: 3, title: 'News', icon: FeaturedPlayListOutlinedIcon},\n    'music': {id: 4, title: 'Music', icon: LibraryMusicOutlinedIcon},\n    'chat': {id: 5, title: 'Chat', icon: MessageOutlinedIcon},\n    'users': {id: 6, title: 'Users', icon: PeopleAltOutlinedIcon},\n    'settings': {id: 7, title: 'Settings', icon: SettingsOutlinedIcon},\n}\n\n/**\n * Gets route ID.\n * @param {routesVariants} routeName route as string\n */\nexport const getRouteIdByName = (routeName: routesVariants) => {\n    return routeName in routes ? routes[routeName].id : 0;\n}\n\n/**\n * Gets route name as string.\n * @param {number} routeId route ID\n */\nexport const getRouteNameById = (routeId: number) => {\n    return Object.keys(routes).find(route => routes[route as routesVariants].id === routeId);\n}","import React from \"react\";\nimport {Field, FieldProps} from \"formik\";\nimport {validatorType} from \"../../../utils/validators\";\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {createStyles, makeStyles} from '@material-ui/core';\nimport {getFontsWithEmoji} from '../../../utils/fontHelpers';\n\ntype elementPropsType = {\n    error?: boolean,\n    helperText?: string\n};\n\n/**\n * Constructs wrapped component for formik field.\n * @param {Object} field\n * @param {Object | Array} children - React children\n * @param {Object} props - any needed props\n * @constructor\n */\nconst FormControl: React.FC<FieldProps> = ({field, children, ...props}) => {\n    const meta = props.form.getFieldMeta(field.name);\n    const hasError = meta.touched && meta.error;\n    const helperText = meta.error || undefined;\n\n    const elementProps: typeof field & typeof props & elementPropsType = {\n        ...field,\n        ...props\n    };\n\n    if (hasError) elementProps.error = !!hasError;\n    if (helperText) elementProps.helperText = helperText;\n\n    return (\n        <div>\n            {React.isValidElement(children) && React.cloneElement(children, elementProps)}\n        </div>\n    );\n};\n\n/**\n * Material-UI input for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikField: React.FC<FieldProps> = (props) => {\n    const useStyles = makeStyles((theme) =>\n        createStyles({\n            root: {\n                '& > div': {\n                    fontFamily: getFontsWithEmoji(theme)\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <FormControl {...props}><TextField classes={classes}/></FormControl>\n    );\n};\n\n/**\n * Material-UI checkbox for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikCheckbox: React.FC<FieldProps> = (props) => {\n    return (\n        <FormControl {...props}><Checkbox/></FormControl>\n    );\n};\n\n/**\n * Material-UI select for formik field constructor.\n * @param {Object} props - props.children must be transferred for select options and must be an Array\n */\nexport const formikSelect: React.FC<FieldProps> = React.memo((props) => {\n    let options = props.children as Array<{key: string, value: string}>;\n\n    return (\n        <FormControl {...props}>\n            <Select>\n                {options && options.map(option => {\n                    return(\n                        <MenuItem key={option.key} value={option.key}>{option.value}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n});\n\n/**\n * Creates formik field based on transferred component.\n * @param {string | undefined} className\n * @param {string | undefined} placeholder\n * @param {string} name - field name as string\n * @param {React.FC} component - valid React component\n * @param {validatorType} validate - field validator\n * @param {Object} props - any props as object\n */\nexport function createField<namesType extends string> (\n    className: string | undefined,\n    placeholder: string | undefined,\n    name: namesType,\n    component: React.FC<FieldProps>,\n    validate: validatorType,\n    props = {}\n) {\n    return (\n        <Field className={className}\n               placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgVkRounded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm.25 16.996h-2.134c-1.205 0-1.409-.687-2.401-1.679-.897-.897-1.395-.209-1.374 1.068.006.339-.161.611-.566.611-1.264 0-3.08.178-4.918-1.806-1.883-2.033-3.857-6.111-3.857-6.513 0-.237.196-.344.524-.344h2.17c.574 0 .623.284.783.649.667 1.521 2.265 4.574 2.69 2.87.244-.978.344-3.245-.703-3.44-.594-.11.452-.746 1.968-.746.377 0 .786.041 1.205.137.769.179.771.523.761 1.026-.039 1.903-.269 3.184.233 3.507.479.31 1.739-1.717 2.403-3.281.183-.433.219-.722.734-.722h2.654c1.39 0-.182 1.997-1.383 3.557-.968 1.255-.916 1.28.209 2.324.803.744 1.75 1.76 1.75 2.336.002.272-.21.446-.748.446z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgVkRounded);\nexport default __webpack_public_path__ + \"static/media/vk-rounded.850582a3.svg\";\nexport { ForwardRef as ReactComponent };","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport styles from './Navbar.module.css';\nimport {Link, LinkProps, useHistory} from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {getRouteIdByName, getRouteNameById, routes, routesVariants} from '../../utils/routes';\nimport {useSelector} from 'react-redux';\nimport {getNewMessagesCountSelector} from '../../selectors/selectors';\nimport {Counter} from '../Common/Counter/Counter';\n\ninterface MainMenuItemProps {\n    icon: React.ReactElement;\n    primary: string;\n    secondary?: JSX.Element;\n    to: string;\n    selected?: boolean;\n    onClick: () => void;\n}\n\ntype navbarPropsType = {\n    onMenuClick: () => void\n}\n\n/**\n * Returns one item (<li> for <ul>) of app menu.\n * @param {MainMenuItemProps} props\n * @constructor\n */\nconst MenuItem = (props: MainMenuItemProps) => {\n    const {icon, primary, secondary, to, selected, onClick} = props;\n\n    const renderLink = React.useMemo(() =>\n            React.forwardRef<any, Omit<LinkProps, 'to'>>((itemProps, ref) => (\n                <Link to={to} ref={ref} {...itemProps} />\n            )),\n        [to]);\n\n    return (\n        <li>\n            <ListItem button component={renderLink} selected={selected} onClick={onClick}>\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText style={{display: 'flex'}} primary={primary} secondary={secondary}/>\n            </ListItem>\n        </li>\n    );\n}\n\n/**\n * Returns complete app menu list.\n * @constructor\n */\nconst Navbar: React.FC<navbarPropsType> = (props) => {\n    const history = useHistory();\n    const currentRoute = history.location.pathname.substr(1) as routesVariants;\n    const newMessagesCount = useSelector(getNewMessagesCountSelector);\n    const [selectedIndex, setSelectedIndex] = useState(getRouteIdByName(currentRoute));\n\n    const setActive = (index: number) => {\n        props.onMenuClick();\n        setSelectedIndex(index);\n    };\n\n    const MenuList = Object.keys(routes).map(route => {\n        let currentRoute = route as routesVariants;\n        let currentRouteId = routes[currentRoute].id;\n        let title = routes[currentRoute].title;\n        let icon = React.createElement(routes[currentRoute].icon);\n        let routeName = getRouteNameById(currentRouteId);\n        let secondary = (routeName === 'dialogs' && newMessagesCount > 0) ? <Counter count={newMessagesCount}/> : undefined;\n\n        return <MenuItem to={\"/\" + routeName}\n                         primary={title}\n                         secondary={secondary}\n                         icon={icon}\n                         selected={selectedIndex === currentRouteId}\n                         onClick={() => {setActive(currentRouteId)}}\n                         key={routeName}\n        />\n    });\n\n    return(\n        <div className={styles.drawerContainer}>\n            <List>\n                {MenuList}\n            </List>\n        </div>\n    );\n};\n\nexport default Navbar;","import {Api} from '../API/api';\nimport {baseThunkType, captchaResultCodeType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {emptyStatusCallback, setStatusType} from '../utils/formikSetters';\nimport {profileActions, actionsType as profileActionsType} from './profileReducer';\nimport {makeInit} from './appReducer';\n\nexport type initialStateType = {\n    id: number | null,\n    email: stringOrNull,\n    login: stringOrNull,\n    isAuth: boolean,\n    isFetching: boolean,\n    captchaUrl: stringOrNull\n}\n\ntype actionsType = inferActionsType<typeof authActions>;\ntype thunkType = baseThunkType<actionsType | profileActionsType, void>;\n\nconst initialState: initialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false,\n    captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/AUTH/SET_AUTH':\n            return {\n                ...state,\n                ...action.data\n            }\n        case 'SN/AUTH/GET_CAPTCHA_SUCCESS':\n            return {\n                ...state,\n                captchaUrl: action.url\n            }\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    setAuth: (id: number | null, email: stringOrNull, login: stringOrNull, isAuth:boolean) => ({\n        type: 'SN/AUTH/SET_AUTH',\n        data: {id, email, login, isAuth}} as const),\n    getCaptchaSuccess: (url: stringOrNull) => ({type: 'SN/AUTH/GET_CAPTCHA_SUCCESS', url} as const)\n}\n\n/**\n * Gets auth data from backend and set it to state if successful.\n */\nexport const getAuth = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Me();\n\n    if (data === null) {\n        return;\n    }\n\n    let {id, email, login} = data;\n    dispatch(authActions.setAuth(id, email, login, true));\n}\n\n/**\n * Sets user logged-in on backend, if needed captcha then requests it.\n * If successful sets auth data to state.\n * @param {string} email - user email\n * @param {string} password - user password\n * @param {boolean} rememberMe - is need long session\n * @param {string} captcha - captcha text from user\n * @param {(string):void=} errorCallback - callback calls on error from backend (optional)\n */\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string, errorCallback: setStatusType = emptyStatusCallback): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Login(email, password, rememberMe, captcha);\n\n    if (data.error) {\n        if (data.resultCode === captchaResultCodeType.captchaRequired) {\n            await dispatch(getCaptcha());\n        }\n\n        return errorCallback(data.error);\n    }\n\n    dispatch(makeInit());\n    dispatch(authActions.getCaptchaSuccess(null));\n}\n\n/**\n * Sets user as logged-out on backend, if successful clears auth data in state.\n */\nexport const logout = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Logout();\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(authActions.setAuth(null, null, null, false));\n    dispatch(profileActions.loggedOut());\n}\n\n/**\n * Gets url with captcha image from backend and sets it to state if successful.\n */\nexport const getCaptcha = (): thunkType => async (dispatch) => {\n    let url = await Api.Security.getCaptcha();\n\n    if (!url) {\n        return;\n    }\n\n    dispatch(authActions.getCaptchaSuccess(url));\n}\n\nexport default authReducer;","import {getAuth} from './authReducer';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {getNewMessagesCount} from './dialogsReducer';\nimport {getOwnerProfile} from './profileReducer';\n\nexport type initialStateType = {\n    initDone: boolean\n}\n\ntype actionsType = inferActionsType<typeof appActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    initDone: false\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/APP/SET_INIT_DONE':\n            return {\n                ...state,\n                initDone: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const appActions = {\n    setInitDone: () => ({type: 'SN/APP/SET_INIT_DONE'} as const)\n}\n\n/**\n * Gets data, needed for app start.\n */\nexport const makeInit = (): thunkType => async (dispatch) => {\n    try {\n        await dispatch(getAuth());\n        await dispatch(getNewMessagesCount());\n        await dispatch(getOwnerProfile());\n    }\n    finally {\n        dispatch(appActions.setInitDone());\n    }\n}\n\nexport default authReducer;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport styles from './AppHeader.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getIsAuthSelector, getLoginSelector, getOwnerPhotosSelector} from '../../selectors/selectors';\nimport {logout} from '../../reducers/authReducer';\nimport logo from '../../assets/images/logo.svg';\nimport userMale from \"../../assets/images/user-male.png\";\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype appHeaderPropsType = {\n    onMenuClick: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginBlock: {\n            display: 'flex',\n            alignItems: 'center',\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n        },\n        login: {\n            ...theme.typography.subtitle1,\n            padding: theme.spacing(1),\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        headerContentWrapper: {\n            justifyContent: 'space-between'\n        },\n        menuButton: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        leftPart: {\n            display: 'flex'\n        }\n    }),\n);\n\n/**\n * Returns complete header for App with logo, menu-button, logout-button and owner-info.\n * @param {appHeaderPropsType} props - props object\n * @param {function():void} props.onMenuClick - function which will calls on menu-button click\n * @constructor\n */\nexport const AppHeader: React.FC<appHeaderPropsType> = (props) => {\n    const classes = useStyles();\n    const isAuth = useSelector(getIsAuthSelector);\n    const login = useSelector(getLoginSelector);\n    const ownerPhotos = useSelector(getOwnerPhotosSelector);\n\n    const dispatch = useDispatch();\n\n    const logoutCallback = () => {\n        dispatch(logout());\n    }\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.headerContentWrapper}>\n                <div className={classes.leftPart}>\n                    <IconButton color='inherit'\n                                edge='start'\n                                className={classes.menuButton}\n                                onClick={props.onMenuClick}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <img className={styles.headerLogo}\n                         src={logo}\n                         alt=\"logo\"/>\n                </div>\n                <div>\n                    {\n                        isAuth\n                            ? <div className={classes.loginBlock}>\n                                <Avatar alt={'Header Avatar'} src={ownerPhotos?.small || userMale}/>\n                                <Typography className={classes.login}>{login}</Typography>\n                                <IconButton onClick={logoutCallback}>\n                                    <ExitToAppOutlinedIcon/>\n                                </IconButton>\n                            </div>\n                            : <NavLink to='/login' className={styles.loginLink}>Login</NavLink>\n                    }\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};","import React, {Dispatch, SetStateAction} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\n\ntype globalAlertPropsType = {\n    isOpen: boolean,\n    text: string,\n    setNotificationOpen: Dispatch<SetStateAction<boolean>>\n}\n\n/**\n * Component for smooth popup alert.\n * @param {globalAlertPropsType} props\n * @constructor\n */\nexport const GlobalAlert: React.FC<globalAlertPropsType> = (props) => {\n    const handleNotificationClose = (event: React.SyntheticEvent | MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.setNotificationOpen(false);\n    };\n\n    return (\n        <Snackbar anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                  open={props.isOpen}\n                  onClose={handleNotificationClose}\n                  autoHideDuration={6000}\n                  TransitionComponent={Slide}\n                  message={props.text}\n        />\n    );\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getProfileStatusFetchingSelector, getProfileStatusSelector} from '../../../selectors/selectors';\nimport {updateStatus} from '../../../reducers/profileReducer';\n\ntype propsType = {\n    isOwner: boolean,\n    blockWidth?: string,\n};\n\n/**\n * Returns status block or input for editing status.\n * @param {propsType} props - props object\n * @param {boolean} props.isOwner - is user owner of this page\n * @param {string=} props.blockWidth - with of block (optional)\n * @param {function(status: string):void} props.updateStatus - callback for set status\n * @constructor\n */\nconst ProfileStatus: React.FC<propsType> = (props) => {\n    const status = useSelector(getProfileStatusSelector);\n    const statusFetching = useSelector(getProfileStatusFetchingSelector);\n    const dispatch = useDispatch();\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            statusDiv: {\n                display: 'flex',\n                maxWidth: props.blockWidth || 'auto',\n            },\n            statusInput: {\n                maxWidth: props.blockWidth || 'auto',\n                margin: theme.spacing(1),\n            },\n            statusText: {\n                overflowWrap: 'anywhere',\n                flexGrow: 1,\n                whiteSpace: 'pre-line'\n            },\n            divider: {\n                maxWidth: props.blockWidth || 'auto',\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let statusText = status || 'No status';\n\n    let [isStatusEditing, setStatusEditing] = useState(false);\n    let [newStatus, setNewStatus] = useState(status);\n\n    useEffect(() => {\n        setNewStatus(status);\n    }, [status]);\n\n    const toggleEditing = () => {\n        setStatusEditing(!isStatusEditing);\n\n        if (isStatusEditing && newStatus && (statusText !== newStatus)) {\n            dispatch(updateStatus(newStatus));\n        }\n    }\n\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setNewStatus(event.target.value);\n    }\n\n    if (statusFetching) {\n        return <Preloader notCentered={true}/>\n    }\n\n    return isStatusEditing && props.isOwner\n        ? <Tooltip title=\"Click to empty place to save\" aria-label=\"save status\" placement=\"right\">\n            <TextField autoFocus={true}\n                       onBlur={toggleEditing}\n                       onChange={onStatusChange}\n                       className={classes.statusInput}\n                       value={newStatus}\n                       multiline={true}\n            />\n          </Tooltip>\n        : <React.Fragment>\n            <div className={classes.statusDiv} onClick={toggleEditing}>\n                {props.isOwner\n                    ? <Tooltip title=\"Click to edit\" aria-label=\"edit status\" placement=\"right\">\n                        <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                    </Tooltip>\n                    : <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                }\n            </div>\n            <Divider className={classes.divider}/>\n        </React.Fragment>;\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HttpIcon from '@material-ui/icons/Http';\nimport {contactsType} from '../../../../../types';\nimport {ReactComponent as VkRounded} from '../../../../../assets/images/vk-rounded.svg';\n\ntype contactKeysType = keyof contactsType;\n\ntype propsType = {\n    contactTitle: contactKeysType,\n    contactInfo: string\n}\n\n/**\n * Returns one icon-button as anchor with contact.\n * @param {{\n * contactTitle: contactKeysType\n * contactInfo: string\n * }} props - props like contactsType\n * @param {contactKeysType} props.contactTitle - name of contact\n * @param {string} props.contactInfo - contact link\n * @constructor\n */\nexport const ProfileContact: React.FC<propsType> = ({contactTitle, contactInfo}) => {\n    let Icon = <div/>;\n\n    switch (contactTitle) {\n        case 'facebook':\n            Icon = <FacebookIcon/>;\n            break;\n        case 'website':\n            Icon = <LanguageIcon/>;\n            break;\n        case 'vk':\n            Icon = <SvgIcon component={VkRounded}/>;\n            break;\n        case 'twitter':\n            Icon = <TwitterIcon/>;\n            break;\n        case 'instagram':\n            Icon = <InstagramIcon/>;\n            break;\n        case 'youtube':\n            Icon = <YouTubeIcon/>;\n            break;\n        case 'github':\n            Icon = <GitHubIcon/>;\n            break;\n        case 'mainLink':\n            Icon = <HttpIcon/>;\n            break;\n    }\n\n    return (\n        <IconButton color=\"primary\" component='a' rel={'noreferrer'} href={contactInfo} target={'_blank'}>\n            {Icon}\n        </IconButton>\n    );\n}","import React from \"react\";\nimport {contactsType} from '../../../../types';\nimport {ProfileContact} from './ProfileContact/ProfileContact';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    aboutMe: string,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    contacts: contactsType,\n    isOwner: boolean,\n    blockWidth: string,\n    setEditMode: () => void\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfo: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > div': {\n                marginLeft: theme.spacing(2),\n                marginRight: theme.spacing(2),\n            },\n        },\n        additionalInfoItem: {\n            marginTop: theme.spacing(1)\n        },\n        wrapped: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        contacts: {\n            display: 'flex',\n            alignItems: 'center',\n            width: '100%'\n        }\n    }),\n);\n\n/**\n * Returns array of ProfileContacts if contact value is not empty.\n * @param {contactsType} contacts - array of contacts from profile.\n */\nfunction getContactsList (contacts: contactsType) {\n    return Object.keys(contacts).map((key) => {\n        let contactValue = contacts[key as keyof contactsType];\n\n        return contactValue\n            ? <ProfileContact key={key} contactTitle={key as keyof contactsType} contactInfo={contactValue}/>\n            : null;\n    })\n}\n\n/**\n * Returns additional info about user with 3 text blocks and 1 block of contact-links.\n * If user is owner of profile also returns button for edit data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let ContactsList = getContactsList(props.contacts);\n    let isNeedContacts = !ContactsList.every(contact => contact === null);\n\n    return (\n        <div className={classes.additionalInfo} style={{maxWidth: props.blockWidth}}>\n            <div className={classes.additionalInfoItem}>\n                <Typography>About Me: {props.aboutMe || 'Empty'}</Typography>\n                <Typography>Looking for a job: {props.lookingForAJob ? 'Yes' : 'No'}</Typography>\n                {props.lookingForAJob && <Typography className={classes.wrapped}>\n                    Job description: {props.lookingForAJobDescription}\n                </Typography>}\n            </div>\n\n            {isNeedContacts\n                ? <div className={classes.contacts}>\n                    <div>\n                        <Typography>Contacts:</Typography>\n                    </div>\n                    <div  className={classes.wrapped}>\n                        {ContactsList}\n                    </div>\n                </div>\n                : <div className={classes.contacts}>\n                    <Typography>no contacts</Typography>\n                </div>\n            }\n            {props.isOwner && <Button color='primary' variant='contained' onClick={props.setEditMode}>Edit info</Button>}\n        </div>\n    );\n};\n\nexport default AdditionalInfo","import React, {useState} from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport {createField, FormikCheckbox, FormikField} from '../../../../Common/FormComponents/FieldsComponentsFormik';\nimport {required, validatorCreator} from '../../../../../utils/validators';\nimport {ErrorMessage} from 'formik';\nimport {fieldNamesType} from '../AdditionalInfoForm';\nimport {contactsType} from '../../../../../types';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoRow: {\n            display: 'flex',\n            justifyContent: 'start',\n            alignItems: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n            '& > p': {\n                flexBasis: '92px',\n                textAlign: 'end',\n                margin: theme.spacing(1),\n            },\n            '& > div': {\n                flexGrow: 1,\n                display: 'flex'\n            }\n        },\n        stretched: {\n            flexGrow: 1\n        },\n        errorText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n    }),\n);\n\ntype formBasicInfoPropsType = {\n    checked: boolean,\n    triggerCheckbox: () => void\n}\n\n/**\n * Returns fields: fullName, aboutMe, lookingForAJob, lookingForAJobDescription\n * for profile-info form with needed handlers.\n * @param {formBasicInfoPropsType} props\n * @constructor\n */\nexport const FormBasicInfo: React.FC<formBasicInfoPropsType> = (props) => {\n    const classes = useStyles();\n    const [checked, setChecked] = useState(props.checked);\n\n    /**\n     * Checkbox trigger handler. Sets value to Checkbox and to formik differently.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     * @param event\n     */\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.triggerCheckbox();\n        setChecked(event.target.checked);\n    };\n\n    return (\n        <Card variant={'outlined'}>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Full name: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Your name',\n                    'fullName',\n                    FormikField,\n                    validatorCreator([required])\n                )}\n                <ErrorMessage name='fullName'/>\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>About me: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about you',\n                    'aboutMe',\n                    FormikField,\n                    validatorCreator([])\n                )}\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Look for job: </Typography>\n                {createField<fieldNamesType>(\n                    undefined,\n                    undefined,\n                    'lookingForAJob',\n                    FormikCheckbox,\n                    validatorCreator([]),\n                    {checked, color: 'primary', onChange}\n                )}\n            </div>\n            <div className={classes.errorText}><ErrorMessage name={'lookingForAJob'}/></div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Skills: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about job or skills',\n                    'lookingForAJobDescription',\n                    FormikField,\n                    validatorCreator([]),\n                    {multiline: true}\n                )}\n            </div>\n        </Card>\n    );\n}\n\ntype formContactsInfoPropsType = {\n    contacts: contactsType\n}\n\n/**\n * Returns fields with contacts for profile-info form.\n * @param {formContactsInfoPropsType} props\n * @constructor\n */\nexport const FormContactsInfo: React.FC<formContactsInfoPropsType> = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Card variant={'outlined'}>\n            {Object.keys(props.contacts).map(key => {\n                return (\n                    <div key={key} className={classes.additionalInfoRow}><Typography>{key}:</Typography>\n                        {createField(\n                            classes.stretched,\n                            key + ' link with http',\n                            'contacts.' + key,\n                            FormikField,\n                            validatorCreator([])\n                        )}\n                    </div>\n                );\n            })}\n        </Card>\n    );\n}","import React from \"react\";\nimport {contactsType, profileType} from '../../../../types';\nimport Button from '@material-ui/core/Button';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {useDispatch} from 'react-redux';\nimport {saveProfile} from '../../../../reducers/profileReducer';\nimport {FormBasicInfo, FormContactsInfo} from './AdditionalInfoParts/AdditionalInfoParts';\n\ntype propsType = {\n    profile: profileType,\n    onChancel: () => void\n}\n\ntype formDataType = profileType;\nexport type fieldNamesType = keyof formDataType;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoForm: {\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        buttonsWrapper: {\n            display: 'flex',\n            justifyContent: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        infoWrapper: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                flexGrow: 1,\n                flexBasis: '460px',\n            }\n        },\n        statusText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n        errorsWrapper: {\n            display: 'flex',\n            justifyContent: 'center'\n        }\n    }),\n);\n\n/**\n * Sets every contact value to empty string if it's value is null.\n * Because Material-UI not allow null as value to input.\n * @param {contactsType} contacts - object with contacts\n */\nfunction normalizeContacts (contacts: contactsType) {\n    for (let contact in contacts) {\n        if (contacts.hasOwnProperty(contact)) {\n            contacts[contact as keyof contactsType] = contacts[contact as keyof contactsType] || '';\n        }\n\n    }\n\n    return contacts;\n}\n\n/**\n * Returns form with profile-info data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfoForm: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    let initialValues = props.profile;\n    initialValues.contacts = normalizeContacts(initialValues.contacts);\n\n    const formik = useFormik({\n        initialValues: props.profile,\n        enableReinitialize: true,\n        onSubmit: onSubmit,\n    });\n\n    async function onSubmit (formData: profileType, {setSubmitting, setFieldError, setStatus}: FormikHelpers<profileType>) {\n        let hasApiErrors = '';\n\n        try {\n            await dispatch(saveProfile(formData,  setFieldError, setStatus));\n        }\n        catch (error) {\n            hasApiErrors = error;\n        }\n        finally {\n            setSubmitting(false);\n        }\n\n        if (!hasApiErrors && formik.submitCount > 0) {\n            props.onChancel();\n        }\n    }\n\n    /**\n     * Handler for manually trigger lookingForAJob-checkbox in formik.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     */\n    function triggerCheckbox() {\n        formik.setFieldValue(\"lookingForAJob\", !formik.values.lookingForAJob);\n    }\n\n    return (\n        <form className={classes.additionalInfoForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n            <div className={classes.infoWrapper}>\n                <FormBasicInfo checked={props.profile.lookingForAJob} triggerCheckbox={triggerCheckbox}/>\n                <FormContactsInfo contacts={props.profile.contacts}/>\n            </div>\n            <div className={classes.errorsWrapper}>\n                <div className={classes.statusText}>{formik.status}</div>\n            </div>\n            <div className={classes.buttonsWrapper}>\n                <Button color='primary'\n                        variant='contained'\n                        type='submit'\n                        disabled={formik.isSubmitting || !formik.isValid || !formik.dirty}\n                >Save</Button>\n                <Button color='secondary' variant='contained' onClick={props.onChancel}>Cancel</Button>\n            </div>\n            </FormikProvider>\n        </form>\n    );\n}\n\nexport default AdditionalInfoForm;","import React, {ChangeEvent} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {savePhoto} from '../../../../../reducers/profileReducer';\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        input: {\n            display: 'none',\n        },\n        label: {\n            display: 'flex',\n            justifyContent: 'center',\n        }\n    }),\n);\n\n/**\n * Returns styled button for upload user's avatar.\n * @constructor\n */\nexport const AvatarUploadButton: React.FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onFileChange(event: ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n        }\n\n        dispatch(savePhoto(event.target.files[0]));\n    }\n\n    return (\n        <>\n            <input className={classes.input}\n                   accept='image/*'\n                   type='file'\n                   id='icon-button-file'\n                   onChange={onFileChange}\n            />\n            <label htmlFor='icon-button-file' className={classes.label}>\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        startIcon={<PhotoCamera/>}\n                >\n                    Upload\n                </Button>\n            </label>\n        </>\n    );\n}","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {startRefreshDialog} from '../../../../../reducers/dialogsReducer';\nimport {getRouteNameById, routes} from '../../../../../utils/routes';\nimport Button from '@material-ui/core/Button';\n\ntype addDialogButtonPropsType = {\n    userId: number\n}\n\n/**\n * Returns button for start new dialog.\n * @param {addDialogButtonPropsType} props - props object\n * @param {number} props.userId - user's profile ID\n * @constructor\n */\nexport const AddDialogButton: React.FC<addDialogButtonPropsType> = (props) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    /**\n     * Add new dialog or refresh existing.\n     * Redirects to new dialog's route.\n     */\n    const addDialog = () => {\n        dispatch(startRefreshDialog(props.userId));\n        history.push(`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`);\n    }\n\n    return (\n        <Button variant='contained' color='primary' onClick={addDialog}>Start dialog</Button>\n    );\n}","import {stringOrNull} from '../../../../types';\nimport React from 'react';\nimport userMale from '../../../../assets/images/user-male.png';\nimport Avatar from '@material-ui/core/Avatar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AvatarUploadButton} from './AvatarUploadButton/AvatarUploadButton';\nimport {AddDialogButton} from './AddDialogButton/AddDialogButton';\n\ntype profileAvatarPropsType = {\n    largePhoto: stringOrNull,\n    isOwner: boolean,\n    userId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        avatarWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(38),\n            height: theme.spacing(38),\n        }\n    }),\n);\n\n/**\n * Returns avatar-block with avatar-image and button for upload new.\n * If user is not owner of this profile returns avatar without button.\n * @param {profileAvatarPropsType} props - url to image, user ID and isOwner.\n * @constructor\n */\nexport const ProfileAvatar: React.FC<profileAvatarPropsType> = (props) => {\n    const classes = useStyles();\n    const profileAvatarLarge = props.largePhoto || userMale;\n\n    return (\n        <div className={classes.avatarWrapper}>\n            <Avatar className={classes.large} src={profileAvatarLarge}/>\n            {props.isOwner ? <AvatarUploadButton/> : <AddDialogButton userId={props.userId} />}\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/social-network-pattern-background.066f3894.jpg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport AdditionalInfo from \"./AdditionalInfo/AdditionalInfo\";\nimport AdditionalInfoForm from \"./AdditionalInfoForm/AdditionalInfoForm\";\nimport {ProfileAvatar} from './ProfileAvatar/ProfileAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport ProfileBackground from '../../../assets/images/social-network-pattern-background.jpg';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useSelector} from 'react-redux';\nimport {getProfileSelector} from '../../../selectors/selectors';\n\nexport type propsType = {\n    isOwner: boolean,\n    blockWidth: string\n}\n\nconst wallpaperBlend = 'linear-gradient(rgba(255,255,255,.95), rgba(255,255,255,.95))';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        wallpaper: {\n            backgroundImage: `${wallpaperBlend}, url(${ProfileBackground})`,\n            backgroundSize: '40%',\n            margin: theme.spacing(-3)\n        },\n        profileDescriptionWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n            margin: theme.spacing(0, 4),\n        },\n        profileDescription: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: theme.spacing(1)\n        }\n    }),\n);\n\n/**\n * Returns profile-block with avatar, status and profile info.\n * @param {propsType} props - props object\n * @constructor\n */\nconst ProfileInfo: React.FC<propsType> = (props) => {\n    const profile = useSelector(getProfileSelector);\n    const largePhoto = profile ? profile.photos.large : null;\n    const userId = profile ? profile.userId : 0;\n    const classes = useStyles();\n\n    let [isEditMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.wallpaper}>\n            <div className={classes.profileDescription}>\n                <ProfileAvatar largePhoto={largePhoto} isOwner={props.isOwner} userId={userId}/>\n                <div className={classes.profileDescriptionWrapper}>\n                    <Typography variant='h4'>{profile?.fullName}</Typography>\n                    <ProfileStatus isOwner={props.isOwner}\n                                   blockWidth={props.blockWidth}\n                    />\n                    {isEditMode\n                            ? <AdditionalInfoForm onChancel={() => setEditMode(false)}\n                                                  profile={profile}\n                            />\n                            : <AdditionalInfo aboutMe={profile.aboutMe}\n                                              lookingForAJob={profile.lookingForAJob}\n                                              lookingForAJobDescription={profile.lookingForAJobDescription}\n                                              contacts={profile.contacts}\n                                              setEditMode={() => setEditMode(true)}\n                                              isOwner={props.isOwner}\n                                              blockWidth={props.blockWidth}\n                            />\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","import React from 'react';\nimport Post from '../../Common/Post/Post';\nimport List from '@material-ui/core/List';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AddMessageForm} from '../../Common/AddMessageForm/AddMessageForm';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Typography from '@material-ui/core/Typography';\nimport {PostActions} from '../../Common/Post/PostActions/PostActions';\nimport {useSelector} from 'react-redux';\nimport {getLoginSelector, getOwnerPhotosSelector, getPostsSelector} from '../../../selectors/selectors';\n\nexport type myPostsPropsType = {\n    blockWidth: string\n}\n\n/**\n * Component with title, form and list of posts.\n * @param {myPostsPropsType} props - props object\n * @constructor\n */\nconst MyPosts: React.FC<myPostsPropsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            postsList: {\n                width: '100%',\n                maxWidth: props.blockWidth,\n                backgroundColor: theme.palette.background.paper,\n                display: 'flex',\n                flexDirection: 'column-reverse'\n            },\n            postsTitle: {\n                margin: theme.spacing(2, 0)\n            },\n            postBlock: {\n                padding: theme.spacing(1)\n            }\n        })\n    );\n\n    const postsData = useSelector(getPostsSelector);\n    const userName = useSelector(getLoginSelector);\n    const ownerPhotos = useSelector(getOwnerPhotosSelector);\n    const avatar = ownerPhotos ? ownerPhotos.small : null;\n    const classes = useStyles();\n\n    let posts = postsData.map( (post) =>\n        <Post key={'MyPost' +post.id}\n              postId={post.id}\n              action={PostActions.textWithLikes(post.text, post.id, post.likes)}\n              avatar={avatar}\n              userName={userName}\n              blockWidth={props.blockWidth}\n        />\n    );\n\n    return (\n        <div className={classes.postBlock}>\n            <Typography variant='h5' className={classes.postsTitle}>Posts</Typography>\n            <AddMessageForm blockWidth={props.blockWidth}\n                            sendMessage={profileActions.sendPost}\n                            buttonText='Add Post'\n                            minTextLength={2}\n                            maxTextLength={100}\n            />\n            <List className={classes.postsList}>\n                {posts}\n            </List>\n        </div>\n    );\n};\n\nexport default MyPosts;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPosts from './MyPosts/MyPosts';\n\ntype profilePropsType = {\n    isOwner: boolean,\n}\n\n/**\n * @const\n * @type string\n * @description block width (CSS value, i.e. \"10px\").\n */\nconst BLOCK_WIDTH = '52.5ch';\n\n/**\n * Whole profile-page with info about user and posts-block.\n * @param {profilePropsType} props\n * @constructor\n */\nconst Profile: React.FC<profilePropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner}\n                         blockWidth={BLOCK_WIDTH}\n            />\n            <MyPosts blockWidth={BLOCK_WIDTH}/>\n        </div>);\n};\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus} from \"../../reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport withAuthRedirect from \"../../Hocs/withAuthRedirect\";\nimport {MatchParams} from \"../../types\";\nimport {appStateType} from \"../../redux/reduxStore\";\n\ntype matchType = RouteComponentProps<MatchParams>;\n\ntype mapStatePropsType = {\n    ownerId: string | undefined\n};\n\ntype mapDispatchPropsType = {\n    getProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n};\n\ntype ownPropsType = {\n};\n\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType;\n\n/**\n * Class component which returns profile-page.\n * If not logged-in will redirect to login.\n */\nclass ProfileContainer extends React.Component<propsType & matchType> {\n    getProfileData() {\n        this.props.getProfile(parseInt(this.props.match.params.userId));\n        this.props.getStatus(parseInt(this.props.match.params.userId));\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    componentDidUpdate(prevProps: mapStatePropsType  & matchType, prevState: appStateType, snapshot: any) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.getProfileData();\n        }\n    }\n    render() {\n        let isUserIdExist = !!this.props.match.params.userId;\n        let isOwner = isUserIdExist ? this.props.match.params.userId === this.props.ownerId : true;\n\n        return <Profile {...this.props} isOwner={isOwner}/>\n    }\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        ownerId: state.profilePage.ownerProfile?.userId.toString()\n    }\n}\n\nconst mapDispatchToProps: mapDispatchPropsType = {\n    getProfile,\n    getStatus,\n}\n\nexport default connect<\n    mapStatePropsType,\n    mapDispatchPropsType,\n    ownPropsType,\n    appStateType\n    >(mapStateToProps, mapDispatchToProps) (withRouter(withAuthRedirect(ProfileContainer)));","import {stringOrNull} from '../../../types';\nimport {maxLengthCreator, required, validatorCreator} from '../../../utils/validators';\nimport React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport Button from '@material-ui/core/Button';\nimport {useDispatch} from 'react-redux';\nimport {login} from '../../../reducers/authReducer';\nimport {createField, FormikCheckbox, FormikField} from '../../Common/FormComponents/FieldsComponentsFormik';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nlet maxLength30 = maxLengthCreator(30);\n\nexport type loginFormDataType = {\n    login: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\ntype fieldNamesType = keyof loginFormDataType\ntype loginFormPropsType = {\n    captchaUrl: stringOrNull\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginForm: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '40ch',\n            margin: theme.spacing(1),\n            '& > *': {\n                display: 'flex',\n            },\n        },\n        checkboxWrapper: {\n            alignItems: 'center'\n        },\n        loginInput: {\n            flexGrow: 1,\n            margin: theme.spacing(1),\n        },\n        errorText: {\n            color: 'red',\n            alignSelf: 'center',\n            marginBottom: theme.spacing(1),\n        }\n    }),\n);\n\n/**\n * Form for login process with two static inputs, one optional input with image for captcha, checkbox and button.\n * @param {loginFormPropsType} props - url to captcha img\n * @constructor\n */\nconst LoginForm: React.FC<loginFormPropsType> = (props) => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const initialValues = {\n        login: '',\n        password: '',\n        rememberMe: false,\n        captcha: ''\n    }\n\n    const onSubmit = (formData: loginFormDataType, {setSubmitting}: FormikHelpers<loginFormDataType>) => {\n        dispatch(login(formData.login, formData.password, formData.rememberMe, formData.captcha, formik.setStatus));\n        setSubmitting(false);\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n    });\n\n    return (\n        <form className={classes.loginForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter login',\n                    'login',\n                    FormikField,\n                    validatorCreator([required, maxLength30])\n                )}\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter password',\n                    'password',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {type: 'password'}\n                )}\n                <div className={classes.checkboxWrapper}>\n                    {createField<fieldNamesType>(\n                        undefined,\n                        undefined,\n                        'rememberMe',\n                        FormikCheckbox,\n                        validatorCreator([]),\n                        {color: 'primary'}\n                    )}\n                    <span>remember me</span>\n                </div>\n                {props.captchaUrl && <img alt={'captcha'} src={props.captchaUrl}/>}\n                {props.captchaUrl && createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter symbols from image',\n                    'captcha',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {autoComplete: 'off'}\n                )}\n            </FormikProvider>\n            {formik.status && <div className={classes.errorText}>{formik.status}</div>}\n            <Button variant='contained'\n                    color='primary'\n                    type='submit'\n                    disabled={formik.isSubmitting || !formik.isValid}\n            >\n                Login\n            </Button>\n        </form>\n    );\n}\n\nexport default LoginForm;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {getCaptchaUrlSelector, getIsAuthSelector} from '../../selectors/selectors';\nimport LoginForm from './LoginForm/LoginForm';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        loginPage: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '80vh'\n        }\n    }),\n);\n\n/**\n * Login-page with header and form.\n * @constructor\n */\nexport const Login: React.FC = () => {\n    const classes = useStyles();\n    const auth = useSelector(getIsAuthSelector);\n    const captchaUrl = useSelector(getCaptchaUrlSelector);\n\n    if (auth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={classes.loginPage}>\n            <Typography variant='h4'>Login</Typography>\n            <LoginForm captchaUrl={captchaUrl}/>\n        </div>\n    );\n}","import React from 'react';\nimport {FullPageBlock} from '../Common/FullPageBlock/FullPageBlock';\nimport Typography from '@material-ui/core/Typography';\n\nexport const NotFound: React.FC = () => {\n    return(\n        <FullPageBlock>\n            <h1>404 Not Found</h1>\n            <Typography variant='h4' color='textSecondary'>We are sorry but this page is not exist.</Typography>\n            <Typography variant='h4' color='textSecondary'>Try to go back.</Typography>\n        </FullPageBlock>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {FullPageBlock} from '../FullPageBlock/FullPageBlock';\n\nexport const SuspenseFallback: React.FC = () => {\n    return (\n        <FullPageBlock>\n            <Typography color='textSecondary' variant='h3'>Loading...</Typography>\n        </FullPageBlock>\n    );\n}","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\n\n/**\n * Page which will show to user after app-initialization end.\n * @constructor\n */\nexport const Start = () => {\n    return <Redirect to={'/profile'}/>;\n}","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {Route, Switch} from 'react-router-dom';\nimport {getRouteNameById, routes} from './utils/routes';\nimport {Login} from './components/Login/Login';\nimport {NotFound} from './components/NotFound/NotFound';\nimport {SuspenseFallback} from './components/Common/SuspenseFallback/SuspenseFallback';\nimport {Start} from './components/Start/Start';\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/Dialogs'));\nconst Chat = React.lazy(() => import('./components/Chat/Chat'));\n\n/**\n * Returns correct page depends on route, uses suspend for lazy-load.\n * @constructor\n */\nexport const Content: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            content: {\n                flexGrow: 1,\n                width: 330,\n                padding: theme.spacing(3),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    let DialogsComponent = () => <DialogsContainer/>;\n    let ProfileComponent = () => <ProfileContainer/>;\n\n    return (\n        <main className={classes.content}>\n            <Toolbar/>\n            <React.Suspense fallback={<SuspenseFallback/>}>\n                <Switch>\n                    <Route exact path=\"/\" component={Start}/>\n                    <Route path={'/' + getRouteNameById(routes.profile.id) + '/:userId?'} component={ProfileComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.dialogs.id) + '/:userId?'} component={DialogsComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.news.id)} component={News}/>\n                    <Route path={'/' + getRouteNameById(routes.music.id)} component={Music}/>\n                    <Route path={'/' + getRouteNameById(routes.users.id)} component={UsersContainer}/>\n                    <Route path={'/' + getRouteNameById(routes.settings.id)} component={Settings}/>\n                    <Route path={'/' + getRouteNameById(routes.chat.id)} component={Chat}/>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"*\" component={NotFound}/>\n                </Switch>\n            </React.Suspense>\n        </main>\n    );\n}","import React from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {makeInit} from \"./reducers/appReducer\";\nimport Preloader from \"./components/Common/Preloader/Preloader\";\nimport {AppHeader} from './components/Header/AppHeader';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {GlobalAlert} from './components/Common/GlobalAlert/GlobalAlert';\nimport {Content} from './Content';\nimport {getAppInitDoneSelector} from './selectors/selectors';\n\nconst DRAWER_WIDTH = 240;\n\n/**\n * Returns whole app (header, menu and needed page).\n * @constructor\n */\nconst App: React.FC = () => {\n    const dispatch = useDispatch();\n    const isInitDone = useSelector(getAppInitDoneSelector);\n    const [isNotificationOpen, setNotificationOpen] = React.useState(false);\n    const [notificationText, setNotificationText] = React.useState('');\n    const [isMenuOpen, setMenuOpen] = React.useState<boolean>(false);\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n            },\n            drawer: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n                [theme.breakpoints.down('xs')]: {\n                    display: isMenuOpen ? '' : 'none',\n                },\n                flexShrink: 0,\n            },\n            drawerPaper: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n            },\n        }),\n    );\n\n    /**\n     * Catch error reason and set alert-data.\n     * @param reason\n     */\n    const catchGenericError = (reason: PromiseRejectionEvent) => {\n        let response = reason.reason.response;\n\n        if (response) {\n            setNotificationText('ERROR: server returned ' + response.status + ' ' + response.statusText);\n        } else {\n            setNotificationText('ERROR: server is not respond!');\n        }\n\n        setNotificationOpen(true);\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('unhandledrejection', catchGenericError);\n        dispatch(makeInit());\n\n        // returned function will be called on component unmount\n        return () => {\n            window.removeEventListener('unhandledrejection', catchGenericError);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const classes = useStyles();\n\n    if (!isInitDone) {\n        return <Preloader/>\n    }\n\n    function onMenuClick() {\n        setMenuOpen(!isMenuOpen);\n    }\n\n    return (\n        <div className={classes.root}>\n            <GlobalAlert isOpen={isNotificationOpen}\n                         text={notificationText}\n                         setNotificationOpen={setNotificationOpen}\n            />\n            <AppHeader onMenuClick={onMenuClick}/>\n            <Drawer className={classes.drawer} variant='permanent' classes={{paper: classes.drawerPaper}}>\n                <Toolbar />\n                <Navbar onMenuClick={onMenuClick}/>\n            </Drawer>\n            <Content/>\n        </div>\n    );\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer from \"../reducers/profileReducer\";\nimport dialogsReducer from \"../reducers/dialogsReducer\";\nimport usersReducer from \"../reducers/usersReducer\";\nimport authReducer from \"../reducers/authReducer\";\nimport appReducer from \"../reducers/appReducer\";\nimport thunk from \"redux-thunk\";\nimport chatReducer from '../reducers/chatReducer';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    chat: chatReducer\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type appStateType = ReturnType<rootReducerType>;\nexport type inferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto'\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\nimport {\n    basicResponseType,\n    captchaResultCodeType, messageListType, Override,\n    photosType,\n    profileType,\n    resultCodesType, stringOrNull, userListType, usersType\n} from \"../types\";\nimport {filterType} from '../reducers/usersReducer';\n\n/**\n * @const\n * @description Axios object with basic settings\n */\nconst DEFAULT_API = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '4b793204-e0f1-45c5-b96a-007d58f175b3'}\n});\n\ntype meResponseType = Override<basicResponseType, {\n    data: {\n        id: number,\n        email: string,\n        login: string\n    }\n}>;\n\ntype loginResponseType = Override<basicResponseType, {\n    data: {\n        id: number\n    },\n    resultCode: resultCodesType | captchaResultCodeType\n}>;\n\ntype updateProfileResponseType = Override<basicResponseType, {\n    fieldsErrors: Array<string>\n}>;\n\ntype savePhotoResponseType = Override<basicResponseType, {\n    data: {\n        photos: photosType,\n    },\n    fieldsErrors: Array<string>\n}>;\n\ntype captchaResponseType = {\n    url: string\n}\n\ntype getUsersResponseType = {\n    items: Array<usersType>,\n    totalCount: number,\n    error: string | null\n}\n\ntype dialogsListResponseType = Array<userListType>\n\ntype dialogsSendMessageResponseType = Override<basicResponseType, {\n    data: {\n        message: messageListType\n    },\n    fieldsErrors: Array<string>\n}>\n\ntype getMessagesListResponseType = {\n    items: Array<messageListType>,\n    totalCount: number,\n    error: stringOrNull\n}\n\n/**\n * @const\n * @description Api-object (documentation see at https://social-network.samuraijs.com/docs)\n */\nexport const Api = {\n    Users: {\n        getUsers: (pageSize = 4, currentPage = 0, filter: filterType) => {\n            return DEFAULT_API.get<getUsersResponseType>('users',\n                {params: {count: pageSize, page: currentPage + 1, term: filter.searchTerm, friend: filter.friend}}\n            ).then(response => {\n                if (response.data.items.length === 0) {\n                    return null;\n                }\n\n                return response.data;\n            });\n        },\n        unfollow: (userId: number) => {\n            return DEFAULT_API.delete<basicResponseType>('follow/' + userId)\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        follow: (userId: number) => {\n            return DEFAULT_API.post<basicResponseType>('follow/' + userId).then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        }\n    },\n    Auth: {\n        Me: () => {\n            return DEFAULT_API.get<meResponseType>('auth/me/').then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return response.data.data;\n                }\n\n                return null;\n            });\n        },\n        Login: (email: string, password: string, rememberMe: boolean, captcha: string) => {\n            return DEFAULT_API.post<loginResponseType>('auth/login/', {email, password, rememberMe, captcha}).then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return {result: response.data.data};\n                }\n\n                let message = response.data.messages.length ? response.data.messages[0] : 'Unknown error';\n                let resultCode = response.data.resultCode || -1;\n\n                return {error: message, resultCode: resultCode};\n            });\n        },\n        Logout: () => {\n            return DEFAULT_API.delete<basicResponseType>('auth/login/').then(response => {\n                return response.data.resultCode === resultCodesType.Success;\n            });\n        }\n    },\n    Profile: {\n        getProfile: (userId: number) => {\n            return DEFAULT_API.get<profileType>('profile/' + userId)\n                .then( response => {\n                    if (!response.data) {\n                        return null;\n                    }\n\n                    return response.data;\n                });\n        },\n        getStatus: (userId: number) => {\n            return DEFAULT_API.get<string>('profile/status/' + userId)\n                .then( response => {\n                    return response.data;\n                });\n        },\n        updateStatus: (status: string) => {\n            return DEFAULT_API.put<basicResponseType>('profile/status', {status})\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        savePhoto: (file: File) => {\n            const formData = new FormData();\n            formData.append('image', file);\n\n            return DEFAULT_API.put<savePhotoResponseType>('profile/photo', formData, {\n                headers: {'Content-Type': 'multipart/form-data'}\n            })\n                .then( response => {\n                    if (response.data.resultCode === 0) {\n                        return response.data.data.photos;\n                    }\n                });\n        },\n        saveProfile: (profile: profileType) => {\n            return DEFAULT_API.put<updateProfileResponseType>('profile', profile)\n                .then(response => {\n                    if (response.data.resultCode === resultCodesType.Success) {\n                        return Promise.resolve();\n                    } else {\n                        let reason = response.data.messages.length ? response.data.messages : ['Unknown error. (unknown)'];\n                        return Promise.reject(reason);\n                    }\n                });\n        }\n    },\n    Security: {\n        getCaptcha: () => {\n            return DEFAULT_API.get<captchaResponseType>('security/get-captcha-url')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data.url;\n                })\n        }\n    },\n    Dialogs: {\n        getDialogsList: () => {\n            return DEFAULT_API.get<dialogsListResponseType>('dialogs')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        startRefreshDialog: (userId: number) => {\n            return DEFAULT_API.put<basicResponseType>('dialogs/' + userId)\n                .then(response => {\n                    return response.data.resultCode === resultCodesType.Success\n                })\n        },\n        getMessagesList: (userId: number, page: number = 1, count: number = 10) => {\n            return DEFAULT_API.get<getMessagesListResponseType>('dialogs/' + userId + '/messages',\n                {params: {count: count, page: page + 1}})\n                .then(response => {\n                    if (response.data.error) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        sendMessage: (userId: number, message: string) => {\n            return DEFAULT_API.post<dialogsSendMessageResponseType>('dialogs/' + userId + '/messages', {body: message})\n                .then(response => {\n                    if (response.data.resultCode !== resultCodesType.Success) {\n                        return;\n                    }\n\n                    return response.data.data.message;\n                })\n        },\n        getNewMessagesCount: () => {\n            return DEFAULT_API.get<number>('dialogs/messages/new/count')\n                .then(response => {\n                    return response.data;\n                })\n        }\n    }\n}","export type validatorType = (value: string) => string | undefined;\n\n/**\n * Creates one validator from array of validators.\n * Returns error text or empty text as string.\n * Need for formik field-level validation.\n * @param {Array<validatorType>} validators - array of validators.\n */\nexport const validatorCreator = (validators: Array<validatorType>) => (value: string) => {\n    let error = '';\n\n    validators.forEach(validator => {\n        let result = validator(value);\n        if (result !== undefined) error = result;\n    })\n    return error;\n}\n\n/**\n * Validator for required string.\n * Returns undefined or error text as string.\n * @param {string} value - string from form for validation.\n */\nexport const required: validatorType = (value) => {\n    if (value) return undefined;\n    return 'Required field'\n}\n\n/**\n * Function which creates \"max length validator\".\n * @param {number} maxLength - max string length for validator.\n */\nexport const maxLengthCreator = (maxLength: number): validatorType => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength}`;\n    return undefined;\n}\n\n/**\n * Function which creates \"min length validator\".\n * @param {number} minLength - min string length for validator.\n */\nexport const minLengthCreator = (minLength: number): validatorType => (value) => {\n    if (value && value.length < minLength) return `Min length is ${minLength}`;\n    return undefined;\n}","import {appStateType} from '../redux/reduxStore';\n\nexport function getUsersSelector (state: appStateType) {\n    return state.usersPage.users;\n}\n\nexport function getIsUsersFetchingSelector (state: appStateType) {\n    return state.usersPage.isUsersFetching;\n}\n\nexport function getFollowingInProgressSelector (state: appStateType) {\n    return state.usersPage.followingInProgress;\n}\n\nexport function getUsersFilterSelector (state: appStateType) {\n    return state.usersPage.filter;\n}\n\nexport function getUsersHasMoreSelector (state: appStateType) {\n    return state.usersPage.isHasMore;\n}\n\nexport function getIsAuthSelector (state: appStateType) {\n    return state.auth.isAuth;\n}\n\nexport function getCaptchaUrlSelector (state: appStateType) {\n    return state.auth.captchaUrl;\n}\n\nexport function getLoginSelector (state: appStateType) {\n    return state.auth.login;\n}\n\nexport function getOwnerIdSelector (state: appStateType) {\n    return state.auth.id;\n}\n\nexport function getChatMessages (state: appStateType) {\n    return state.chat.messages;\n}\n\nexport function getIsChatConnectedSelector (state: appStateType) {\n    return state.chat.isConnected;\n}\n\nexport function getDialogsMessagesSelector (state: appStateType) {\n    return state.dialogsPage.messageList;\n}\n\nexport function getDialogsUserListSelector (state: appStateType) {\n    return state.dialogsPage.userList;\n}\n\nexport function getNewMessagesCountSelector (state: appStateType) {\n    return state.dialogsPage.newMessagesCount;\n}\n\nexport function getDialogHasMoreSelector (state: appStateType) {\n    return state.dialogsPage.currentDialogHasMore;\n}\n\nexport function getIsDialogsFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isDialogsFetching;\n}\n\nexport function getIsMessageSentFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isMessageSentFetching;\n}\n\nexport function getIsMessagesFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isMessagesFetching;\n}\n\nexport function getAppInitDoneSelector (state: appStateType) {\n    return state.app.initDone;\n}\n\nexport function getOwnerPhotosSelector (state: appStateType) {\n    return state.profilePage.ownerProfile?.photos;\n}\n\nexport function getPostsSelector (state: appStateType) {\n    return state.profilePage.postsData;\n}\n\nexport function getProfileSelector (state: appStateType) {\n    return state.profilePage.profile;\n}\n\nexport function getProfileStatusSelector (state: appStateType) {\n    return state.profilePage.status;\n}\n\nexport function getProfileStatusFetchingSelector (state: appStateType) {\n    return state.profilePage.statusFetching;\n}","import {Api} from '../API/api';\nimport {baseThunkType, contactsType, photosType, postsDataType, profileType} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {nanoid} from 'nanoid';\nimport {emptyErrorCallback, emptyStatusCallback, setErrors, setErrorsType, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    postsData: Array<postsDataType>,\n    profile: profileType | null,\n    ownerProfile: profileType | null,\n    statusFetching: boolean,\n    status: string\n}\n\nexport type actionsType = inferActionsType<typeof profileActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    postsData: [\n        {id: nanoid(), text: 'First post!', likes: 15},\n        {id: nanoid(), text: 'Second post!', likes: 20},\n    ],\n    profile: null,\n    ownerProfile: null,\n    statusFetching: false,\n    status: ''\n};\n\nconst profileReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD_POST':\n            if (action.newPost === undefined || action.newPost.replace(/\\s+/g, '') === '') {\n                return state;\n            }\n\n            return {\n                ...state,\n                postsData: [...state.postsData, {id: nanoid(), text: action.newPost, likes: 0}]\n            };\n        case 'SN/PROFILE/DELETE_POST':\n            return {\n                ...state, postsData: state.postsData.filter(post => {\n                    return post.id !== action.postId;\n                })\n            };\n        case 'SN/PROFILE/SET_PROFILE':\n            return {...state, profile: action.profile};\n        case 'SN/PROFILE/SET_OWNER_PROFILE':\n            return {...state, ownerProfile: action.profile};\n        case 'SN/PROFILE/UPDATE_PROFILE':\n            let newProfile = {\n                ...(state.profile! as profileType),\n                ...action.profile,\n                contacts: {...(state.profile![\"contacts\"] as contactsType), ...action.profile.contacts}\n            };\n\n            return {\n                ...state,\n                profile: newProfile,\n                ownerProfile: newProfile\n            };\n        case 'SN/PROFILE/SET_STATUS':\n            return {...state, status: action.status};\n        case 'SN/PROFILE/TOGGLE_STATUS_FETCHING':\n            return {...state, statusFetching: !state.statusFetching};\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...(state.profile! as profileType), photos: action.photos},\n                ownerProfile: {...(state.ownerProfile! as profileType), photos: action.photos}\n            };\n        case 'SN/PROFILE/ADD_LIKE':\n            return {...state, postsData: state.postsData.map((post) => {\n                return post.id === action.postId ? {...post, likes: post.likes+1} : post;\n                })}\n        case 'SN/PROFILE/LOGGED_OUT':\n            return {\n                ...state,\n                profile: null,\n                ownerProfile: null\n            }\n        default:\n            return state;\n    }\n}\n\nexport const profileActions = {\n    sendPost: (newPost: string) => ({type: 'SN/PROFILE/ADD_POST', newPost} as const),\n    deletePost: (postId: string) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    setProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_PROFILE', profile} as const),\n    setOwnersProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_OWNER_PROFILE', profile} as const),\n    updateProfile: (profile: profileType) => ({type: 'SN/PROFILE/UPDATE_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    toggleStatusFetching: () => ({type: 'SN/PROFILE/TOGGLE_STATUS_FETCHING'} as const),\n    savePhotoSuccess: (photos: photosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n    addLike: (postId: string) => ({type: 'SN/PROFILE/ADD_LIKE', postId} as const),\n    loggedOut: () => ({type: 'SN/PROFILE/LOGGED_OUT'} as const),\n}\n\n/**\n * Requests status from api and set it to state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getStatus = (userId: number): thunkType => async (dispatch, getState) => {\n    let id = userId || getState().auth.id;\n\n    if (!id) {\n        return;\n    }\n\n    let data = await Api.Profile.getStatus(id);\n\n    if (data === null) {\n        dispatch(profileActions.setStatus(''));\n        return;\n    }\n\n    dispatch(profileActions.setStatus(data));\n}\n\n/**\n * Saves new status via API  and update it's in state.\n * @param {string} status - text of status\n */\nexport const updateStatus = (status: string): thunkType => async (dispatch) => {\n    dispatch(profileActions.toggleStatusFetching());\n\n    try {\n        let data = await Api.Profile.updateStatus(status);\n\n        if (!data) {\n            return;\n        }\n\n        dispatch(profileActions.setStatus(status));\n    } catch (reason) {\n        //TODO: переписать на нормальный вывод ошибки\n        alert('Не удалось сохранить статус, попробуйте позже!');\n    }\n\n    dispatch(profileActions.toggleStatusFetching());\n}\n\n/**\n * Requests user profile from api and set it to state.\n * If requested owners profile, it will returned from state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getProfile = (userId: number): thunkType => async (dispatch, getState) => {\n    const ownerId = getState().auth.id;\n    const id = userId || ownerId;\n\n    if (!id) {\n        return;\n    }\n\n    const ownerProfile = getState().profilePage.ownerProfile;\n\n    if (id === ownerId && ownerProfile !== null) {\n        dispatch(profileActions.setProfile({...ownerProfile}));\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(id);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setProfile(data));\n}\n\n/**\n * Requests owner profile from api and set it to state.\n */\nexport const getOwnerProfile = (): thunkType => async (dispatch, getState) => {\n    const userId = getState().auth.id;\n\n    if (!userId) {\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(userId);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setOwnersProfile(data));\n}\n\n/**\n * Saves new photo via API  and update it's in state.\n * @param {File} file - file data\n */\nexport const savePhoto = (file: File): thunkType => async (dispatch) => {\n    let data = await Api.Profile.savePhoto(file);\n\n    if (data === undefined) {\n        return;\n    }\n\n    dispatch(profileActions.savePhotoSuccess(data));\n}\n\n/**\n * Saves new profile-data via API  and update it's in state.\n * @param {profileType} profile - whole profile object\n * @param {setErrorsType=} errorCallback - formik setErrors function (optional)\n * @param {setStatusType=} statusCallback - formik setStatus function (optional)\n */\nexport const saveProfile = (\n    profile: profileType,\n    errorCallback: setErrorsType = emptyErrorCallback,\n    statusCallback: setStatusType = emptyStatusCallback\n): thunkType => (dispatch) => {\n    let promise = Api.Profile.saveProfile(profile);\n\n    return promise.then(\n        () => {\n            dispatch(profileActions.updateProfile(profile));\n            return Promise.resolve();\n        },\n        (data) => {\n            setErrors(data, errorCallback, statusCallback)\n            return Promise.reject('formHasErrors');\n    });\n}\n\nexport default profileReducer;","import {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {appStateType} from './redux/reduxStore';\n\nexport type Override<T1, T2> = Omit<T1, keyof T2> & T2;\n\nexport type stringOrNull = string | null;\n\nexport type profileType = {\n    userId: number,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    contacts: contactsType,\n    photos: photosType,\n    aboutMe: string\n}\n\nexport type contactsType = {\n    github: string,\n    vk: string,\n    facebook: string,\n    instagram: string,\n    twitter: string,\n    website: string,\n    youtube: string,\n    mainLink: string\n}\n\nexport type photosType = {\n    small: string | null,\n    large: string | null\n}\n\nexport type usersType = {\n    id: number,\n    name: string,\n    status: stringOrNull,\n    photos: photosType,\n    followed: boolean,\n    uniqueUrlName: stringOrNull\n}\n\nexport interface MatchParams {\n    userId: string;\n}\n\nexport type arrayOfNumbers = Array<number>;\n\nexport enum resultCodesType {\n    Success = 0,\n    Error = 1\n}\n\nexport enum captchaResultCodeType {\n    captchaRequired = 10\n}\n\nexport type basicResponseType = {\n    data: {},\n    resultCode: resultCodesType,\n    messages: Array<string>\n};\n\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, appStateType, unknown, A>;\n\nexport type postsDataType = {\n    id: string,\n    text: string,\n    likes: number\n}\n\nexport type userListType = {\n    id: number,\n    userName: string,\n    hasNewMessages: boolean,\n    newMessagesCount: number,\n    photos: photosType\n}\n\nexport type messageListType = {\n    id: string,\n    body: string,\n    addedAt: string,\n    senderId: number,\n    senderName: string,\n    recipientId: number,\n    viewed: boolean\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWithIconWrapper\":\"PostActions_textWithIconWrapper__aJW-N\",\"secondRow\":\"PostActions_secondRow__ii6aP\",\"icon\":\"PostActions_icon__2Dbiv\"};","export default __webpack_public_path__ + \"static/media/preloader-spinner.635e13f4.svg\";","import React from \"react\";\nimport styles from './Preloader.module.css';\nimport preloader from \"../../../assets/images/preloader-spinner.svg\";\n\ntype preloaderPropsType = {\n    notCentered?: boolean\n}\n\n/**\n * Returns block with preloader spinner.\n * @param {preloaderPropsType} props - props object\n * @param {boolean=} props.notCentered - true - aligned to start, false or not used - aligned to center\n * @constructor\n */\nconst Preloader: React.FC<preloaderPropsType> = (props) => {\n    return (\n        <div className={!props.notCentered ? styles.preloaderWrapper : undefined}>\n            <img alt='preloader' className={styles.preloader} src={preloader}/>\n        </div>\n    );\n}\n\nexport default Preloader;","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType, messageListType, userListType} from '../types';\nimport {Api} from '../API/api';\nimport he from 'he';\n\nexport type initialStateType = {\n    userList: Array<userListType>,\n    messageList: Array<messageListType>,\n    currentDialogId: number,\n    currentDialogPage: number,\n    currentDialogHasMore: boolean,\n    newMessagesCount: number,\n    isDialogsFetching: boolean,\n    isMessagesFetching: boolean,\n    isMessageSentFetching: boolean,\n};\n\ntype actionsType = inferActionsType<typeof dialogsActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    userList: [],\n    messageList: [],\n    currentDialogId: 0,\n    currentDialogPage: 0,\n    currentDialogHasMore: false,\n    newMessagesCount: 0,\n    isDialogsFetching: false,\n    isMessagesFetching: false,\n    isMessageSentFetching: false,\n};\n\n/**\n * Unescape HTML-entities in every message body.\n * Returns new array.\n * @param {Array<messageListType>} messagesList - list of messages from API\n */\nfunction getUnescapedMessages(messagesList: Array<messageListType>): Array<messageListType> {\n    return  messagesList.map(message => {\n        let unescapedMessage = {...message};\n        unescapedMessage.body = he.unescape(message.body);\n        unescapedMessage.body = unescapedMessage.body.replace(/<br \\/>/g, '\\n');\n        return unescapedMessage;\n    })\n}\n\nconst dialogsReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/MESSAGE_SENT':\n            return {\n                ...state,\n                messageList: [...state.messageList, ...getUnescapedMessages([action.newMessage])]\n            };\n        case 'SN/DIALOGS/DIALOGS_LIST_RECEIVED':\n            return {\n                ...state,\n                userList: [...action.payload]\n            }\n        case 'SN/DIALOGS/MESSAGES_LIST_RECEIVED':\n            return {\n                ...state,\n                messageList: [...getUnescapedMessages(action.payload), ...state.messageList],\n                currentDialogPage: state.currentDialogPage + 1\n            }\n        case 'SN/DIALOGS/CHAT_CHANGED':\n            return {\n                ...state,\n                currentDialogId: action.payload,\n                messageList: [],\n                currentDialogPage: 0,\n                currentDialogHasMore: false\n            }\n        case 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED':\n            return {\n                ...state,\n                newMessagesCount: action.payload\n            }\n        case 'SN/DIALOGS/CHAT_MESSAGES_READ': {\n            let messagesWasRead = 0;\n            return {\n                ...state,\n                userList: state.userList.map(userItem => {\n                    if (action.payload === userItem.id) {\n                        messagesWasRead = userItem.newMessagesCount;\n                        userItem.newMessagesCount = 0;\n                        userItem.hasNewMessages = false;\n                    }\n\n                    return userItem;\n                }),\n                newMessagesCount: state.newMessagesCount >= messagesWasRead ? state.newMessagesCount - messagesWasRead : 0\n            }\n        }\n        case 'SN/DIALOGS/COUNT_MESSAGES_CHANGED':\n            return {\n                ...state,\n                currentDialogHasMore: action.payload > state.messageList.length\n            }\n        case 'SN/DIALOGS/UPDATE_IS_DIALOGS_FETCHING':\n            return {\n                ...state,\n                isDialogsFetching: action.payload\n            }\n        case 'SN/DIALOGS/UPDATE_IS_MESSAGES_FETCHING':\n            return {\n                ...state,\n                isMessagesFetching: action.payload\n            }\n        case 'SN/DIALOGS/UPDATE_IS_MESSAGE_SENT_FETCHING':\n            return {\n                ...state,\n                isMessageSentFetching: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const dialogsActions = {\n    /** Action after message sending */\n    messageSent: (newMessage: messageListType) => ({type: 'SN/DIALOGS/MESSAGE_SENT', newMessage} as const),\n    /** Action after list of dialogs was received from API */\n    dialogsListReceived: (list: Array<userListType>) => ({type: 'SN/DIALOGS/DIALOGS_LIST_RECEIVED', payload: list} as const),\n    /** Action after list messages was received from API */\n    messagesListReceived: (list: Array<messageListType>) => ({type: 'SN/DIALOGS/MESSAGES_LIST_RECEIVED', payload: list} as const),\n    /** Action after change of dialog opponent */\n    chatChanged: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_CHANGED', payload: chatId} as const),\n    /** Action after read messages in current dialog */\n    chatMessagesRead: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_MESSAGES_READ', payload: chatId} as const),\n    /** Action after counter of unread messages was received from API */\n    newMessagesCountReceived: (count: number) => ({type: 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED', payload: count} as const),\n    /** Action after change count of messages in messages list */\n    countMessagesChanged: (count: number) => ({type: 'SN/DIALOGS/COUNT_MESSAGES_CHANGED', payload: count} as const),\n    /** Action which sets status of dialogs list receiving. true - in progress, false - is done */\n    updateDialogsFetching: (isDialogsFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_DIALOGS_FETCHING',\n        payload: isDialogsFetching\n    } as const),\n    /** Action which sets status of messages list receiving. true - in progress, false - is done */\n    updateMessagesFetching: (isMessagesFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_MESSAGES_FETCHING',\n        payload: isMessagesFetching\n    } as const),\n    /** Action which sets status of message sent process. true - in progress, false - is done */\n    updateMessageSentFetching: (isMessageSentFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_MESSAGE_SENT_FETCHING',\n        payload: isMessageSentFetching\n    } as const),\n}\n\n/**\n * Requests list of dialogs from api and set it to state.\n */\nexport const getDialogsList = (): thunkType => async (dispatch) => {\n    dispatch(dialogsActions.updateDialogsFetching(true));\n    let data = await Api.Dialogs.getDialogsList();\n\n    if (!data || !data.length) {\n        dispatch(dialogsActions.dialogsListReceived([]));\n        return;\n    }\n\n    dispatch(dialogsActions.dialogsListReceived(data));\n    dispatch(dialogsActions.updateDialogsFetching(false));\n}\n\n/**\n * Add new user in dialogs list or set it first if existing.\n * Reload dialogs list from API.\n * @param {number} userId - opponent ID\n */\nexport const startRefreshDialog = (userId: number): thunkType => async (dispatch) => {\n    let isSuccessful = await Api.Dialogs.startRefreshDialog(userId);\n\n    if (isSuccessful) {\n        await dispatch(getDialogsList());\n    }\n}\n\n/**\n * Requests list of messages from api and set it to state.\n * @param {number} userId - opponent ID\n */\nexport const getMessagesList = (userId: number): thunkType => async (dispatch, getState) => {\n    const dialogsPage = getState().dialogsPage;\n\n    dispatch(dialogsActions.updateMessagesFetching(true));\n\n    let data = await Api.Dialogs.getMessagesList(userId, dialogsPage.currentDialogPage);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messagesListReceived(data.items));\n    dispatch(dialogsActions.countMessagesChanged(data.totalCount));\n    dispatch(dialogsActions.updateMessagesFetching(false));\n}\n\n/**\n * Send new message to current dialog.\n * @param {string} text - text of message\n */\nexport const sendMessage = (text: string): thunkType => async (dispatch, getState) => {\n    let userId = getState().dialogsPage.currentDialogId;\n\n    dispatch(dialogsActions.updateMessageSentFetching(true));\n\n    let data = await Api.Dialogs.sendMessage(userId, text);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messageSent(data));\n    dispatch(dialogsActions.updateMessageSentFetching(false));\n}\n\n/**\n * Requests counter of new messages from api and set it to state.\n */\nexport const getNewMessagesCount = (): thunkType => async (dispatch, getState) => {\n    const isAuthorized = getState().auth.isAuth;\n\n    if (!isAuthorized) {\n        return;\n    }\n\n    let data = await Api.Dialogs.getNewMessagesCount();\n\n    dispatch(dialogsActions.newMessagesCountReceived(data));\n}\n\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user-male.ba3e9327.png\";","export type setErrorsType = (field: string, value: string | undefined) => void;\nexport type setStatusType = (field: string) => void;\n\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} field - not need to put param\n * @param {string|undefined} value - not need to put param\n */\nexport function emptyErrorCallback(field: string, value: string | undefined) {}\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} data - not need to put param\n */\nexport function emptyStatusCallback(data: string) {}\n\n/**\n * Call callback for every item in data. Parse every item to field name and error text.\n * @param {Array<string>} data - array with errors.\n * @param {setErrorsType} formikSetErrors - setErrors function from formik.\n * @param {setStatusType} formikSetStatus - setStatus function from formik.\n */\nexport function setErrors (data: Array<string>, formikSetErrors: setErrorsType, formikSetStatus: setStatusType) {\n    data.forEach(error => {\n        let rawError = error.split('(')[1],\n            hasSubkey = rawError.indexOf('->') !== -1,\n            key, subkey, errorTextRaw, errorText;\n\n        if (hasSubkey) {\n            key = rawError.split('->')[0].toLowerCase();\n            subkey = rawError.substring(0, rawError.length - 1).split('->')[1].toLowerCase();\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length - 1);\n\n            formikSetErrors(`${key}.${subkey}`, errorText);\n        } else {\n            key = rawError.substring(0, rawError.length - 1);\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length -1);\n\n            if (key === 'contacts') {\n                formikSetStatus(errorText);\n            }\n\n            formikSetErrors(key, errorText);\n        }\n    });\n}","import {createStyles, makeStyles} from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        fullPageBlock: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            textAlign: 'center',\n            height: '70vh'\n        }\n    })\n);\n\n/**\n * Returns full page block where children elements aligned to center.\n * @returns {JSX.Element}\n * @constructor\n */\nexport const FullPageBlock: React.FC = (props) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.fullPageBlock}>\n            {props.children}\n        </div>\n    );\n}"],"sourceRoot":""}