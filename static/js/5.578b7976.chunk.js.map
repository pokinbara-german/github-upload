{"version":3,"sources":["Common/MessagesList/MessagesList.tsx","components/Chat/Messages.tsx","Pages/ChatPage.tsx"],"names":["MessagesList","props","messagesRef","useRef","useState","isAutoscroll","setIsAutoscroll","useEffect","setTimeout","current","scrollIntoView","behavior","block","messages","style","height","overflowY","width","onScroll","event","element","currentTarget","scrollHeight","scrollTop","clientHeight","ref","Messages","useSelector","getChatMessages","ownerId","getOwnerIdSelector","messagesComponentsList","map","messageItem","Post","postId","id","action","PostActions","onlyText","message","avatar","photo","userName","userId","rightSided","ChatPage","dispatch","useDispatch","isConnected","getIsChatConnectedSelector","startMessagesListening","stopMessagesListening","Divider","AddMessageForm","blockWidth","sendMessage","buttonText","minTextLength","maxTextLength","isBlocked"],"mappings":"6KAgBaA,EAAgD,SAACC,GAC1D,IAAMC,EAAcC,iBAAsB,MAC1C,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAwBA,OARAC,qBAAU,WACFF,GACAG,YAAW,WAAO,IAAD,EACb,UAAAN,EAAYO,eAAZ,SAAqBC,eAAe,CAACC,SAAU,SAAUC,MAAO,UACjE,OAER,CAACX,EAAMY,SAAUR,IAGhB,eAAC,IAAD,CAAMS,MAAO,CAACC,OAAQd,EAAMc,OAAQC,UAAW,OAAQC,MAAO,QAASC,SAnB3E,SAAuBC,GACnB,IAAMC,EAAUD,EAAME,cAEjBD,EAAQE,aAAeF,EAAQG,YAAeH,EAAQI,cACtDnB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAapC,UACKL,EAAMY,SACP,oBAAIY,IAAKvB,S,8GCtCRwB,EAAqB,WAC9B,IAAMb,EAAWc,YAAYC,KACvBC,EAAUF,YAAYG,KAExBC,EAAyBlB,EAASmB,KAAI,SAACC,GAAD,OACtC,cAACC,EAAA,EAAD,CACMC,OAAQF,EAAYG,GACpBC,OAAQC,IAAYC,SAASN,EAAYO,SACzCC,OAAQR,EAAYS,MACpBC,SAAUV,EAAYU,SACtBC,OAAQX,EAAYW,OACpBC,WAAYZ,EAAYW,SAAWf,GAN9B,UAAYI,EAAYG,OASvC,OACI,cAACpC,EAAA,EAAD,CAAca,SAAUkB,EAAwBhB,OAAQ,U,kBCoBjD+B,UA3BY,WACvB,IAAMC,EAAWC,cACXC,EAActB,YAAYuB,KAUhC,OARA3C,qBAAU,WAEN,OADAwC,EAASI,eACF,WACHJ,EAASK,kBAGd,IAGC,gCACI,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAgBC,WAlBX,OAmBWC,YAAaA,IACbC,WAAW,OACXC,cAAe,EACfC,cAAe,IACfC,WAAYX","file":"static/js/5.578b7976.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport List from '@material-ui/core/List';\n\ntype messagesListPropsType = {\n    messages: Array<JSX.Element>,\n    height: string\n}\n\n/**\n * Returns list of messages width autoscroll functionality.\n * If list scrolled to bottom list will autoscroll.\n * @param {messagesListPropsType} props - props object.\n * @param {Array<JSX.Element>} props.messages - array of messages as JSX.\n * @param {string} props.height - CSS string value for height (i.e. \"10px\").\n * @constructor\n */\nexport const MessagesList: React.FC<messagesListPropsType> = (props) => {\n    const messagesRef = useRef<HTMLLIElement>(null);\n    const [isAutoscroll, setIsAutoscroll] = useState(true);\n\n    /**\n     * Detects scroll end and set autoscroll to true or false.\n     * @param event\n     */\n    function scrollHandler(event: React.UIEvent<HTMLUListElement, UIEvent>) {\n        const element = event.currentTarget;\n\n        if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {\n            !isAutoscroll && setIsAutoscroll(true);\n        } else {\n            isAutoscroll && setIsAutoscroll(false);\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoscroll) {\n            setTimeout(() => {\n                messagesRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\n            }, 500);\n        }\n    }, [props.messages, isAutoscroll]);\n\n    return (\n        <List style={{height: props.height, overflowY: 'auto', width: '100%'}} onScroll={scrollHandler}>\n            {props.messages}\n            <li ref={messagesRef}/>\n        </List>\n    );\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {getChatMessages, getOwnerIdSelector} from '../../Common/Selectors/Selectors';\nimport Post from '../../Common/Post/Post';\nimport {PostActions} from '../../Common/Post/PostActions/PostActions';\nimport {MessagesList} from '../../Common/MessagesList/MessagesList';\n\nexport const Messages: React.FC = () => {\n    const messages = useSelector(getChatMessages);\n    const ownerId = useSelector(getOwnerIdSelector);\n\n    let messagesComponentsList = messages.map((messageItem) =>\n        <Post key={'Message' + messageItem.id}\n              postId={messageItem.id}\n              action={PostActions.onlyText(messageItem.message)}\n              avatar={messageItem.photo}\n              userName={messageItem.userName}\n              userId={messageItem.userId}\n              rightSided={messageItem.userId === ownerId}\n        />);\n\n    return (\n        <MessagesList messages={messagesComponentsList} height={'65vh'}/>\n    );\n};\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../reducers/chatReducer';\nimport {Messages} from '../components/Chat/Messages';\nimport Divider from '@material-ui/core/Divider';\nimport {AddMessageForm} from '../Common/AddMessageForm/AddMessageForm';\nimport {getIsChatConnectedSelector} from '../Common/Selectors/Selectors';\n\n/**\n * @const\n * @type string\n * @description block max width.\n */\nconst maxWidth = '30ch';\n\nconst ChatPage: React.FC = () => {\n    const dispatch = useDispatch();\n    const isConnected = useSelector(getIsChatConnectedSelector);\n\n    useEffect(() => {\n        dispatch(startMessagesListening());\n        return () => {\n            dispatch(stopMessagesListening());\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return(\n        <div>\n            <Messages/>\n            <Divider/>\n            <AddMessageForm blockWidth={maxWidth}\n                            sendMessage={sendMessage}\n                            buttonText='Send'\n                            minTextLength={2}\n                            maxTextLength={100}\n                            isBlocked={!isConnected}\n            />\n        </div>\n    );\n}\n\nexport default ChatPage;"],"sourceRoot":""}