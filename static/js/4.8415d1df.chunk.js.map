{"version":3,"sources":["components/Common/MessagesList/MessagesList.tsx","../node_modules/@material-ui/core/esm/Container/Container.js","../node_modules/@material-ui/icons/ChevronLeft.js","components/Dialogs/NoDialog/NoDialog.tsx","components/Dialogs/Dialog/MoreDialogMessagesButton/MoreDialogMessagesButton.tsx","components/Dialogs/Dialog/GoBackButton/GoBackButton.tsx","components/Dialogs/Dialog/EmptyMessagesList/EmptyMessagesList.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/DialogsList/DialogsList.tsx","components/Dialogs/Dialogs.tsx"],"names":["MessagesList","props","messages","isMessageSentFetching","useSelector","getIsMessageSentFetchingSelector","messagesRef","React","useRef","useState","isAutoscroll","setIsAutoscroll","useEffect","setTimeout","current","scrollIntoView","behavior","block","style","height","overflowY","width","onScroll","event","element","currentTarget","scrollHeight","scrollTop","clientHeight","notCentered","ref","Container","classes","className","_props$component","component","Component","_props$disableGutters","disableGutters","_props$fixed","fixed","_props$maxWidth","maxWidth","other","_objectWithoutProperties","_extends","clsx","root","concat","capitalize","String","withStyles","theme","_defineProperty","marginLeft","boxSizing","marginRight","paddingLeft","spacing","paddingRight","display","breakpoints","up","Object","keys","values","reduce","acc","breakpoint","value","maxWidthXs","Math","max","xs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl","name","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","NoDialog","makeStyles","createStyles","helperText","flexGrow","alignItems","justifyContent","down","useStyles","Typography","variant","color","MoreDialogMessagesButton","dispatch","useDispatch","Button","onClick","getMessagesList","currentDialogId","goBackButtonWrapper","GoBackButton","history","useHistory","IconButton","push","getRouteNameById","routes","dialogs","id","Divider","EmptyMessagesList","FullPageBlock","BLOCK_HEIGHT","margin","Dialog","getDialogsMessagesSelector","opponents","getDialogsUserListSelector","ownerId","getOwnerIdSelector","ownerPhoto","getOwnerPhotosSelector","small","hasMore","getDialogHasMoreSelector","isMessagesFetching","getIsMessagesFetchingSelector","opponent","dialogId","filter","user","undefined","length","getOpponentData","opponentPhoto","photos","hasNewMessages","dialogsActions","chatMessagesRead","messagesComponentsList","map","message","isOwner","senderId","action","viewed","PostActions","textWithOk","body","addedAt","textWithWait","onlyText","Post","postId","avatar","userName","rightSided","unshift","Preloader","AddMessageForm","blockWidth","sendMessage","buttonText","minTextLength","dialogsItems","DialogsList","userList","users","newMessagesCount","Counter","count","inCorner","userId","primaryLink","List","withRouter","withAuthRedirect","isDialogsFetching","getIsDialogsFetchingSelector","match","params","parseInt","dialogsWrapper","emptyDialogsList","minWidth","chatChanged","getDialogsList","orientation"],"mappings":"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","file":"static/js/4.8415d1df.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\nimport {useSelector} from 'react-redux';\nimport {getIsMessageSentFetchingSelector} from '../../../selectors/selectors';\nimport Preloader from '../Preloader/Preloader';\n\ntype messagesListPropsType = {\n    messages: Array<JSX.Element>,\n    height: string\n}\n\n/**\n * Returns list of messages width autoscroll functionality.\n * If list scrolled to bottom list will autoscroll.\n * @param {messagesListPropsType} props - props object.\n * @param {Array<JSX.Element>} props.messages - array of messages as JSX.\n * @param {string} props.height - CSS string value for height (i.e. \"10px\").\n * @constructor\n */\nexport const MessagesList: React.FC<messagesListPropsType> = (props) => {\n    const {messages} = props;\n    const isMessageSentFetching = useSelector(getIsMessageSentFetchingSelector);\n    const messagesRef = React.useRef<HTMLLIElement>(null);\n    const [isAutoscroll, setIsAutoscroll] = React.useState(true);\n\n    /**\n     * Detects scroll end and set autoscroll to true or false.\n     * @param event\n     */\n    function scrollHandler(event: React.UIEvent<HTMLUListElement, UIEvent>) {\n        const element = event.currentTarget;\n\n        if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {\n            !isAutoscroll && setIsAutoscroll(true);\n        } else {\n            isAutoscroll && setIsAutoscroll(false);\n        }\n    }\n\n    React.useEffect(() => {\n        if (isAutoscroll) {\n            setTimeout(() => {\n                messagesRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\n            }, 500);\n        }\n    }, [messages, isAutoscroll]);\n\n    return (\n        <List style={{height: props.height, overflowY: 'auto', width: '100%'}} onScroll={scrollHandler}>\n            {messages}\n            {isMessageSentFetching && <li><Preloader notCentered={true}/></li>}\n            <li ref={messagesRef}/>\n        </List>\n    );\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _defineProperty({\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      display: 'block'\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Empty block with helper text for dialogs page.\n * @constructor\n */\nexport const NoDialog: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            helperText: {\n                display: 'flex',\n                flexGrow: 1,\n                alignItems: 'center',\n                justifyContent: 'center',\n                [theme.breakpoints.down('xs')]: {\n                    display: 'none'\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.helperText}>\n            <Typography variant='h4' color='textSecondary'>Please click on user name to start dialog</Typography>\n        </Container>\n    );\n}","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {getMessagesList} from '../../../../reducers/dialogsReducer';\nimport Button from '@material-ui/core/Button';\n\ntype moreDialogMessagesButtonPropsType = {\n    currentDialogId: number\n}\n\n/**\n * Returns complete button for request next page of messages.\n * @param {moreDialogMessagesButtonPropsType} props - props object\n * @param {number} props.currentDialogId - ID of opponent profile\n * @constructor\n */\nexport const MoreDialogMessagesButton: React.FC<moreDialogMessagesButtonPropsType> = (props) => {\n    const dispatch = useDispatch();\n\n    function onClick() {\n        dispatch(getMessagesList(props.currentDialogId));\n    }\n\n    return (\n        <li style={{display: 'flex', justifyContent: 'center'}}>\n            <Button variant='outlined' color='primary' onClick={onClick}>More messages</Button>\n        </li>\n    );\n}","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../../../../utils/routes';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Divider from '@material-ui/core/Divider';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        goBackButtonWrapper: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        }\n    })\n);\n\n/**\n * Returns complete button for redirect to dialogs root.\n * @returns {JSX.Element}\n * @constructor\n */\nexport const GoBackButton: React.FC = () => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    function closeDialog() {\n        history.push(`/${getRouteNameById(routes.dialogs.id)}`);\n    }\n\n    return (\n        <div className={classes.goBackButtonWrapper}>\n            <IconButton onClick={closeDialog}>\n                <ChevronLeftIcon/>\n            </IconButton>\n            <Divider/>\n        </div>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {FullPageBlock} from '../../../Common/FullPageBlock/FullPageBlock';\n\n/**\n * Returns block with helper text.\n * @returns {JSX.Element}\n * @constructor\n */\nexport const EmptyMessagesList: React.FC = () => {\n    return (\n        <FullPageBlock>\n            <Typography color='textSecondary' variant='h4'>No messages yet</Typography>\n            <Typography color='textSecondary' variant='h4'>send something to your opponent</Typography>\n        </FullPageBlock>\n    );\n}","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    getDialogHasMoreSelector,\n    getDialogsMessagesSelector,\n    getDialogsUserListSelector,\n    getIsMessagesFetchingSelector,\n    getOwnerIdSelector,\n    getOwnerPhotosSelector\n} from '../../../selectors/selectors';\nimport Post from '../../Common/Post/Post';\nimport Divider from '@material-ui/core/Divider';\nimport {AddMessageForm} from '../../Common/AddMessageForm/AddMessageForm';\nimport {dialogsActions, sendMessage} from '../../../reducers/dialogsReducer';\nimport {PostActions} from '../../Common/Post/PostActions/PostActions';\nimport {MessagesList} from '../../Common/MessagesList/MessagesList';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {userListType} from '../../../types';\nimport {MoreDialogMessagesButton} from './MoreDialogMessagesButton/MoreDialogMessagesButton';\nimport {GoBackButton} from './GoBackButton/GoBackButton';\nimport {EmptyMessagesList} from './EmptyMessagesList/EmptyMessagesList';\nimport Preloader from '../../Common/Preloader/Preloader';\n\ntype dialogPropsType = {\n    currentDialogId: number\n}\n\n/**\n * @const\n * @type string\n * @description height of block.\n */\nconst BLOCK_HEIGHT = '70vh';\n/**\n * @const\n * @type string\n * @description width of form.\n */\nconst FORM_WIDTH = '52.5ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        messages: {\n            flexGrow: 1,\n            width: '20%',\n            margin: theme.spacing(3),\n        }\n    })\n);\n\n/**\n * Returns opponent data.\n * @param {Array<userListType>} opponents - list of dialogs\n * @param {number} dialogId - profile ID of opponent.\n */\nfunction getOpponentData(opponents: Array<userListType>, dialogId: number):userListType|null  {\n    let opponent = opponents.filter(user => {\n        return user.id === dialogId ? user as userListType : undefined;\n    });\n\n    return opponent.length ? opponent[0] : null;\n}\n\n/**\n * Returns block of dialog with list of messages and form to add new.\n * @returns {JSX.Element}\n * @constructor\n */\nexport const Dialog: React.FC<dialogPropsType> = (props) => {\n    let {currentDialogId} = props;\n    const messages = useSelector(getDialogsMessagesSelector);\n    const opponents = useSelector(getDialogsUserListSelector);\n    const ownerId = useSelector(getOwnerIdSelector);\n    const ownerPhoto = useSelector(getOwnerPhotosSelector)?.small;\n    const hasMore = useSelector(getDialogHasMoreSelector);\n    const isMessagesFetching = useSelector(getIsMessagesFetchingSelector);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const opponent = getOpponentData(opponents, currentDialogId);\n    const opponentPhoto = opponent ? opponent.photos.small : null;\n\n    React.useEffect(() => {\n        if (!currentDialogId || !opponent){\n            return;\n        }\n\n        if (opponent.hasNewMessages) {\n            dispatch(dialogsActions.chatMessagesRead(currentDialogId));\n        }\n    }, [currentDialogId, dispatch, opponent]);\n\n    let messagesComponentsList = messages.map(message => {\n        const isOwner = message.senderId === ownerId;\n        const action = isOwner\n            ? (message.viewed\n                ? PostActions.textWithOk(message.body, message.addedAt)\n                : PostActions.textWithWait(message.body, message.addedAt)\n              )\n            : PostActions.onlyText(message.body, message.addedAt);\n\n        return <Post key={'Message' + message.id}\n                     postId={message.id}\n                     action={action}\n                     avatar={!isOwner ? opponentPhoto : ownerPhoto || null}\n                     userName={''}\n                     rightSided={isOwner}\n        />\n    });\n\n    if (hasMore) {\n        messagesComponentsList.unshift(\n            isMessagesFetching ? <Preloader/> : <MoreDialogMessagesButton key={'MoreMessagesButton'} currentDialogId={currentDialogId}/>\n        );\n    }\n\n    return (\n        <div className={classes.messages}>\n            <GoBackButton/>\n            {messages.length\n                ? <MessagesList messages={messagesComponentsList} height={BLOCK_HEIGHT}/>\n                : isMessagesFetching\n                    ? <div style={{height: BLOCK_HEIGHT}}><Preloader/></div>\n                    : <EmptyMessagesList/>\n            }\n            <Divider/>\n            <AddMessageForm blockWidth={FORM_WIDTH}\n                            sendMessage={sendMessage}\n                            buttonText='Send'\n                            minTextLength={2}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {getDialogsUserListSelector} from '../../../selectors/selectors';\nimport {Counter} from '../../Common/Counter/Counter';\nimport Post from '../../Common/Post/Post';\nimport List from '@material-ui/core/List';\nimport {createStyles, makeStyles} from '@material-ui/core';\n\ntype dialogsListPropsType = {\n    currentDialogId: number\n}\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogsItems: {\n            height: '90vh',\n            overflowY: 'auto',\n            flexGrow: 1,\n            '& > li > div': {\n                flexGrow: 1,\n            }\n        }\n    }),\n);\n\n/**\n * Returns complete block with list of dialogs.\n * @param {dialogsListPropsType} props - props object\n * @param {number} props.currentDialogId - props object\n * @returns {JSX.Element}\n * @constructor\n */\nexport const DialogsList: React.FC<dialogsListPropsType> = (props) => {\n    const userList = useSelector(getDialogsUserListSelector);\n    const classes = useStyles();\n\n    let users = userList.map((user) => {\n        let action = user.newMessagesCount > 0 ? <Counter count={user.newMessagesCount} inCorner={true}/> : undefined;\n\n        return <Post key={'User' + user.id}\n                     postId={String(user.id)}\n                     avatar={user.photos.small}\n                     userName={user.userName}\n                     userId={user.id}\n                     primaryLink={user.id !== props.currentDialogId}\n                     action={action}\n        />\n    });\n\n    return (\n        <List className={classes.dialogsItems}>\n            {users}\n        </List>\n    );\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport {dialogsActions, getDialogsList, getMessagesList} from '../../reducers/dialogsReducer';\nimport Divider from '@material-ui/core/Divider';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {MatchParams} from '../../types';\nimport {NoDialog} from './NoDialog/NoDialog';\nimport {Dialog} from './Dialog/Dialog';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {getIsDialogsFetchingSelector} from '../../selectors/selectors';\nimport withAuthRedirect from '../../Hocs/withAuthRedirect';\nimport Preloader from '../Common/Preloader/Preloader';\nimport {DialogsList} from './DialogsList/DialogsList';\n\ntype matchType = RouteComponentProps<MatchParams>;\n\n/**\n * Returns page with dialogs.\n * Allow only for authorized users.\n * @param {Object} props - props object\n * @param {matchType} props.match - props from router\n * @returns {JSX.Element}\n * @constructor\n */\nconst Dialogs: React.FC<matchType> = (props) => {\n    const isDialogsFetching = useSelector(getIsDialogsFetchingSelector);\n    const dispatch = useDispatch();\n    const currentDialogId = props.match.params.userId ? parseInt(props.match.params.userId) : 0;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            dialogsWrapper: {\n                display: 'flex',\n                margin: theme.spacing(-3)\n            },\n            dialogs: {\n                display: 'flex',\n                [theme.breakpoints.down('xs')]: {\n                    display: currentDialogId ? 'none' : 'flex',\n                    width: '100%'\n                },\n            },\n            emptyDialogsList: {\n                minWidth: 200\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    React.useEffect(() => {\n        if (currentDialogId) {\n            dispatch(dialogsActions.chatChanged(currentDialogId));\n            dispatch(getMessagesList(currentDialogId));\n        }\n    }, [currentDialogId, dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDialogsList());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={classes.dialogsWrapper}>\n            <div className={classes.dialogs}>\n                {isDialogsFetching\n                    ? <div className={classes.emptyDialogsList}><Preloader/></div>\n                    : <DialogsList currentDialogId={currentDialogId}/>\n                }\n                <Divider orientation='vertical'/>\n            </div>\n            {currentDialogId\n                ? <Dialog currentDialogId={currentDialogId}/>\n                : <NoDialog/>\n            }\n        </div>\n    );\n};\n\nexport default withRouter(withAuthRedirect(Dialogs));"],"sourceRoot":""}