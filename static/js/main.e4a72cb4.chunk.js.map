{"version":3,"sources":["utils/fontHelpers.ts","Common/Preloader/Preloader.module.css","components/Header/AppHeader.module.css","Common/Post/Post.tsx","Hocs/withAuthRedirect.tsx","reducers/usersReducer.ts","Common/AddMessageForm/EmojiPicker/EmojiPicker.tsx","Common/AddMessageForm/AddMessageForm.tsx","Common/Post/LikesBlock/LikesBlock.tsx","Common/Post/PostActions/PostActions.tsx","Common/Counter/Counter.tsx","components/API/chat-api.ts","reducers/chatReducer.ts","components/Navbar/Navbar.module.css","Common/Routes.tsx","Common/FormComponents/FieldsComponentsFormik.tsx","reportWebVitals.js","assets/images/vk-rounded.svg","components/Navbar/Navbar.tsx","reducers/authReducer.ts","reducers/appReducer.ts","assets/images/logo.svg","components/Header/AppHeader.tsx","Common/GlobalAlert/GlobalAlert.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/AdditionalInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/AdditionalInfo/AdditionalInfo.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoParts/AdditionalInfoParts.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoForm.tsx","components/Profile/ProfileInfo/ProfileAvatar/AvatarUploadButton/AvatarUploadButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/AddDialogButton/AddDialogButton.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","assets/images/social-network-pattern-background.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/NotFound.tsx","Common/SuspenseFallback/SuspenseFallback.tsx","Pages/StartPage.tsx","Content.tsx","App.tsx","redux/reduxStore.ts","index.tsx","components/API/api.ts","utils/validators.ts","reducers/profileReducer.ts","types.ts","Common/Selectors/Selectors.ts","Common/Post/PostActions/PostActions.module.css","assets/images/preloader-spinner.svg","Common/Preloader/Preloader.tsx","reducers/dialogsReducer.ts","assets/images/user-male.png","utils/formikSetters.ts"],"names":["getFontsWithEmoji","theme","fontPool","typography","fontFamily","split","splice","join","module","exports","Post","props","classes","makeStyles","createStyles","postsItem","padding","justifyContent","rightSided","postWrapper","display","margin","spacing","width","blockWidth","text","whiteSpace","overflowWrap","flexDirection","useStyles","avatarSmall","avatar","userMale","secondary","Fragment","action","postId","primaryLinked","to","getRouteNameById","routes","dialogs","id","userId","userName","alignItems","className","variant","profile","alt","src","primary","primaryLink","withAuthRedirect","Component","connect","state","isAuth","auth","restProps","initialState","users","currentPage","pageSize","isUsersFetching","followingInProgress","filter","searchTerm","friend","mapUserFollowingStatus","userObject","status","followed","userActions","type","isFetching","getUsers","dispatch","getState","a","usersPage","Api","Users","data","items","processFollowUnfollow","apiMethod","actionCreator","follow","unfollow","usersReducer","map","user","EmojiPicker","React","useState","anchorElement","setAnchorElement","isPopoverOpen","Boolean","IconButton","onClick","event","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","anchorEl","onClose","onSelect","onEmojiClick","set","AddMessageForm","minLength","minLengthCreator","minTextLength","maxLength","maxTextLength","maxLengthCreator","undefined","validatorsList","required","push","newPostForm","maxWidth","newPostFormInputWrapper","flexGrow","stretched","useDispatch","formik","useFormik","initialValues","newMessage","onSubmit","values","setSubmitting","resetForm","sendMessage","handleSubmit","value","Tooltip","title","aria-label","placement","arrow","createField","FormikField","validatorCreator","multiline","emojiObject","setFieldValue","native","Button","color","disabled","isBlocked","isSubmitting","dirty","isValid","buttonText","likeWrapper","LikesBlock","iconSize","substr","profileActions","addLike","likeCount","fontSize","FONT_SIZE","getFormattedDate","date","indexOf","dateParts","datePart","replace","reverse","timePart","PostActions","onlyText","styles","textWithIconWrapper","Typography","component","textWithOk","secondRow","style","icon","textWithWait","textWithLikes","likes","DateBlock","Counter","useTheme","position","inCorner","top","right","label","count","size","subscribers","ws","closeHandler","console","log","notifyConnectionChanged","setTimeout","createChanel","messageHandler","newMessages","JSON","parse","forEach","message","nanoid","subscriber","openHandler","cleanUpWs","removeEventListener","close","WebSocket","addEventListener","chatApi","eventName","callback","send","messages","isConnected","chatActions","payload","_messageHandler","messageHandlerCreator","_connectionHandler","connectionHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","slice","PersonOutlinedIcon","EmailOutlinedIcon","FeaturedPlayListOutlinedIcon","LibraryMusicOutlinedIcon","MessageOutlinedIcon","PeopleAltOutlinedIcon","SettingsOutlinedIcon","getRouteIdByName","routeName","routeId","Object","keys","find","route","FormControl","field","children","meta","form","getFieldMeta","name","hasError","touched","error","helperText","elementProps","isValidElement","cloneElement","root","FormikCheckbox","formikSelect","memo","options","option","key","placeholder","validate","_path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MenuItem","selected","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","Navbar","currentRoute","useHistory","location","pathname","newMessagesCount","useSelector","getNewMessagesCountSelector","selectedIndex","setSelectedIndex","MenuList","currentRouteId","createElement","index","onMenuClick","drawerContainer","List","email","login","captchaUrl","authActions","url","getAuth","Auth","Me","getCaptcha","Security","authReducer","initDone","appActions","loginBlock","marginLeft","marginRight","subtitle1","appBar","zIndex","drawer","headerContentWrapper","menuButton","breakpoints","up","leftPart","AppHeader","getIsAuthSelector","getLoginSelector","ownerPhotos","getOwnerPhotosSelector","AppBar","Toolbar","edge","headerLogo","logo","Avatar","small","Logout","loginLink","GlobalAlert","Snackbar","isOpen","reason","setNotificationOpen","autoHideDuration","TransitionComponent","Slide","ProfileStatus","statusDiv","statusInput","statusText","divider","isStatusEditing","setStatusEditing","setStatus","useEffect","toggleEditing","updateStatus","statusFetching","Preloader","notCentered","isOwner","TextField","autoFocus","onBlur","onChange","target","Divider","_extends","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgVkRounded","_ref","svgRef","titleId","xmlns","height","viewBox","d","ForwardRef","ProfileContact","contactTitle","contactInfo","Icon","SvgIcon","VkRounded","rel","href","additionalInfo","additionalInfoItem","marginTop","wrapped","flexWrap","contacts","AdditionalInfo","ContactsList","contactValue","isNeedContacts","every","contact","aboutMe","lookingForAJob","lookingForAJobDescription","setEditMode","additionalInfoRow","flexBasis","textAlign","errorText","FormBasicInfo","checked","setChecked","Card","triggerCheckbox","FormContactsInfo","additionalInfoForm","buttonsWrapper","infoWrapper","errorsWrapper","AdditionalInfoForm","normalizeContacts","enableReinitialize","formData","setFieldError","hasApiErrors","saveProfile","submitCount","onChancel","input","AvatarUploadButton","accept","files","savePhoto","htmlFor","startIcon","AddDialogButton","history","startRefreshDialog","avatarWrapper","large","ProfileAvatar","profileAvatarLarge","largePhoto","wallpaper","backgroundImage","ProfileBackground","backgroundSize","profileDescriptionWrapper","profileDescription","ProfileInfo","isEditMode","photos","fullName","MAX_WIDTH","postsList","backgroundColor","palette","background","paper","postsTitle","postBlock","MyPosts","posts","postsData","post","sendPost","MyPostsContainer","profilePage","Profile","ProfileContainer","getProfile","parseInt","match","params","getStatus","getProfileData","prevProps","prevState","snapshot","mapDispatchToProps","withRouter","maxLength30","loginForm","checkboxWrapper","loginInput","alignSelf","marginBottom","LoginForm","password","rememberMe","captcha","errorCallback","emptyStatusCallback","Login","resultCode","captchaResultCodeType","captchaRequired","autoComplete","loginPage","getCaptchaUrlSelector","NotFound","fallbackWrapper","fallbackText","SuspenseFallback","Container","StartPage","Settings","lazy","Music","News","UsersContainer","DialogsContainer","ChatPage","Content","content","Suspense","fallback","exact","path","news","music","settings","chat","App","isInitDone","getAppInitDoneSelector","isNotificationOpen","notificationText","setNotificationText","isMenuOpen","setMenuOpen","down","drawerPaper","catchGenericError","response","window","getNewMessagesCount","getOwnerProfile","Drawer","rootReducer","combineReducers","profileReducer","dialogsPage","dialogsReducer","app","appReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","DEFAULT_API","axios","create","withCredentials","baseURL","headers","get","page","term","delete","resultCodesType","Success","result","put","file","FormData","append","Promise","resolve","reject","Dialogs","getDialogsList","getMessagesList","body","validators","validator","ownerProfile","newPost","deletePost","setProfile","setOwnersProfile","updateProfile","toggleStatusFetching","savePhotoSuccess","alert","ownerId","emptyErrorCallback","statusCallback","setErrors","newProfile","getUsersSelector","getIsUsersFetchingSelector","getFollowingInProgressSelector","getUsersFilterSelector","getOwnerIdSelector","getChatMessages","getIsChatConnectedSelector","getDialogsMessagesSelector","messageList","getDialogsUserListSelector","userList","getDialogHasMoreSelector","currentDialogHasMore","getIsDialogsFetchingSelector","isDialogsFetching","getIsMessageSentFetchingSelector","isMessageSentFetching","getIsMessagesFetchingSelector","isMessagesFetching","preloaderWrapper","preloader","currentDialogId","currentDialogPage","getUnescapedMessages","messagesList","unescapedMessage","he","unescape","dialogsActions","messageSent","dialogsListReceived","list","messagesListReceived","chatChanged","chatId","chatMessagesRead","newMessagesCountReceived","countMessagesChanged","updateDialogsFetching","updateMessagesFetching","updateMessageSentFetching","totalCount","messagesWasRead","userItem","hasNewMessages","formikSetErrors","formikSetStatus","subkey","errorTextRaw","rawError","toLowerCase","substring"],"mappings":"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","file":"static/js/main.e4a72cb4.chunk.js","sourcesContent":["import {Theme} from '@material-ui/core/styles';\n\n/**\n * Returns fontFamily string.\n * @param {Theme} theme - Material-UI theme\n */\nexport function getFontsWithEmoji(theme: Theme) {\n    let fontPool = theme.typography.fontFamily?.split(',');\n    fontPool?.splice(1, 0, \"Twemoji Mozilla\");\n    return fontPool?.join(',');\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__1-vJZ\",\"preloader\":\"Preloader_preloader__1fZTW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerLogo\":\"AppHeader_headerLogo__1q3ko\",\"loginLink\":\"AppHeader_loginLink__1Epif\"};","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport userMale from \"../../assets/images/user-male.png\";\nimport {stringOrNull} from '../../types';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {NavLink} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../Routes';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype postPropsType = {\n    postId: string,\n    action?: React.ReactElement,\n    avatar: stringOrNull,\n    userName: stringOrNull,\n    userId?: number,\n    blockWidth?: string,\n    rightSided?: boolean,\n    primaryLink?: boolean,\n}\n\n/**\n * Unified post block with avatar, title, text and optional likes-block.\n * @param {postPropsType} props - props object\n * @param {string} props.postId - post ID as string\n * @param {React.ReactElement=} props.action - post text\n * @param {string|null} props.avatar - link to avatar image\n * @param {string|null} props.userName - text for title\n * @param {number=} props.userId - if exist, will append to avatar navlink\n * @param {string=} props.blockWidth - sets max-width of block (CSS value, i.e. \"5px\")\n * @param {boolean=} props.primaryLink - if true, title text will anchor\n * @constructor\n */\nconst Post: React.FC<postPropsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            postsItem: {\n                padding: 0,\n                justifyContent: props.rightSided ? 'end' : 'start'\n            },\n            postWrapper: {\n                display: 'flex',\n                margin: theme.spacing(1),\n                width: props.blockWidth || 'max-content',\n                padding: theme.spacing(1, 2)\n            },\n            text: {\n                whiteSpace: 'pre-line',\n                overflowWrap: 'break-word',\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                '& > p > span': {\n                    fontFamily: getFontsWithEmoji(theme)\n                },\n            }\n        }),\n    );\n\n    const classes = useStyles();\n    let avatarSmall = props.avatar || userMale;\n\n    const secondary = [\n        <React.Fragment key={props.postId}>\n            {props.action}\n        </React.Fragment>\n    ];\n\n    const primaryLinked = <NavLink to={`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`}>\n                              {props.userName}\n                          </NavLink>;\n\n    return(\n        <ListItem alignItems='flex-start' className={classes.postsItem}>\n            <Card variant={'outlined'} className={classes.postWrapper}>\n                <ListItemAvatar>\n                    {!!props.userId\n                        ? <NavLink to={`/${getRouteNameById(routes.profile.id)}/${props.userId}`}>\n                            <Avatar alt='ava' src={avatarSmall} />\n                          </NavLink>\n                        : <Avatar alt='ava' src={avatarSmall} />\n                    }\n                </ListItemAvatar>\n                <ListItemText className={classes.text}\n                              primary={!!props.primaryLink ? primaryLinked : props.userName}\n                              secondary={secondary}\n                />\n            </Card>\n        </ListItem>\n    );\n};\n\nexport default Post;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from '../redux/reduxStore';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\n/**\n * Returns component with redirect to login if user is not authorized. (generic-function)\n * @param {React.ComponentType} Component - component for wrapping\n */\nfunction withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\n    let mapStateToProps = (state: appStateType) => {\n        return (\n            {isAuth: state.auth.isAuth}\n        );\n    };\n\n    const AuthRedirect: React.FC<mapStatePropsType & {}> = (props) => {\n        let {isAuth, ...restProps} = props;\n\n        if (!isAuth) {\n            return <Redirect to='/login'/>\n        }\n\n        return <Component {...restProps as WCP}/>;\n    }\n\n    return connect(mapStateToProps)(AuthRedirect);\n}\n\nexport default withAuthRedirect;","import {Api} from '../components/API/api';\nimport {baseThunkType, arrayOfNumbers, usersType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {Dispatch} from 'redux';\n\nexport type initialStateType = {\n    users: Array<usersType>,\n    currentPage: number,\n    pageSize: number,\n    isUsersFetching: boolean,\n    followingInProgress: arrayOfNumbers,\n    filter: filterType\n}\n\nexport type filterType = {\n    searchTerm: stringOrNull,\n    friend: null | boolean\n}\ntype actionsType = inferActionsType<typeof userActions>;\ntype thunkType = baseThunkType<actionsType>;\n\ntype apiMethodType = typeof Api.Users.follow | typeof Api.Users.unfollow;\n\nconst initialState: initialStateType = {\n    users: [],\n    currentPage: 0,\n    pageSize: 12,\n    isUsersFetching: false,\n    followingInProgress: [],\n    filter: {\n        searchTerm: null,\n        friend: null\n    }\n};\n\n/**\n * Sets user with ID in list followed or unfollowed.\n * Returns new list of users.\n * @param {usersType} userObject - object of user from search\n * @param {number} userId - ID of profile\n * @param {boolean} status - true - is followed, false - is not\n */\nfunction mapUserFollowingStatus(userObject: usersType, userId: number, status: boolean) {\n        if (userObject.id === userId) {\n            return {...userObject, followed: status}\n        }\n        return userObject;\n}\n\nconst usersReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOWED':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, true))\n            }\n        case 'SN/USERS/UNFOLLOWED':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, false))\n            }\n        case 'SN/USERS/SET_SEARCH_TERM':\n            return {\n                ...state,\n                filter: {...action.filter},\n                users: [],\n                currentPage: 0\n            }\n        case 'SN/USERS/USERS_LIST_RECEIVED':\n            return {\n                ...state,\n                users: [...state.users, ...action.users],\n                currentPage: ++state.currentPage\n            }\n        case 'SN/USERS/UPDATE_IS_USERS_FETCHING':\n            return {...state, isUsersFetching: action.isUsersFetching}\n        case 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING':\n            return {\n                ...state,\n                followingInProgress:\n                    action.isFetching\n                        ? [...state.followingInProgress, action.userId]\n                        : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userActions = {\n    /** Action after user following */\n    followUser: (userId: number) => ({type: 'SN/USERS/FOLLOWED', userId} as const),\n    /** Action after user unfollowing */\n    unfollowUser: (userId: number) => ({type: 'SN/USERS/UNFOLLOWED', userId} as const),\n    /** Action for set new search filter */\n    setSearchFilter: (filter: filterType) => ({type: 'SN/USERS/SET_SEARCH_TERM', filter} as const),\n    /** Action after users list was received from API */\n    usersListReceived: (users: Array<usersType>) => ({type: 'SN/USERS/USERS_LIST_RECEIVED', users} as const),\n    /** Action which sets status of users list receiving. true - in progress, false - is done */\n    updateUsersFetching: (isUsersFetching: boolean) => ({\n        type: 'SN/USERS/UPDATE_IS_USERS_FETCHING',\n        isUsersFetching\n    } as const),\n    /** Action which sets status of users following\\unfollowing process. true - in progress, false - is done */\n    updateFollowingFetching: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING',\n        isFetching,\n        userId\n    } as const)\n}\n\n/**\n * Gets one page of users from API and sets it to state.\n * @param {filterType} filter - search filter\n */\nexport const getUsers = (filter: filterType): thunkType => {\n    return async (dispatch, getState) => {\n        const currentPage = getState().usersPage.currentPage;\n        const pageSize = getState().usersPage.pageSize;\n\n        dispatch(userActions.updateUsersFetching(true));\n        if (filter !== getState().usersPage.filter) {\n            dispatch(userActions.setSearchFilter(filter));\n        }\n\n        let data = await Api.Users.getUsers(pageSize, currentPage, filter);\n\n        dispatch(userActions.updateUsersFetching(false));\n\n        if (data === null) {\n            return;\n        }\n\n        dispatch(userActions.usersListReceived(data.items));\n    }\n}\n\n/**\n * Make process of following or unfollowing wia API and sets result to state.\n * @param {number} userId - ID of user which will be followed\\unfollowed\n * @param {Dispatch<actionsType>} dispatch - dispatch function\n * @param {apiMethodType} apiMethod - function of API\n * @param {function(number): actionsType} actionCreator - process which will be made\n */\nconst processFollowUnfollow = async (\n    userId: number,\n    dispatch: Dispatch<actionsType>,\n    apiMethod: apiMethodType,\n    actionCreator: (userId: number) => actionsType\n) => {\n    dispatch(userActions.updateFollowingFetching(true, userId));\n    let isSuccessful = await apiMethod(userId);\n\n    if (isSuccessful) {\n        dispatch(actionCreator(userId));\n    }\n\n    dispatch(userActions.updateFollowingFetching(false, userId));\n}\n\n/**\n * Makes following process\n * @param {number} userId - ID of user which will be followed\n */\nexport const follow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.follow, userActions.followUser);\n    }\n}\n\n/**\n * Makes unfollowing process\n * @param {number} userId - ID of user which will be unfollowed\n */\nexport const unfollow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.unfollow, userActions.unfollowUser);\n    }\n}\n\nexport default usersReducer;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\nimport Popover from '@material-ui/core/Popover';\nimport 'emoji-mart/css/emoji-mart.css'\nimport {BaseEmoji, Picker} from 'emoji-mart'\n\ntype emojiPickerPropsType = {\n    onEmojiClick: (emojiObject:  BaseEmoji) => void\n}\n\n/**\n * Returns IconButton with emoji picker in popup.\n * @param {emojiPickerPropsType} props - props object\n * @param {function(emojiObject: BaseEmoji):void} props.onEmojiClick - function which will set picked emoji\n * @constructor\n */\nexport const EmojiPicker: React.FC<emojiPickerPropsType> = (props) => {\n    const [anchorElement, setAnchorElement] = React.useState<HTMLButtonElement | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorElement(null);\n    };\n\n    const isPopoverOpen = Boolean(anchorElement);\n\n    return (\n        <React.Fragment>\n            <IconButton onClick={handleClick}>\n                <EmojiEmotionsOutlinedIcon/>\n            </IconButton>\n            <Popover\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={isPopoverOpen}\n                anchorEl={anchorElement}\n                onClose={handleClose}\n            >\n                <Picker onSelect={props.onEmojiClick}\n                        set='apple'\n                />\n            </Popover>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {createField, FormikField} from '../FormComponents/FieldsComponentsFormik';\nimport {maxLengthCreator, minLengthCreator, required, validatorCreator} from '../../utils/validators';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useDispatch} from 'react-redux';\nimport {EmojiPicker} from './EmojiPicker/EmojiPicker';\nimport {BaseEmoji} from 'emoji-mart';\n\ntype propsType = {\n    blockWidth?: string,\n    buttonText: string,\n    minTextLength: number,\n    maxTextLength?: number,\n    isBlocked?: boolean,\n    sendMessage: (text: string) => void\n};\n\ntype formDataType = {\n    newMessage: string\n}\n\ntype fieldNamesType = keyof formDataType;\n\n/**\n * Returns form for adding new message with one multiline input and one button.\n * @param {propsType} props - props object.\n * @param {string=} props.blockWidth - width of form (optional param, 'inherit' by default)\n * @param {string} props.buttonText - text on button\n * @param {number} props.minTextLength - min length of input value\n * @param {number=} props.maxTextLength - max length of input value (optional)\n * @param {boolean} props.isBlocked - is need to disable button\n * @param {function(text: string): void} props.sendMessage - callback for set new message\n * @constructor\n */\nexport const AddMessageForm: React.FC<propsType> = (props) => {\n    let minLength = minLengthCreator(props.minTextLength);\n    let maxLength = props.maxTextLength ? maxLengthCreator(props.maxTextLength) : undefined;\n\n    let validatorsList = [required, minLength];\n\n    if (maxLength !== undefined) {\n        validatorsList.push(maxLength);\n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            newPostForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: props.blockWidth || 'inherit',\n                '& > div': {\n                    display: 'flex',\n                    margin: theme.spacing(1),\n                },\n            },\n            newPostFormInputWrapper: {\n                display: 'flex',\n                '& > div': {\n                    display: 'flex',\n                    flexGrow: 1,\n                    margin: theme.spacing(1),\n                },\n            },\n            stretched: {\n                flexGrow: 1,\n            }\n        }),\n    );\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onSubmit(values: formDataType, {setSubmitting, resetForm}: FormikHelpers<formDataType>) {\n        dispatch(props.sendMessage(values.newMessage));\n        setSubmitting(false);\n        resetForm();\n    }\n\n    const formik = useFormik({\n        initialValues: {newMessage: ''},\n        onSubmit,\n    });\n\n    const onEmojiClick = (emojiObject: BaseEmoji) => {\n        formik.setFieldValue('newMessage', formik.values.newMessage + emojiObject.native);\n    };\n\n    return (\n        <form onSubmit={formik.handleSubmit} className={classes.newPostForm}>\n            <div className={classes.newPostFormInputWrapper}>\n                <FormikProvider value={formik}>\n                    <Tooltip title={'You can type multiline. Just hit enter.'} aria-label='Hint' placement=\"right\" arrow>\n                        {createField<fieldNamesType>(\n                            classes.stretched,\n                            'Type something',\n                            'newMessage',\n                            FormikField,\n                            validatorCreator(validatorsList),\n                            {multiline: true}\n                        )}\n                    </Tooltip>\n                </FormikProvider>\n                <EmojiPicker onEmojiClick={onEmojiClick}/>\n            </div>\n            <div>\n                <Button variant='contained'\n                        color='primary'\n                        type='submit'\n                        disabled={!!props.isBlocked || formik.isSubmitting || !formik.dirty || !formik.isValid}\n                >\n                    {props.buttonText}\n                </Button>\n            </div>\n        </form>\n    );\n}","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\n\ntype likesBlockPropsType = {\n    postId: string,\n    likeCount: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        likeWrapper: {\n            display: 'flex',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        }\n    }),\n);\n\n/**\n * Returns counter for post likes with tooltip and button to add like.\n * @param {likesBlockPropsType} props - props object\n * @param {string} props.postId - ID of post for identify it in DOM (must be unique)\n * @param {number} props.likeCount - current count of post likes\n * @constructor\n */\nexport const LikesBlock: React.FC<likesBlockPropsType> = (props) => {\n    const iconSize = 'small';\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    /**\n     * Add like to post\n     * @param {React.MouseEvent<HTMLSpanElement>} event - sets automatically, not need to put it\n     */\n    const likeHandler = (event: React.MouseEvent<HTMLSpanElement>) => {\n        let targetId = event.currentTarget.id;\n        let postId = targetId.substr(5);\n\n        if (postId) {\n            dispatch(profileActions.addLike(postId));\n        }\n    };\n\n    return (\n        <span onClick={likeHandler} id={'post-' + props.postId} className={classes.likeWrapper}>\n            <Tooltip arrow title='Like' aria-label='like'>\n                {props.likeCount ? <ThumbUpIcon fontSize={iconSize}/> : <ThumbUpOutlinedIcon fontSize={iconSize}/>}\n            </Tooltip>\n            <span>{props.likeCount}</span>\n        </span>\n    );\n};","import React from 'react';\nimport styles from './PostActions.module.css'\nimport Typography from '@material-ui/core/Typography';\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\nimport DoneAllOutlinedIcon from '@material-ui/icons/DoneAllOutlined';\nimport {LikesBlock} from '../LikesBlock/LikesBlock';\n\n/**\n * @const\n * @description - value of css font-size for icons.\n */\nconst FONT_SIZE = '0.9rem';\n\n/**\n * @const\n * @description - value of css font-size for date block.\n */\nconst DATE_SIZE = '0.7rem';\n\n/**\n * Return date string in human readable format.\n * @param {string} date - date as string like \"2021-09-18T10:06:21.48\"\n */\nfunction getFormattedDate(date: string): string {\n    const separator = 'T';\n\n    if (!date || date.indexOf(separator) < 1) {\n        return '';\n    }\n\n    let dateParts = date.split(separator);\n    let datePart = dateParts[0].replace(/-/g, ' ').split(' ').reverse().join(' ');\n    let timePart = dateParts[1].split('.')[0];\n\n    return `${datePart} ${timePart}`;\n}\n\n/** Object with creators of ready actions for Post component */\nexport const PostActions = {\n    /**\n     * Returns ready action where only text.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    onlyText(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                {date && <DateBlock date={date}/>}\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text and icon of read message.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    textWithOk(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <span className={styles.secondRow}>\n                    {date && <DateBlock date={date}/>}\n                    <DoneAllOutlinedIcon style={{fontSize: FONT_SIZE}} color='primary' className={styles.icon}/>\n                </span>\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text and icon of unread message.\n     * @param {string} text - text in action\n     * @param {string=} date - string with date (optional)\n     */\n    textWithWait(text: string, date: string = '') {\n        return (\n            <span className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <span className={styles.secondRow}>\n                    {date && <DateBlock date={date}/>}\n                    <CheckOutlinedIcon style={{fontSize: FONT_SIZE}} color='disabled' className={styles.icon}/>\n                </span>\n            </span>\n        );\n    },\n    /**\n     * Returns ready action with text, likes counter and button for add likes.\n     * @param {string} text - text in action\n     * @param {string} postId - ID of post\n     * @param {number} likes - current number of likes\n     */\n    textWithLikes(text: string, postId: string, likes: number) {\n        return (\n            <>\n                <Typography component='span'>{text}</Typography>\n                <LikesBlock postId={postId} likeCount={likes}/>\n            </>\n        );\n    }\n}\n\ntype dateBlockPropsType = {\n    date: string\n}\n\n/**\n *\n * @param {dateBlockPropsType} props - props object\n * @param {string} props.date - date as text\n * @constructor\n */\nconst DateBlock:React.FC<dateBlockPropsType> = (props) => {\n    return (\n        <Typography component='span' style={{fontSize: DATE_SIZE}} color='textSecondary'>\n            {getFormattedDate(props.date)}\n        </Typography>\n    );\n}","import React from 'react';\nimport {useTheme} from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\n\ntype counterPropsType = {\n    count: number,\n    inCorner?: boolean\n}\n\n/**\n * Returns small numeric label.\n * @param {counterPropsType} props - props object\n * @param {number} props.count - number which will be show.\n * @param {boolean=} props.isInCorner - if true, will be positioned in top-right corner (optional).\n * @constructor\n */\nexport const Counter: React.FC<counterPropsType> = (props) => {\n    const theme = useTheme();\n    return (\n        <Chip style={{\n                margin: theme.spacing(0, 1),\n                position: props.inCorner ? 'absolute' : undefined,\n                top: props.inCorner ? theme.spacing(1) : undefined,\n                right: props.inCorner ? theme.spacing(0) : undefined\n                }}\n              color='primary'\n              label={props.count}\n              size='small'/>\n    );\n}","import {nanoid} from 'nanoid';\n\ntype ApiMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n};\n\nexport type eventNamesType = 'message-received' | 'connection-changed';\n\nexport interface messageType extends ApiMessageType {\n    id: string\n}\n\ntype messageReceivedSubscriberType = (messages: Array<messageType>) => void;\ntype connectionChangedSubscriberType = (status: boolean) => void;\ntype subscribersType = {\n    'message-received': Array<messageReceivedSubscriberType>,\n    'connection-changed': Array<connectionChangedSubscriberType>\n}\n\n/** @constant\n *  @type string\n *  @description URL to websocket end-point */\nconst BASE_URL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx';\n\nlet subscribers: subscribersType = {\n    'message-received': [],\n    'connection-changed': []\n};\n\nlet ws: WebSocket | null = null;\n\n/**\n * Notify subscribers about connection closing and restart it's connection.\n */\nfunction closeHandler() {\n    console.log('CLOSE WS');\n    notifyConnectionChanged(false);\n    setTimeout(createChanel, 3000);\n}\n\n/**\n * Notify subscribers about new message was received.\n * @param {MessageEvent} event\n */\nfunction messageHandler(event: MessageEvent) {\n    const newMessages = JSON.parse(event.data);\n    newMessages.forEach((message: messageType) => message.id = nanoid());\n    subscribers['message-received'].forEach(subscriber => subscriber(newMessages));\n}\n\n/**\n * Notify about connection is opened\n */\nfunction openHandler() {\n    notifyConnectionChanged(true);\n}\n\n/**\n * Notify subscribers about connection status was changed.\n * @param {boolean} status - connection ready or not.\n */\nfunction notifyConnectionChanged(status: boolean) {\n    subscribers['connection-changed'].forEach(subscriber => subscriber(status));\n}\n\n/**\n * Clean WebSocket object from listeners and closes connection.\n */\nfunction cleanUpWs() {\n    ws?.removeEventListener('close', closeHandler);\n    ws?.removeEventListener('message', messageHandler);\n    ws?.removeEventListener('open', openHandler);\n    ws?.close();\n}\n\n/**\n * Cleanup old connection and creates new.\n */\nfunction createChanel() {\n    cleanUpWs();\n    ws = new WebSocket(BASE_URL);\n    notifyConnectionChanged(false);\n    ws.addEventListener('close', closeHandler);\n    ws.addEventListener('message', messageHandler);\n    ws.addEventListener('open', openHandler);\n}\n\nexport const chatApi = {\n    //TODO: refactor this\n    subscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName].push(callback);\n        // @ts-ignore\n        return () => subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    //TODO: refactor this too\n    unsubscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    sendMessage(message: string) {\n        ws?.send(message);\n    },\n    connect() {\n        createChanel();\n    },\n    disconnect() {\n        cleanUpWs();\n        subscribers['message-received'] = [];\n        subscribers['connection-changed'] = [];\n    }\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {chatApi, messageType} from '../components/API/chat-api';\nimport {Dispatch} from 'redux';\n\n/**\n * @constant\n * @type number\n * @description Maximal number of posts in chat\n */\nconst MAX_CHAT_MESSAGES = 100;\n\nexport type initialStateType = {\n    messages: Array<messageType>,\n    isConnected: boolean\n};\n\ntype actionsType = inferActionsType<typeof chatActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    messages: [],\n    isConnected: false\n};\n\nconst chatReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/CHAT/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload].slice(-MAX_CHAT_MESSAGES)\n            };\n        case 'SN/CHAT/CHAT_CLEARED':\n            return {\n                ...state,\n                messages: []\n            };\n        case 'SN/CHAT/CONNECTION_CHANGED':\n            return {\n                ...state,\n                isConnected: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const chatActions = {\n    messagesReceived: (messages: Array<messageType>) => ({type: 'SN/CHAT/MESSAGES_RECEIVED', payload: messages} as const),\n    chatCleared: () => ({type: 'SN/CHAT/CHAT_CLEARED'} as const),\n    connectionChanged: (isConnected: boolean) => ({type: 'SN/CHAT/CONNECTION_CHANGED', payload: isConnected} as const)\n}\n\nlet _messageHandler: ((messages: Array<messageType>) => void) | null = null;\n\n/**\n * Helper function for create listener of new messages.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet messageHandlerCreator = (dispatch: Dispatch) => {\n    if (_messageHandler === null) {\n        _messageHandler = (messages) => {\n            dispatch(chatActions.messagesReceived(messages));\n        }\n    }\n\n    return _messageHandler;\n};\n\nlet _connectionHandler: ((status: boolean) => void) | null = null;\n\n/**\n * Helper function for create listener of connection.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet connectionHandlerCreator = (dispatch: Dispatch) => {\n    if (_connectionHandler === null) {\n        _connectionHandler = (status) => {\n            dispatch(chatActions.connectionChanged(status));\n        }\n    }\n\n    return _connectionHandler;\n};\n\n/**\n * Starts connection to chat and will set new messages and connection status to state.\n */\nexport const startMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.connect();\n    chatApi.subscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.subscribe('connection-changed', connectionHandlerCreator(dispatch));\n}\n\n/**\n * Stops listeners, clears chat and disconnects from server.\n */\nexport const stopMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.unsubscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.unsubscribe('connection-changed', connectionHandlerCreator(dispatch));\n    dispatch(chatActions.chatCleared());\n    chatApi.disconnect();\n}\n\n/**\n * Send new message to chat\n * @param {string} message - text of message\n */\nexport const sendMessage = (message: string): thunkType => () => {\n    chatApi.sendMessage(message);\n}\n\nexport default chatReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerContainer\":\"Navbar_drawerContainer__1aacK\"};","import PersonOutlinedIcon from '@material-ui/icons/PersonOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport FeaturedPlayListOutlinedIcon from '@material-ui/icons/FeaturedPlayListOutlined';\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined';\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\nimport {SvgIconTypeMap} from '@material-ui/core';\n\nexport type routesVariants = 'profile' | 'dialogs' | 'news' | 'music' | 'chat' | 'users' | 'settings';\n\nexport type routesType = {\n    [key in routesVariants]: {\n        id: number,\n        title: string,\n        icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>\n    };\n};\n\n/**\n * Object for pages routines in app.\n */\nexport const routes: routesType = {\n    'profile': {id: 1, title: 'Profile', icon: PersonOutlinedIcon},\n    'dialogs': {id: 2, title: 'Dialogs', icon: EmailOutlinedIcon},\n    'news': {id: 3, title: 'News', icon: FeaturedPlayListOutlinedIcon},\n    'music': {id: 4, title: 'Music', icon: LibraryMusicOutlinedIcon},\n    'chat': {id: 5, title: 'Chat', icon: MessageOutlinedIcon},\n    'users': {id: 6, title: 'Users', icon: PeopleAltOutlinedIcon},\n    'settings': {id: 7, title: 'Settings', icon: SettingsOutlinedIcon},\n}\n\n/**\n * Gets route ID.\n * @param {routesVariants} routeName route as string\n */\nexport const getRouteIdByName = (routeName: routesVariants) => {\n    return routeName in routes ? routes[routeName].id : 0;\n}\n\n/**\n * Gets route name as string.\n * @param {number} routeId route ID\n */\nexport const getRouteNameById = (routeId: number) => {\n    return Object.keys(routes).find(route => routes[route as routesVariants].id === routeId);\n}","import React from \"react\";\nimport {Field, FieldProps} from \"formik\";\nimport {validatorType} from \"../../utils/validators\";\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {createStyles, makeStyles} from '@material-ui/core';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype elementPropsType = {\n    error?: boolean,\n    helperText?: string\n};\n\n/**\n * Constructs wrapped component for formik field.\n * @param {Object} field\n * @param {Object | Array} children - React children\n * @param {Object} props - any needed props\n * @constructor\n */\nconst FormControl: React.FC<FieldProps> = ({field, children, ...props}) => {\n    const meta = props.form.getFieldMeta(field.name);\n    const hasError = meta.touched && meta.error;\n    const helperText = meta.error || undefined;\n\n    const elementProps: typeof field & typeof props & elementPropsType = {\n        ...field,\n        ...props\n    };\n\n    if (hasError) elementProps.error = !!hasError;\n    if (helperText) elementProps.helperText = helperText;\n\n    return (\n        <div>\n            {React.isValidElement(children) && React.cloneElement(children, elementProps)}\n        </div>\n    );\n};\n\n/**\n * Material-UI input for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikField: React.FC<FieldProps> = (props) => {\n    const useStyles = makeStyles((theme) =>\n        createStyles({\n            root: {\n                '& > div': {\n                    fontFamily: getFontsWithEmoji(theme)\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <FormControl {...props}><TextField classes={classes}/></FormControl>\n    );\n};\n\n/**\n * Material-UI checkbox for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikCheckbox: React.FC<FieldProps> = (props) => {\n    return (\n        <FormControl {...props}><Checkbox/></FormControl>\n    );\n};\n\n/**\n * Material-UI select for formik field constructor.\n * @param {Object} props - props.children must be transferred for select options and must be an Array\n */\nexport const formikSelect: React.FC<FieldProps> = React.memo((props) => {\n    let options = props.children as Array<{key: string, value: string}>;\n\n    return (\n        <FormControl {...props}>\n            <Select>\n                {options && options.map(option => {\n                    return(\n                        <MenuItem key={option.key} value={option.key}>{option.value}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n});\n\n/**\n * Creates formik field based on transferred component.\n * @param {string | undefined} className\n * @param {string | undefined} placeholder\n * @param {string} name - field name as string\n * @param {React.FC} component - valid React component\n * @param {validatorType} validate - field validator\n * @param {Object} props - any props as object\n */\nexport function createField<namesType extends string> (\n    className: string | undefined,\n    placeholder: string | undefined,\n    name: namesType,\n    component: React.FC<FieldProps>,\n    validate: validatorType,\n    props = {}\n) {\n    return (\n        <Field className={className}\n               placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgVkRounded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm.25 16.996h-2.134c-1.205 0-1.409-.687-2.401-1.679-.897-.897-1.395-.209-1.374 1.068.006.339-.161.611-.566.611-1.264 0-3.08.178-4.918-1.806-1.883-2.033-3.857-6.111-3.857-6.513 0-.237.196-.344.524-.344h2.17c.574 0 .623.284.783.649.667 1.521 2.265 4.574 2.69 2.87.244-.978.344-3.245-.703-3.44-.594-.11.452-.746 1.968-.746.377 0 .786.041 1.205.137.769.179.771.523.761 1.026-.039 1.903-.269 3.184.233 3.507.479.31 1.739-1.717 2.403-3.281.183-.433.219-.722.734-.722h2.654c1.39 0-.182 1.997-1.383 3.557-.968 1.255-.916 1.28.209 2.324.803.744 1.75 1.76 1.75 2.336.002.272-.21.446-.748.446z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgVkRounded);\nexport default __webpack_public_path__ + \"static/media/vk-rounded.850582a3.svg\";\nexport { ForwardRef as ReactComponent };","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport styles from './Navbar.module.css';\nimport {Link, LinkProps, useHistory} from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {getRouteIdByName, getRouteNameById, routes, routesVariants} from '../../Common/Routes';\nimport {useSelector} from 'react-redux';\nimport {getNewMessagesCountSelector} from '../../Common/Selectors/Selectors';\nimport {Counter} from '../../Common/Counter/Counter';\n\ninterface MainMenuItemProps {\n    icon: React.ReactElement;\n    primary: string;\n    secondary?: JSX.Element;\n    to: string;\n    selected?: boolean;\n    onClick: () => void;\n}\n\ntype navbarPropsType = {\n    onMenuClick: () => void\n}\n\n/**\n * Returns one item (<li> for <ul>) of app menu.\n * @param {MainMenuItemProps} props\n * @constructor\n */\nconst MenuItem = (props: MainMenuItemProps) => {\n    const {icon, primary, secondary, to, selected, onClick} = props;\n\n    const renderLink = React.useMemo(() =>\n            React.forwardRef<any, Omit<LinkProps, 'to'>>((itemProps, ref) => (\n                <Link to={to} ref={ref} {...itemProps} />\n            )),\n        [to]);\n\n    return (\n        <li>\n            <ListItem button component={renderLink} selected={selected} onClick={onClick}>\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText style={{display: 'flex'}} primary={primary} secondary={secondary}/>\n            </ListItem>\n        </li>\n    );\n}\n\n/**\n * Returns complete app menu list.\n * @constructor\n */\nconst Navbar: React.FC<navbarPropsType> = (props) => {\n    const history = useHistory();\n    const currentRoute = history.location.pathname.substr(1) as routesVariants;\n    const newMessagesCount = useSelector(getNewMessagesCountSelector);\n    const [selectedIndex, setSelectedIndex] = useState(getRouteIdByName(currentRoute));\n\n    const setActive = (index: number) => {\n        props.onMenuClick();\n        setSelectedIndex(index);\n    };\n\n    const MenuList = Object.keys(routes).map(route => {\n        let currentRoute = route as routesVariants;\n        let currentRouteId = routes[currentRoute].id;\n        let title = routes[currentRoute].title;\n        let icon = React.createElement(routes[currentRoute].icon);\n        let routeName = getRouteNameById(currentRouteId);\n        let secondary = (routeName === 'dialogs' && newMessagesCount > 0) ? <Counter count={newMessagesCount}/> : undefined;\n\n        return <MenuItem to={\"/\" + routeName}\n                         primary={title}\n                         secondary={secondary}\n                         icon={icon}\n                         selected={selectedIndex === currentRouteId}\n                         onClick={() => {setActive(currentRouteId)}}\n                         key={routeName}\n        />\n    });\n\n    return(\n        <div className={styles.drawerContainer}>\n            <List>\n                {MenuList}\n            </List>\n        </div>\n    );\n};\n\nexport default Navbar;","import {Api} from '../components/API/api';\nimport {baseThunkType, captchaResultCodeType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {emptyStatusCallback, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    id: number | null,\n    email: stringOrNull,\n    login: stringOrNull,\n    isAuth: boolean,\n    isFetching: boolean,\n    captchaUrl: stringOrNull\n}\n\ntype actionsType = inferActionsType<typeof authActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false,\n    captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/AUTH/SET_AUTH':\n            return {\n                ...state,\n                ...action.data\n            }\n        case 'SN/AUTH/GET_CAPTCHA_SUCCESS':\n            return {\n                ...state,\n                captchaUrl: action.url\n            }\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    setAuth: (id: number | null, email: stringOrNull, login: stringOrNull, isAuth:boolean) => ({\n        type: 'SN/AUTH/SET_AUTH',\n        data: {id, email, login, isAuth}} as const),\n    getCaptchaSuccess: (url: stringOrNull) => ({type: 'SN/AUTH/GET_CAPTCHA_SUCCESS', url} as const)\n}\n\n/**\n * Gets auth data from backend and set it to state if successful.\n */\nexport const getAuth = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Me();\n\n    if (data === null) {\n        return;\n    }\n\n    let {id, email, login} = data;\n    dispatch(authActions.setAuth(id, email, login, true));\n}\n\n/**\n * Sets user logged-in on backend, if needed captcha then requests it.\n * If successful sets auth data to state.\n * @param {string} email - user email\n * @param {string} password - user password\n * @param {boolean} rememberMe - is need long session\n * @param {string} captcha - captcha text from user\n * @param {(string):void=} errorCallback - callback calls on error from backend (optional)\n */\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string, errorCallback: setStatusType = emptyStatusCallback): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Login(email, password, rememberMe, captcha);\n\n    if (data.error) {\n        if (data.resultCode === captchaResultCodeType.captchaRequired) {\n            await dispatch(getCaptcha());\n        }\n\n        return errorCallback(data.error);\n    }\n\n    await dispatch(getAuth());\n    dispatch(authActions.getCaptchaSuccess(null));\n}\n\n/**\n * Sets user as logged-out on backend, if successful clears auth data in state.\n */\nexport const logout = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Logout();\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(authActions.setAuth(null, null, null, false));\n}\n\n/**\n * Gets url with captcha image from backend and sets it to state if successful.\n */\nexport const getCaptcha = (): thunkType => async (dispatch) => {\n    let url = await Api.Security.getCaptcha();\n\n    if (!url) {\n        return;\n    }\n\n    dispatch(authActions.getCaptchaSuccess(url));\n}\n\nexport default authReducer;","import {getAuth} from './authReducer';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {getNewMessagesCount} from './dialogsReducer';\nimport {getOwnerProfile} from './profileReducer';\n\nexport type initialStateType = {\n    initDone: boolean\n}\n\ntype actionsType = inferActionsType<typeof appActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    initDone: false\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/APP/SET_INIT_DONE':\n            return {\n                ...state,\n                initDone: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const appActions = {\n    setInitDone: () => ({type: 'SN/APP/SET_INIT_DONE'} as const)\n}\n\n/**\n * Gets data, needed for app start.\n */\nexport const makeInit = (): thunkType => async (dispatch) => {\n    try {\n        await dispatch(getAuth());\n        await dispatch(getNewMessagesCount());\n        await dispatch(getOwnerProfile());\n    }\n    finally {\n        dispatch(appActions.setInitDone());\n    }\n}\n\nexport default authReducer;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport styles from './AppHeader.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getIsAuthSelector, getLoginSelector, getOwnerPhotosSelector} from '../../Common/Selectors/Selectors';\nimport {logout} from '../../reducers/authReducer';\nimport logo from '../../assets/images/logo.svg';\nimport userMale from \"../../assets/images/user-male.png\";\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype appHeaderPropsType = {\n    onMenuClick: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginBlock: {\n            display: 'flex',\n            alignItems: 'center',\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n        },\n        login: {\n            ...theme.typography.subtitle1,\n            padding: theme.spacing(1),\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        headerContentWrapper: {\n            justifyContent: 'space-between'\n        },\n        menuButton: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        leftPart: {\n            display: 'flex'\n        }\n    }),\n);\n\n/**\n * Returns complete header for App with logo, menu-button, logout-button and owner-info.\n * @param {appHeaderPropsType} props - props object\n * @param {function():void} props.onMenuClick - function which will calls on menu-button click\n * @constructor\n */\nexport const AppHeader: React.FC<appHeaderPropsType> = (props) => {\n    const classes = useStyles();\n    const isAuth = useSelector(getIsAuthSelector);\n    const login = useSelector(getLoginSelector);\n    const ownerPhotos = useSelector(getOwnerPhotosSelector);\n\n    const dispatch = useDispatch();\n\n    const logoutCallback = () => {\n        dispatch(logout());\n    }\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.headerContentWrapper}>\n                <div className={classes.leftPart}>\n                    <IconButton color='inherit'\n                                edge='start'\n                                className={classes.menuButton}\n                                onClick={props.onMenuClick}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <img className={styles.headerLogo}\n                         src={logo}\n                         alt=\"logo\"/>\n                </div>\n                <div>\n                    {\n                        isAuth\n                            ? <div className={classes.loginBlock}>\n                                <Avatar alt={'Header Avatar'} src={ownerPhotos?.small || userMale}/>\n                                <Typography className={classes.login}>{login}</Typography>\n                                <IconButton onClick={logoutCallback}>\n                                    <ExitToAppOutlinedIcon/>\n                                </IconButton>\n                            </div>\n                            : <NavLink to='/login' className={styles.loginLink}>Login</NavLink>\n                    }\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};","import React, {Dispatch, SetStateAction} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\n\ntype globalAlertPropsType = {\n    isOpen: boolean,\n    text: string,\n    setNotificationOpen: Dispatch<SetStateAction<boolean>>\n}\n\n/**\n * Component for smooth popup alert.\n * @param {globalAlertPropsType} props\n * @constructor\n */\nexport const GlobalAlert: React.FC<globalAlertPropsType> = (props) => {\n    const handleNotificationClose = (event: React.SyntheticEvent | MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.setNotificationOpen(false);\n    };\n\n    return (\n        <Snackbar anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                  open={props.isOpen}\n                  onClose={handleNotificationClose}\n                  autoHideDuration={6000}\n                  TransitionComponent={Slide}\n                  message={props.text}\n        />\n    );\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    blockWidth?: string,\n    updateStatus: (status: string) => void\n};\n\n/**\n * Returns status block or input for editing status.\n * @param {propsType} props - props object\n * @param {string} props.status - status text\n * @param {boolean} props.isOwner - is user owner of this page\n * @param {boolean} props.statusFetching - fetching in progress flag\n * @param {string=} props.blockWidth - with of block (optional)\n * @param {function(status: string):void} props.updateStatus - callback for set status\n * @constructor\n */\nconst ProfileStatus: React.FC<propsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            statusDiv: {\n                display: 'flex',\n                maxWidth: props.blockWidth || 'auto',\n            },\n            statusInput: {\n                maxWidth: props.blockWidth || 'auto',\n                margin: theme.spacing(1),\n            },\n            statusText: {\n                overflowWrap: 'anywhere',\n                flexGrow: 1,\n                whiteSpace: 'pre-line'\n            },\n            divider: {\n                maxWidth: props.blockWidth || 'auto',\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let statusText = props.status || 'No status';\n\n    let [isStatusEditing, setStatusEditing] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const toggleEditing = () => {\n        setStatusEditing(!isStatusEditing);\n\n        if (isStatusEditing && status && (statusText !== status)) {\n            props.updateStatus(status);\n        }\n    }\n\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setStatus(event.target.value);\n    }\n\n    if (props.statusFetching) {\n        return <Preloader notCentered={true}/>\n    }\n\n    return isStatusEditing && props.isOwner\n        ? <Tooltip title=\"Click to empty place to save\" aria-label=\"save status\" placement=\"right\">\n            <TextField autoFocus={true}\n                       onBlur={toggleEditing}\n                       onChange={onStatusChange}\n                       className={classes.statusInput}\n                       value={status}\n                       multiline={true}\n            />\n          </Tooltip>\n        : <React.Fragment>\n            <div className={classes.statusDiv} onClick={toggleEditing}>\n                {props.isOwner\n                    ? <Tooltip title=\"Click to edit\" aria-label=\"edit status\" placement=\"right\">\n                        <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                    </Tooltip>\n                    : <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                }\n            </div>\n            <Divider className={classes.divider}/>\n        </React.Fragment>;\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HttpIcon from '@material-ui/icons/Http';\nimport {contactsType} from '../../../../../types';\nimport {ReactComponent as VkRounded} from '../../../../../assets/images/vk-rounded.svg';\n\ntype contactKeysType = keyof contactsType;\n\ntype propsType = {\n    contactTitle: contactKeysType,\n    contactInfo: string\n}\n\n/**\n * Returns one icon-button as anchor with contact.\n * @param {{\n * contactTitle: contactKeysType\n * contactInfo: string\n * }} props - props like contactsType\n * @param {contactKeysType} props.contactTitle - name of contact\n * @param {string} props.contactInfo - contact link\n * @constructor\n */\nexport const ProfileContact: React.FC<propsType> = ({contactTitle, contactInfo}) => {\n    let Icon = <div/>;\n\n    switch (contactTitle) {\n        case 'facebook':\n            Icon = <FacebookIcon/>;\n            break;\n        case 'website':\n            Icon = <LanguageIcon/>;\n            break;\n        case 'vk':\n            Icon = <SvgIcon component={VkRounded}/>;\n            break;\n        case 'twitter':\n            Icon = <TwitterIcon/>;\n            break;\n        case 'instagram':\n            Icon = <InstagramIcon/>;\n            break;\n        case 'youtube':\n            Icon = <YouTubeIcon/>;\n            break;\n        case 'github':\n            Icon = <GitHubIcon/>;\n            break;\n        case 'mainLink':\n            Icon = <HttpIcon/>;\n            break;\n    }\n\n    return (\n        <IconButton color=\"primary\" component='a' rel={'noreferrer'} href={contactInfo} target={'_blank'}>\n            {Icon}\n        </IconButton>\n    );\n}","import React from \"react\";\nimport {contactsType} from '../../../../types';\nimport {ProfileContact} from './ProfileContact/ProfileContact';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    aboutMe: string,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    contacts: contactsType,\n    isOwner: boolean,\n    blockWidth: string,\n    setEditMode: () => void\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfo: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > div': {\n                marginLeft: theme.spacing(2),\n                marginRight: theme.spacing(2),\n            },\n        },\n        additionalInfoItem: {\n            marginTop: theme.spacing(1)\n        },\n        wrapped: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        contacts: {\n            display: 'flex',\n            alignItems: 'center',\n            width: '100%'\n        }\n    }),\n);\n\n/**\n * Returns array of ProfileContacts if contact value is not empty.\n * @param {contactsType} contacts - array of contacts from profile.\n */\nfunction getContactsList (contacts: contactsType) {\n    return Object.keys(contacts).map((key) => {\n        let contactValue = contacts[key as keyof contactsType];\n\n        return contactValue\n            ? <ProfileContact key={key} contactTitle={key as keyof contactsType} contactInfo={contactValue}/>\n            : null;\n    })\n}\n\n/**\n * Returns additional info about user with 3 text blocks and 1 block of contact-links.\n * If user is owner of profile also returns button for edit data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let ContactsList = getContactsList(props.contacts);\n    let isNeedContacts = !ContactsList.every(contact => contact === null);\n\n    return (\n        <div className={classes.additionalInfo} style={{maxWidth: props.blockWidth}}>\n            <div className={classes.additionalInfoItem}>\n                <Typography>About Me: {props.aboutMe || 'Empty'}</Typography>\n                <Typography>Looking for a job: {props.lookingForAJob ? 'Yes' : 'No'}</Typography>\n                {props.lookingForAJob && <Typography className={classes.wrapped}>\n                    Job description: {props.lookingForAJobDescription}\n                </Typography>}\n            </div>\n\n            {isNeedContacts\n                ? <div className={classes.contacts}>\n                    <div>\n                        <Typography>Contacts:</Typography>\n                    </div>\n                    <div  className={classes.wrapped}>\n                        {ContactsList}\n                    </div>\n                </div>\n                : <div className={classes.contacts}>\n                    <Typography>no contacts</Typography>\n                </div>\n            }\n            {props.isOwner && <Button color='primary' variant='contained' onClick={props.setEditMode}>Edit info</Button>}\n        </div>\n    );\n};\n\nexport default AdditionalInfo","import React, {useState} from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport {createField, FormikCheckbox, FormikField} from '../../../../../Common/FormComponents/FieldsComponentsFormik';\nimport {required, validatorCreator} from '../../../../../utils/validators';\nimport {ErrorMessage} from 'formik';\nimport {fieldNamesType} from '../AdditionalInfoForm';\nimport {contactsType} from '../../../../../types';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoRow: {\n            display: 'flex',\n            justifyContent: 'start',\n            alignItems: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n            '& > p': {\n                flexBasis: '92px',\n                textAlign: 'end',\n                margin: theme.spacing(1),\n            },\n            '& > div': {\n                flexGrow: 1,\n                display: 'flex'\n            }\n        },\n        stretched: {\n            flexGrow: 1\n        },\n        errorText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n    }),\n);\n\ntype formBasicInfoPropsType = {\n    checked: boolean,\n    triggerCheckbox: () => void\n}\n\n/**\n * Returns fields: fullName, aboutMe, lookingForAJob, lookingForAJobDescription\n * for profile-info form with needed handlers.\n * @param {formBasicInfoPropsType} props\n * @constructor\n */\nexport const FormBasicInfo: React.FC<formBasicInfoPropsType> = (props) => {\n    const classes = useStyles();\n    const [checked, setChecked] = useState(props.checked);\n\n    /**\n     * Checkbox trigger handler. Sets value to Checkbox and to formik differently.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     * @param event\n     */\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.triggerCheckbox();\n        setChecked(event.target.checked);\n    };\n\n    return (\n        <Card variant={'outlined'}>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Full name: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Your name',\n                    'fullName',\n                    FormikField,\n                    validatorCreator([required])\n                )}\n                <ErrorMessage name='fullName'/>\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>About me: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about you',\n                    'aboutMe',\n                    FormikField,\n                    validatorCreator([])\n                )}\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Look for job: </Typography>\n                {createField<fieldNamesType>(\n                    undefined,\n                    undefined,\n                    'lookingForAJob',\n                    FormikCheckbox,\n                    validatorCreator([]),\n                    {checked, color: 'primary', onChange}\n                )}\n            </div>\n            <div className={classes.errorText}><ErrorMessage name={'lookingForAJob'}/></div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Skills: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about job or skills',\n                    'lookingForAJobDescription',\n                    FormikField,\n                    validatorCreator([]),\n                    {multiline: true}\n                )}\n            </div>\n        </Card>\n    );\n}\n\ntype formContactsInfoPropsType = {\n    contacts: contactsType\n}\n\n/**\n * Returns fields with contacts for profile-info form.\n * @param {formContactsInfoPropsType} props\n * @constructor\n */\nexport const FormContactsInfo: React.FC<formContactsInfoPropsType> = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Card variant={'outlined'}>\n            {Object.keys(props.contacts).map(key => {\n                return (\n                    <div key={key} className={classes.additionalInfoRow}><Typography>{key}:</Typography>\n                        {createField(\n                            classes.stretched,\n                            key + ' link with http',\n                            'contacts.' + key,\n                            FormikField,\n                            validatorCreator([])\n                        )}\n                    </div>\n                );\n            })}\n        </Card>\n    );\n}","import React from \"react\";\nimport {contactsType, profileType} from '../../../../types';\nimport Button from '@material-ui/core/Button';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {useDispatch} from 'react-redux';\nimport {saveProfile} from '../../../../reducers/profileReducer';\nimport {FormBasicInfo, FormContactsInfo} from './AdditionalInfoParts/AdditionalInfoParts';\n\ntype propsType = {\n    profile: profileType,\n    onChancel: () => void\n}\n\ntype formDataType = profileType;\nexport type fieldNamesType = keyof formDataType;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoForm: {\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        buttonsWrapper: {\n            display: 'flex',\n            justifyContent: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        infoWrapper: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                flexGrow: 1,\n                flexBasis: '460px',\n            }\n        },\n        statusText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n        errorsWrapper: {\n            display: 'flex',\n            justifyContent: 'center'\n        }\n    }),\n);\n\n/**\n * Sets every contact value to empty string if it's value is null.\n * Because Material-UI not allow null as value to input.\n * @param {contactsType} contacts - object with contacts\n */\nfunction normalizeContacts (contacts: contactsType) {\n    for (let contact in contacts) {\n        if (contacts.hasOwnProperty(contact)) {\n            contacts[contact as keyof contactsType] = contacts[contact as keyof contactsType] || '';\n        }\n\n    }\n\n    return contacts;\n}\n\n/**\n * Returns form with profile-info data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfoForm: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    let initialValues = props.profile;\n    initialValues.contacts = normalizeContacts(initialValues.contacts);\n\n    const formik = useFormik({\n        initialValues: props.profile,\n        enableReinitialize: true,\n        onSubmit: onSubmit,\n    });\n\n    async function onSubmit (formData: profileType, {setSubmitting, setFieldError, setStatus}: FormikHelpers<profileType>) {\n        let hasApiErrors = '';\n\n        try {\n            await dispatch(saveProfile(formData,  setFieldError, setStatus));\n        }\n        catch (error) {\n            hasApiErrors = error;\n        }\n        finally {\n            setSubmitting(false);\n        }\n\n        if (!hasApiErrors && formik.submitCount > 0) {\n            props.onChancel();\n        }\n    }\n\n    /**\n     * Handler for manually trigger lookingForAJob-checkbox in formik.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     */\n    function triggerCheckbox() {\n        formik.setFieldValue(\"lookingForAJob\", !formik.values.lookingForAJob);\n    }\n\n    return (\n        <form className={classes.additionalInfoForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n            <div className={classes.infoWrapper}>\n                <FormBasicInfo checked={props.profile.lookingForAJob} triggerCheckbox={triggerCheckbox}/>\n                <FormContactsInfo contacts={props.profile.contacts}/>\n            </div>\n            <div className={classes.errorsWrapper}>\n                <div className={classes.statusText}>{formik.status}</div>\n            </div>\n            <div className={classes.buttonsWrapper}>\n                <Button color='primary'\n                        variant='contained'\n                        type='submit'\n                        disabled={formik.isSubmitting || !formik.isValid || !formik.dirty}\n                >Save</Button>\n                <Button color='secondary' variant='contained' onClick={props.onChancel}>Cancel</Button>\n            </div>\n            </FormikProvider>\n        </form>\n    );\n}\n\nexport default AdditionalInfoForm;","import React, {ChangeEvent} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {savePhoto} from '../../../../../reducers/profileReducer';\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        input: {\n            display: 'none',\n        },\n        label: {\n            display: 'flex',\n            justifyContent: 'center',\n        }\n    }),\n);\n\n/**\n * Returns styled button for upload user's avatar.\n * @constructor\n */\nexport const AvatarUploadButton: React.FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onFileChange(event: ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n        }\n\n        dispatch(savePhoto(event.target.files[0]));\n    }\n\n    return (\n        <>\n            <input className={classes.input}\n                   accept='image/*'\n                   type='file'\n                   id='icon-button-file'\n                   onChange={onFileChange}\n            />\n            <label htmlFor='icon-button-file' className={classes.label}>\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        startIcon={<PhotoCamera/>}\n                >\n                    Upload\n                </Button>\n            </label>\n        </>\n    );\n}","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {startRefreshDialog} from '../../../../../reducers/dialogsReducer';\nimport {getRouteNameById, routes} from '../../../../../Common/Routes';\nimport Button from '@material-ui/core/Button';\n\ntype addDialogButtonPropsType = {\n    userId: number\n}\n\n/**\n * Returns button for start new dialog.\n * @param {addDialogButtonPropsType} props - props object\n * @param {number} props.userId - user's profile ID\n * @constructor\n */\nexport const AddDialogButton: React.FC<addDialogButtonPropsType> = (props) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    /**\n     * Add new dialog or refresh existing.\n     * Redirects to new dialog's route.\n     */\n    const addDialog = () => {\n        dispatch(startRefreshDialog(props.userId));\n        history.push(`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`);\n    }\n\n    return (\n        <Button variant='contained' color='primary' onClick={addDialog}>Start dialog</Button>\n    );\n}","import {stringOrNull} from '../../../../types';\nimport React from 'react';\nimport userMale from '../../../../assets/images/user-male.png';\nimport Avatar from '@material-ui/core/Avatar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AvatarUploadButton} from './AvatarUploadButton/AvatarUploadButton';\nimport {AddDialogButton} from './AddDialogButton/AddDialogButton';\n\ntype profileAvatarPropsType = {\n    largePhoto: stringOrNull,\n    isOwner: boolean,\n    userId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        avatarWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(38),\n            height: theme.spacing(38),\n        }\n    }),\n);\n\n/**\n * Returns avatar-block with avatar-image and button for upload new.\n * If user is not owner of this profile returns avatar without button.\n * @param {profileAvatarPropsType} props - url to image, user ID and isOwner.\n * @constructor\n */\nexport const ProfileAvatar: React.FC<profileAvatarPropsType> = (props) => {\n    const classes = useStyles();\n    const profileAvatarLarge = props.largePhoto || userMale;\n\n    return (\n        <div className={classes.avatarWrapper}>\n            <Avatar className={classes.large} src={profileAvatarLarge}/>\n            {props.isOwner ? <AvatarUploadButton/> : <AddDialogButton userId={props.userId} />}\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/social-network-pattern-background.066f3894.jpg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport AdditionalInfo from \"./AdditionalInfo/AdditionalInfo\";\nimport AdditionalInfoForm from \"./AdditionalInfoForm/AdditionalInfoForm\";\nimport {profileType} from '../../../types';\nimport {ProfileAvatar} from './ProfileAvatar/ProfileAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport ProfileBackground from '../../../assets/images/social-network-pattern-background.jpg';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nexport type propsType = {\n    profile: profileType | null,\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    updateStatus: (status: string) => void,\n}\n\nconst wallpaperBlend = 'linear-gradient(rgba(255,255,255,.95), rgba(255,255,255,.95))';\nconst blockWidth = '30ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        wallpaper: {\n            backgroundImage: `${wallpaperBlend}, url(${ProfileBackground})`,\n            backgroundSize: '40%',\n            margin: theme.spacing(-3)\n        },\n        profileDescriptionWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n            margin: theme.spacing(0, 4),\n        },\n        profileDescription: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: theme.spacing(1)\n        }\n    }),\n);\n\n/**\n * Returns profile-block with avatar, status and profile info.\n * @param {propsType} props - props\n * @constructor\n */\nconst ProfileInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let [isEditMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.wallpaper}>\n            <div className={classes.profileDescription}>\n                <ProfileAvatar largePhoto={props.profile.photos.large} isOwner={props.isOwner} userId={props.profile.userId}/>\n                <div className={classes.profileDescriptionWrapper}>\n                    <Typography variant='h4'>{props.profile.fullName}</Typography>\n                    <ProfileStatus status={props.status}\n                                   updateStatus={props.updateStatus}\n                                   statusFetching={props.statusFetching}\n                                   isOwner={props.isOwner}\n                                   blockWidth={blockWidth}\n                    />\n                    {isEditMode\n                            ? <AdditionalInfoForm onChancel={() => setEditMode(false)}\n                                                  profile={props.profile}\n                            />\n                            : <AdditionalInfo aboutMe={props.profile.aboutMe}\n                                              lookingForAJob={props.profile.lookingForAJob}\n                                              lookingForAJobDescription={props.profile.lookingForAJobDescription}\n                                              contacts={props.profile.contacts}\n                                              setEditMode={() => setEditMode(true)}\n                                              isOwner={props.isOwner}\n                                              blockWidth={blockWidth}\n                            />\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport Post from '../../../Common/Post/Post';\nimport {postsDataType, stringOrNull} from '../../../types';\nimport List from '@material-ui/core/List';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AddMessageForm} from '../../../Common/AddMessageForm/AddMessageForm';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Typography from '@material-ui/core/Typography';\nimport {PostActions} from '../../../Common/Post/PostActions/PostActions';\n\nexport type myPostsPropsType = {\n    postsData: Array<postsDataType>,\n    avatar: stringOrNull,\n    userName: stringOrNull\n}\n\n/**\n * @const\n * @type string\n * @description block max width.\n */\nconst MAX_WIDTH = '30ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        postsList: {\n            width: '100%',\n            maxWidth: MAX_WIDTH,\n            backgroundColor: theme.palette.background.paper,\n            display: 'flex',\n            flexDirection: 'column-reverse'\n        },\n        postsTitle: {\n            margin: theme.spacing(2, 0)\n        },\n        postBlock: {\n            padding: theme.spacing(1)\n        }\n    })\n);\n\n/**\n * Component with title, form and list of posts.\n * @param {myPostsPropsType} props\n * @constructor\n */\nconst MyPosts: React.FC<myPostsPropsType> = (props) => {\n    const classes = useStyles();\n\n    let posts = props.postsData.map( (post) =>\n        <Post key={'MyPost' +post.id}\n              postId={post.id}\n              action={PostActions.textWithLikes(post.text, post.id, post.likes)}\n              avatar={props.avatar}\n              userName={props.userName}\n              blockWidth={MAX_WIDTH}\n        />\n    );\n\n    return (\n        <div className={classes.postBlock}>\n            <Typography variant='h5' className={classes.postsTitle}>Posts</Typography>\n            <AddMessageForm blockWidth={MAX_WIDTH}\n                            sendMessage={profileActions.sendPost}\n                            buttonText='Add Post'\n                            minTextLength={2}\n                            maxTextLength={100}\n            />\n            <List className={classes.postsList}>\n                {posts}\n            </List>\n        </div>\n    );\n};\n\nexport default MyPosts;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport {connect} from \"react-redux\";\nimport MyPosts, {myPostsPropsType} from \"./MyPosts\";\nimport {appStateType} from '../../../redux/reduxStore';\n\nlet mapStateToProps = (state: appStateType) => {\n    return (\n        {\n            postsData: state.profilePage.postsData,\n            avatar: state.profilePage.profile ? state.profilePage.profile.photos.small : '',\n            userName: state.auth.login\n        }\n    );\n};\n\nconst MyPostsContainer = connect<myPostsPropsType, {}, {}, appStateType>(\n    mapStateToProps,\n    {}\n)(MyPosts);\n\nexport default MyPostsContainer;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport ProfileInfo, {propsType} from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\ntype profilePropsType = propsType;\n\n/**\n * Whole profile-page with info about user and posts-block.\n * @param {profilePropsType} props\n * @constructor\n */\nconst Profile: React.FC<profilePropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         statusFetching={props.statusFetching}\n                         isOwner={props.isOwner}\n            />\n            <MyPostsContainer/>\n        </div>);\n};\n\nexport default Profile;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus, updateStatus} from \"../../reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport withAuthRedirect from \"../../Hocs/withAuthRedirect\";\nimport {MatchParams, profileType} from \"../../types\";\nimport {appStateType} from \"../../redux/reduxStore\";\n\ntype matchType = RouteComponentProps<MatchParams>;\n\ntype mapStatePropsType = {\n    profile: profileType | null,\n    status: string,\n    statusFetching: boolean\n};\n\ntype mapDispatchPropsType = {\n    getProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n    updateStatus: (status: string) => void,\n};\n\ntype ownPropsType = {\n};\n\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType;\n\n/**\n * Class component which returns profile-page.\n * If not logged-in will redirect to login.\n */\nclass ProfileContainer extends React.Component<propsType & matchType> {\n    getProfileData() {\n        this.props.getProfile(parseInt(this.props.match.params.userId));\n        this.props.getStatus(parseInt(this.props.match.params.userId));\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    componentDidUpdate(prevProps: mapStatePropsType  & matchType, prevState: appStateType, snapshot: any) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.getProfileData();\n        }\n    }\n    render() {\n        return <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\n    }\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        statusFetching: state.profilePage.statusFetching\n    }\n}\n\nconst mapDispatchToProps: mapDispatchPropsType = {\n    getProfile,\n    getStatus,\n    updateStatus,\n}\n\nexport default connect<\n    mapStatePropsType,\n    mapDispatchPropsType,\n    ownPropsType,\n    appStateType\n    >(mapStateToProps, mapDispatchToProps) (withRouter(withAuthRedirect(ProfileContainer)));","import {stringOrNull} from '../../../types';\nimport {maxLengthCreator, required, validatorCreator} from '../../../utils/validators';\nimport React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport Button from '@material-ui/core/Button';\nimport {useDispatch} from 'react-redux';\nimport {login} from '../../../reducers/authReducer';\nimport {createField, FormikCheckbox, FormikField} from '../../../Common/FormComponents/FieldsComponentsFormik';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nlet maxLength30 = maxLengthCreator(30);\n\nexport type loginFormDataType = {\n    login: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\ntype fieldNamesType = keyof loginFormDataType\ntype loginFormPropsType = {\n    captchaUrl: stringOrNull\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginForm: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '20ch',\n            margin: theme.spacing(1),\n            '& > *': {\n                display: 'flex',\n            },\n        },\n        checkboxWrapper: {\n            alignItems: 'center'\n        },\n        loginInput: {\n            flexGrow: 1,\n            margin: theme.spacing(1),\n        },\n        errorText: {\n            color: 'red',\n            alignSelf: 'center',\n            marginBottom: theme.spacing(1),\n        }\n    }),\n);\n\n/**\n * Form for login process with two static inputs, one optional input with image for captcha, checkbox and button.\n * @param {loginFormPropsType} props - url to captcha img\n * @constructor\n */\nconst LoginForm: React.FC<loginFormPropsType> = (props) => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const initialValues = {\n        login: '',\n        password: '',\n        rememberMe: false,\n        captcha: ''\n    }\n\n    const onSubmit = (formData: loginFormDataType, {setSubmitting}: FormikHelpers<loginFormDataType>) => {\n        dispatch(login(formData.login, formData.password, formData.rememberMe, formData.captcha, formik.setStatus));\n        setSubmitting(false);\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n    });\n\n    return (\n        <form className={classes.loginForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter login',\n                    'login',\n                    FormikField,\n                    validatorCreator([required, maxLength30])\n                )}\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter password',\n                    'password',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {type: 'password'}\n                )}\n                <div className={classes.checkboxWrapper}>\n                    {createField<fieldNamesType>(\n                        undefined,\n                        undefined,\n                        'rememberMe',\n                        FormikCheckbox,\n                        validatorCreator([]),\n                        {color: 'primary'}\n                    )}\n                    <span>remember me</span>\n                </div>\n                {props.captchaUrl && <img alt={'captcha'} src={props.captchaUrl}/>}\n                {props.captchaUrl && createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter symbols from image',\n                    'captcha',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {autoComplete: 'off'}\n                )}\n            </FormikProvider>\n            {formik.status && <div className={classes.errorText}>{formik.status}</div>}\n            <Button variant='contained'\n                    color='primary'\n                    type='submit'\n                    disabled={formik.isSubmitting || !formik.isValid}\n            >\n                Login\n            </Button>\n        </form>\n    );\n}\n\nexport default LoginForm;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {getCaptchaUrlSelector, getIsAuthSelector} from '../../Common/Selectors/Selectors';\nimport LoginForm from './LoginForm/LoginForm';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        loginPage: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '80vh'\n        }\n    }),\n);\n\n/**\n * Login-page with header and form.\n * @constructor\n */\nexport const Login: React.FC = () => {\n    const classes = useStyles();\n    const auth = useSelector(getIsAuthSelector);\n    const captchaUrl = useSelector(getCaptchaUrlSelector);\n\n    if (auth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={classes.loginPage}>\n            <Typography variant='h4'>Login</Typography>\n            <LoginForm captchaUrl={captchaUrl}/>\n        </div>\n    );\n}","import React from 'react';\n\nexport const NotFound: React.FC = () => {\n    return(\n        <div>404 Not Found</div>\n    );\n}","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        fallbackWrapper: {\n            display: 'flex',\n            flexDirection: 'column'\n        },\n        fallbackText: {\n            display: 'flex',\n            flexBasis: '80vh',\n            alignItems: 'center',\n            justifyContent: 'center',\n        }\n    }),\n);\n\nexport const SuspenseFallback: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.fallbackWrapper}>\n            <Container className={classes.fallbackText}>\n                <Typography color='textSecondary' variant='h3'>Loading...</Typography>\n            </Container>\n        </div>\n    );\n}","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\n\n/**\n * Page which will show to user after app-initialization end.\n * @constructor\n */\nconst StartPage = () => {\n    return <Redirect to={'/profile'}/>;\n}\n\nexport default StartPage;","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {Route, Switch} from 'react-router-dom';\nimport {getRouteNameById, routes} from './Common/Routes';\nimport {Login} from './components/Login/Login';\nimport {NotFound} from './components/NotFound';\nimport {SuspenseFallback} from './Common/SuspenseFallback/SuspenseFallback';\nimport StartPage from './Pages/StartPage';\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/Dialogs'));\nconst ChatPage = React.lazy(() => import('./Pages/ChatPage'));\n\n/**\n * Returns correct page depends on route, uses suspend for lazy-load.\n * @constructor\n */\nexport const Content: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            content: {\n                flexGrow: 1,\n                width: 330,\n                padding: theme.spacing(3),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    let DialogsComponent = () => <DialogsContainer/>;\n    let ProfileComponent = () => <ProfileContainer/>;\n\n    return (\n        <main className={classes.content}>\n            <Toolbar/>\n            <React.Suspense fallback={<SuspenseFallback/>}>\n                <Switch>\n                    <Route exact path=\"/\" component={StartPage}/>\n                    <Route path={'/' + getRouteNameById(routes.profile.id) + '/:userId?'} component={ProfileComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.dialogs.id) + '/:userId?'} component={DialogsComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.news.id)} component={News}/>\n                    <Route path={'/' + getRouteNameById(routes.music.id)} component={Music}/>\n                    <Route path={'/' + getRouteNameById(routes.users.id)} component={UsersContainer}/>\n                    <Route path={'/' + getRouteNameById(routes.settings.id)} component={Settings}/>\n                    <Route path={'/' + getRouteNameById(routes.chat.id)} component={ChatPage}/>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"*\" component={NotFound}/>\n                </Switch>\n            </React.Suspense>\n        </main>\n    );\n}","import React from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {makeInit} from \"./reducers/appReducer\";\nimport Preloader from \"./Common/Preloader/Preloader\";\nimport {AppHeader} from './components/Header/AppHeader';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {GlobalAlert} from './Common/GlobalAlert/GlobalAlert';\nimport {Content} from './Content';\nimport {getAppInitDoneSelector} from './Common/Selectors/Selectors';\n\nconst DRAWER_WIDTH = 240;\n\n/**\n * Returns whole app (header, menu and needed page).\n * @constructor\n */\nconst App: React.FC = () => {\n    const dispatch = useDispatch();\n    const isInitDone = useSelector(getAppInitDoneSelector);\n    const [isNotificationOpen, setNotificationOpen] = React.useState(false);\n    const [notificationText, setNotificationText] = React.useState('');\n    const [isMenuOpen, setMenuOpen] = React.useState<boolean>(false);\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n            },\n            drawer: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n                [theme.breakpoints.down('xs')]: {\n                    display: isMenuOpen ? '' : 'none',\n                },\n                flexShrink: 0,\n            },\n            drawerPaper: {\n                width: DRAWER_WIDTH,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n            },\n        }),\n    );\n\n    /**\n     * Catch error reason and set alert-data.\n     * @param reason\n     */\n    const catchGenericError = (reason: PromiseRejectionEvent) => {\n        let response = reason.reason.response;\n\n        if (response) {\n            setNotificationText('ERROR: server returned ' + response.status + ' ' + response.statusText);\n        } else {\n            setNotificationText('ERROR: server is not respond!');\n        }\n\n        setNotificationOpen(true);\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('unhandledrejection', catchGenericError);\n        dispatch(makeInit());\n\n        // returned function will be called on component unmount\n        return () => {\n            window.removeEventListener('unhandledrejection', catchGenericError);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const classes = useStyles();\n\n    if (!isInitDone) {\n        return <Preloader/>\n    }\n\n    function onMenuClick() {\n        setMenuOpen(!isMenuOpen);\n    }\n\n    return (\n        <div className={classes.root}>\n            <GlobalAlert isOpen={isNotificationOpen}\n                         text={notificationText}\n                         setNotificationOpen={setNotificationOpen}\n            />\n            <AppHeader onMenuClick={onMenuClick}/>\n            <Drawer className={classes.drawer} variant='permanent' classes={{paper: classes.drawerPaper}}>\n                <Toolbar />\n                <Navbar onMenuClick={onMenuClick}/>\n            </Drawer>\n            <Content/>\n        </div>\n    );\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer from \"../reducers/profileReducer\";\nimport dialogsReducer from \"../reducers/dialogsReducer\";\nimport usersReducer from \"../reducers/usersReducer\";\nimport authReducer from \"../reducers/authReducer\";\nimport appReducer from \"../reducers/appReducer\";\nimport thunk from \"redux-thunk\";\nimport chatReducer from '../reducers/chatReducer';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    chat: chatReducer\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type appStateType = ReturnType<rootReducerType>;\nexport type inferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto'\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\nimport {\n    basicResponseType,\n    captchaResultCodeType, messageListType, Override,\n    photosType,\n    profileType,\n    resultCodesType, stringOrNull, userListType, usersType\n} from \"../../types\";\nimport {filterType} from '../../reducers/usersReducer';\n\n/**\n * @const\n * @description Axios object with basic settings\n */\nconst DEFAULT_API = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '4b793204-e0f1-45c5-b96a-007d58f175b3'}\n});\n\ntype meResponseType = Override<basicResponseType, {\n    data: {\n        id: number,\n        email: string,\n        login: string\n    }\n}>;\n\ntype loginResponseType = Override<basicResponseType, {\n    data: {\n        id: number\n    },\n    resultCode: resultCodesType | captchaResultCodeType\n}>;\n\ntype updateProfileResponseType = Override<basicResponseType, {\n    fieldsErrors: Array<string>\n}>;\n\ntype savePhotoResponseType = Override<basicResponseType, {\n    data: {\n        photos: photosType,\n    },\n    fieldsErrors: Array<string>\n}>;\n\ntype captchaResponseType = {\n    url: string\n}\n\ntype getUsersResponseType = {\n    items: Array<usersType>,\n    totalCount: number,\n    error: string | null\n}\n\ntype dialogsListResponseType = Array<userListType>\n\ntype dialogsSendMessageResponseType = Override<basicResponseType, {\n    data: {\n        message: messageListType\n    },\n    fieldsErrors: Array<string>\n}>\n\ntype getMessagesListResponseType = {\n    items: Array<messageListType>,\n    totalCount: number,\n    error: stringOrNull\n}\n\n/**\n * @const\n * @description Api-object (documentation see at https://social-network.samuraijs.com/docs)\n */\nexport const Api = {\n    Users: {\n        getUsers: (pageSize = 4, currentPage = 0, filter: filterType) => {\n            return DEFAULT_API.get<getUsersResponseType>('users',\n                {params: {count: pageSize, page: currentPage + 1, term: filter.searchTerm, friend: filter.friend}}\n            ).then(response => {\n                if (response.data.items.length === 0) {\n                    return null;\n                }\n\n                return response.data;\n            });\n        },\n        unfollow: (userId: number) => {\n            return DEFAULT_API.delete<basicResponseType>('follow/' + userId)\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        follow: (userId: number) => {\n            return DEFAULT_API.post<basicResponseType>('follow/' + userId).then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        }\n    },\n    Auth: {\n        Me: () => {\n            return DEFAULT_API.get<meResponseType>('auth/me/').then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return response.data.data;\n                }\n\n                return null;\n            });\n        },\n        Login: (email: string, password: string, rememberMe: boolean, captcha: string) => {\n            return DEFAULT_API.post<loginResponseType>('auth/login/', {email, password, rememberMe, captcha}).then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return {result: response.data.data};\n                }\n\n                let message = response.data.messages.length ? response.data.messages[0] : 'Unknown error';\n                let resultCode = response.data.resultCode || -1;\n\n                return {error: message, resultCode: resultCode};\n            });\n        },\n        Logout: () => {\n            return DEFAULT_API.delete<basicResponseType>('auth/login/').then(response => {\n                return response.data.resultCode === resultCodesType.Success;\n            });\n        }\n    },\n    Profile: {\n        getProfile: (userId: number) => {\n            return DEFAULT_API.get<profileType>('profile/' + userId)\n                .then( response => {\n                    if (!response.data) {\n                        return null;\n                    }\n\n                    return response.data;\n                });\n        },\n        getStatus: (userId: number) => {\n            return DEFAULT_API.get<string>('profile/status/' + userId)\n                .then( response => {\n                    return response.data;\n                });\n        },\n        updateStatus: (status: string) => {\n            return DEFAULT_API.put<basicResponseType>('profile/status', {status})\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        savePhoto: (file: File) => {\n            const formData = new FormData();\n            formData.append('image', file);\n\n            return DEFAULT_API.put<savePhotoResponseType>('profile/photo', formData, {\n                headers: {'Content-Type': 'multipart/form-data'}\n            })\n                .then( response => {\n                    if (response.data.resultCode === 0) {\n                        return response.data.data.photos;\n                    }\n                });\n        },\n        saveProfile: (profile: profileType) => {\n            return DEFAULT_API.put<updateProfileResponseType>('profile', profile)\n                .then(response => {\n                    if (response.data.resultCode === resultCodesType.Success) {\n                        return Promise.resolve();\n                    } else {\n                        let reason = response.data.messages.length ? response.data.messages : ['Unknown error. (unknown)'];\n                        return Promise.reject(reason);\n                    }\n                });\n        }\n    },\n    Security: {\n        getCaptcha: () => {\n            return DEFAULT_API.get<captchaResponseType>('security/get-captcha-url')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data.url;\n                })\n        }\n    },\n    Dialogs: {\n        getDialogsList: () => {\n            return DEFAULT_API.get<dialogsListResponseType>('dialogs')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        startRefreshDialog: (userId: number) => {\n            return DEFAULT_API.put<basicResponseType>('dialogs/' + userId)\n                .then(response => {\n                    return response.data.resultCode === resultCodesType.Success\n                })\n        },\n        getMessagesList: (userId: number, page: number = 1, count: number = 10) => {\n            return DEFAULT_API.get<getMessagesListResponseType>('dialogs/' + userId + '/messages',\n                {params: {count: count, page: page + 1}})\n                .then(response => {\n                    if (response.data.error) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        sendMessage: (userId: number, message: string) => {\n            return DEFAULT_API.post<dialogsSendMessageResponseType>('dialogs/' + userId + '/messages', {body: message})\n                .then(response => {\n                    if (response.data.resultCode !== resultCodesType.Success) {\n                        return;\n                    }\n\n                    return response.data.data.message;\n                })\n        },\n        getNewMessagesCount: () => {\n            return DEFAULT_API.get<number>('dialogs/messages/new/count')\n                .then(response => {\n                    return response.data;\n                })\n        }\n    }\n}","export type validatorType = (value: string) => string | undefined;\n\n/**\n * Creates one validator from array of validators.\n * Returns error text or empty text as string.\n * Need for formik field-level validation.\n * @param {Array<validatorType>} validators - array of validators.\n */\nexport const validatorCreator = (validators: Array<validatorType>) => (value: string) => {\n    let error = '';\n\n    validators.forEach(validator => {\n        let result = validator(value);\n        if (result !== undefined) error = result;\n    })\n    return error;\n}\n\n/**\n * Validator for required string.\n * Returns undefined or error text as string.\n * @param {string} value - string from form for validation.\n */\nexport const required: validatorType = (value) => {\n    if (value) return undefined;\n    return 'Required field'\n}\n\n/**\n * Function which creates \"max length validator\".\n * @param {number} maxLength - max string length for validator.\n */\nexport const maxLengthCreator = (maxLength: number): validatorType => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength}`;\n    return undefined;\n}\n\n/**\n * Function which creates \"min length validator\".\n * @param {number} minLength - min string length for validator.\n */\nexport const minLengthCreator = (minLength: number): validatorType => (value) => {\n    if (value && value.length < minLength) return `Min length is ${minLength}`;\n    return undefined;\n}","import {Api} from '../components/API/api';\nimport {baseThunkType, contactsType, photosType, postsDataType, profileType} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {nanoid} from 'nanoid';\nimport {emptyErrorCallback, emptyStatusCallback, setErrors, setErrorsType, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    postsData: Array<postsDataType>,\n    profile: profileType | null,\n    ownerProfile: profileType | null,\n    statusFetching: boolean,\n    status: string\n}\n\ntype actionsType = inferActionsType<typeof profileActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    postsData: [\n        {id: nanoid(), text: 'First post!', likes: 15},\n        {id: nanoid(), text: 'Second post!', likes: 20},\n    ],\n    profile: null,\n    ownerProfile: null,\n    statusFetching: false,\n    status: ''\n};\n\nconst profileReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD_POST':\n            if (action.newPost === undefined || action.newPost.replace(/\\s+/g, '') === '') {\n                return state;\n            }\n\n            return {\n                ...state,\n                postsData: [...state.postsData, {id: nanoid(), text: action.newPost, likes: 0}]\n            };\n        case 'SN/PROFILE/DELETE_POST':\n            return {\n                ...state, postsData: state.postsData.filter(post => {\n                    return post.id !== action.postId;\n                })\n            };\n        case 'SN/PROFILE/SET_PROFILE':\n            return {...state, profile: action.profile};\n        case 'SN/PROFILE/SET_OWNER_PROFILE':\n            return {...state, ownerProfile: action.profile};\n        case 'SN/PROFILE/UPDATE_PROFILE':\n            let newProfile = {\n                ...(state.profile! as profileType),\n                ...action.profile,\n                contacts: {...(state.profile![\"contacts\"] as contactsType), ...action.profile.contacts}\n            };\n\n            return {\n                ...state,\n                profile: newProfile,\n                ownerProfile: newProfile\n            };\n        case 'SN/PROFILE/SET_STATUS':\n            return {...state, status: action.status};\n        case 'SN/PROFILE/TOGGLE_STATUS_FETCHING':\n            return {...state, statusFetching: !state.statusFetching};\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...(state.profile! as profileType), photos: action.photos},\n                ownerProfile: {...(state.ownerProfile! as profileType), photos: action.photos}\n            };\n        case 'SN/PROFILE/ADD_LIKE':\n            return {...state, postsData: state.postsData.map((post) => {\n                return post.id === action.postId ? {...post, likes: post.likes+1} : post;\n                })}\n        default:\n            return state;\n    }\n}\n\nexport const profileActions = {\n    sendPost: (newPost: string) => ({type: 'SN/PROFILE/ADD_POST', newPost} as const),\n    deletePost: (postId: string) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    setProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_PROFILE', profile} as const),\n    setOwnersProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_OWNER_PROFILE', profile} as const),\n    updateProfile: (profile: profileType) => ({type: 'SN/PROFILE/UPDATE_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    toggleStatusFetching: () => ({type: 'SN/PROFILE/TOGGLE_STATUS_FETCHING'} as const),\n    savePhotoSuccess: (photos: photosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n    addLike: (postId: string) => ({type: 'SN/PROFILE/ADD_LIKE', postId} as const),\n}\n\n/**\n * Requests status from api and set it to state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getStatus = (userId: number): thunkType => async (dispatch, getState) => {\n    let id = userId || getState().auth.id;\n\n    if (!id) {\n        return;\n    }\n\n    let data = await Api.Profile.getStatus(id);\n\n    if (data === null) {\n        dispatch(profileActions.setStatus(''));\n        return;\n    }\n\n    dispatch(profileActions.setStatus(data));\n}\n\n/**\n * Saves new status via API  and update it's in state.\n * @param {string} status - text of status\n */\nexport const updateStatus = (status: string): thunkType => async (dispatch) => {\n    dispatch(profileActions.toggleStatusFetching());\n\n    try {\n        let data = await Api.Profile.updateStatus(status);\n\n        if (!data) {\n            return;\n        }\n\n        dispatch(profileActions.setStatus(status));\n    } catch (reason) {\n        //TODO: переписать на нормальный вывод ошибки\n        alert('Не удалось сохранить статус, попробуйте позже!');\n    }\n\n    dispatch(profileActions.toggleStatusFetching());\n}\n\n/**\n * Requests user profile from api and set it to state.\n * If requested owners profile, it will returned from state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getProfile = (userId: number): thunkType => async (dispatch, getState) => {\n    const ownerId = getState().auth.id;\n    const id = userId || ownerId;\n\n    if (!id) {\n        return;\n    }\n\n    const ownerProfile = getState().profilePage.ownerProfile;\n\n    if (id === ownerId && ownerProfile !== null) {\n        dispatch(profileActions.setProfile({...ownerProfile}));\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(id);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setProfile(data));\n}\n\n/**\n * Requests owner profile from api and set it to state.\n */\nexport const getOwnerProfile = (): thunkType => async (dispatch, getState) => {\n    const userId = getState().auth.id;\n\n    if (!userId) {\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(userId);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setOwnersProfile(data));\n}\n\n/**\n * Saves new photo via API  and update it's in state.\n * @param {File} file - file data\n */\nexport const savePhoto = (file: File): thunkType => async (dispatch) => {\n    let data = await Api.Profile.savePhoto(file);\n\n    if (data === undefined) {\n        return;\n    }\n\n    dispatch(profileActions.savePhotoSuccess(data));\n}\n\n/**\n * Saves new profile-data via API  and update it's in state.\n * @param {profileType} profile - whole profile object\n * @param {setErrorsType=} errorCallback - formik setErrors function (optional)\n * @param {setStatusType=} statusCallback - formik setStatus function (optional)\n */\nexport const saveProfile = (\n    profile: profileType,\n    errorCallback: setErrorsType = emptyErrorCallback,\n    statusCallback: setStatusType = emptyStatusCallback\n): thunkType => (dispatch) => {\n    let promise = Api.Profile.saveProfile(profile);\n\n    return promise.then(\n        () => {\n            dispatch(profileActions.updateProfile(profile));\n            return Promise.resolve();\n        },\n        (data) => {\n            setErrors(data, errorCallback, statusCallback)\n            return Promise.reject('formHasErrors');\n    });\n}\n\nexport default profileReducer;","import {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {appStateType} from './redux/reduxStore';\n\nexport type Override<T1, T2> = Omit<T1, keyof T2> & T2;\n\nexport type stringOrNull = string | null;\n\nexport type profileType = {\n    userId: number,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    contacts: contactsType,\n    photos: photosType,\n    aboutMe: string\n}\n\nexport type contactsType = {\n    github: string,\n    vk: string,\n    facebook: string,\n    instagram: string,\n    twitter: string,\n    website: string,\n    youtube: string,\n    mainLink: string\n}\n\nexport type photosType = {\n    small: string | null,\n    large: string | null\n}\n\nexport type usersType = {\n    id: number,\n    name: string,\n    status: stringOrNull,\n    photos: photosType,\n    followed: boolean,\n    uniqueUrlName: stringOrNull\n}\n\nexport interface MatchParams {\n    userId: string;\n}\n\nexport type arrayOfNumbers = Array<number>;\n\nexport enum resultCodesType {\n    Success = 0,\n    Error = 1\n}\n\nexport enum captchaResultCodeType {\n    captchaRequired = 10\n}\n\nexport type basicResponseType = {\n    data: {},\n    resultCode: resultCodesType,\n    messages: Array<string>\n};\n\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, appStateType, unknown, A>;\n\nexport type postsDataType = {\n    id: string,\n    text: string,\n    likes: number\n}\n\nexport type userListType = {\n    id: number,\n    userName: string,\n    hasNewMessages: boolean,\n    newMessagesCount: number,\n    photos: photosType\n}\n\nexport type messageListType = {\n    id: string,\n    body: string,\n    addedAt: string,\n    senderId: number,\n    senderName: string,\n    recipientId: number,\n    viewed: boolean\n}","import {appStateType} from '../../redux/reduxStore';\n\nexport function getUsersSelector (state: appStateType) {\n    return state.usersPage.users;\n}\n\nexport function getIsUsersFetchingSelector (state: appStateType) {\n    return state.usersPage.isUsersFetching;\n}\n\nexport function getFollowingInProgressSelector (state: appStateType) {\n    return state.usersPage.followingInProgress;\n}\n\nexport function getUsersFilterSelector (state: appStateType) {\n    return state.usersPage.filter;\n}\n\nexport function getIsAuthSelector (state: appStateType) {\n    return state.auth.isAuth;\n}\n\nexport function getCaptchaUrlSelector (state: appStateType) {\n    return state.auth.captchaUrl;\n}\n\nexport function getLoginSelector (state: appStateType) {\n    return state.auth.login;\n}\n\nexport function getOwnerIdSelector (state: appStateType) {\n    return state.auth.id;\n}\n\nexport function getChatMessages (state: appStateType) {\n    return state.chat.messages;\n}\n\nexport function getIsChatConnectedSelector (state: appStateType) {\n    return state.chat.isConnected;\n}\n\nexport function getDialogsMessagesSelector (state: appStateType) {\n    return state.dialogsPage.messageList;\n}\n\nexport function getDialogsUserListSelector (state: appStateType) {\n    return state.dialogsPage.userList;\n}\n\nexport function getNewMessagesCountSelector (state: appStateType) {\n    return state.dialogsPage.newMessagesCount;\n}\n\nexport function getDialogHasMoreSelector (state: appStateType) {\n    return state.dialogsPage.currentDialogHasMore;\n}\n\nexport function getIsDialogsFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isDialogsFetching;\n}\n\nexport function getIsMessageSentFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isMessageSentFetching;\n}\n\nexport function getIsMessagesFetchingSelector (state: appStateType) {\n    return state.dialogsPage.isMessagesFetching;\n}\n\nexport function getAppInitDoneSelector (state: appStateType) {\n    return state.app.initDone;\n}\n\nexport function getOwnerPhotosSelector (state: appStateType) {\n    return state.profilePage.ownerProfile?.photos;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWithIconWrapper\":\"PostActions_textWithIconWrapper__2-gBR\",\"secondRow\":\"PostActions_secondRow__12p0J\",\"icon\":\"PostActions_icon__3y829\"};","export default __webpack_public_path__ + \"static/media/preloader-spinner.635e13f4.svg\";","import React from \"react\";\nimport styles from './Preloader.module.css';\nimport preloader from \"../../assets/images/preloader-spinner.svg\";\n\ntype preloaderPropsType = {\n    notCentered?: boolean\n}\n\n/**\n * Returns block with preloader spinner.\n * @param {preloaderPropsType} props - props object\n * @param {boolean=} props.notCentered - true - aligned to start, false or not used - aligned to center\n * @constructor\n */\nconst Preloader: React.FC<preloaderPropsType> = (props) => {\n    return (\n        <div className={!props.notCentered ? styles.preloaderWrapper : undefined}>\n            <img alt='preloader' className={styles.preloader} src={preloader}/>\n        </div>\n    );\n}\n\nexport default Preloader;","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType, messageListType, userListType} from '../types';\nimport {Api} from '../components/API/api';\nimport he from 'he';\n\nexport type initialStateType = {\n    userList: Array<userListType>,\n    messageList: Array<messageListType>,\n    currentDialogId: number,\n    currentDialogPage: number,\n    currentDialogHasMore: boolean,\n    newMessagesCount: number,\n    isDialogsFetching: boolean,\n    isMessagesFetching: boolean,\n    isMessageSentFetching: boolean,\n};\n\ntype actionsType = inferActionsType<typeof dialogsActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    userList: [],\n    messageList: [],\n    currentDialogId: 0,\n    currentDialogPage: 0,\n    currentDialogHasMore: false,\n    newMessagesCount: 0,\n    isDialogsFetching: false,\n    isMessagesFetching: false,\n    isMessageSentFetching: false,\n};\n\n/**\n * Unescape HTML-entities in every message body.\n * Returns new array.\n * @param {Array<messageListType>} messagesList - list of messages from API\n */\nfunction getUnescapedMessages(messagesList: Array<messageListType>): Array<messageListType> {\n    return  messagesList.map(message => {\n        let unescapedMessage = {...message};\n        unescapedMessage.body = he.unescape(message.body);\n        unescapedMessage.body = unescapedMessage.body.replace(/<br \\/>/g, '\\n');\n        return unescapedMessage;\n    })\n}\n\nconst dialogsReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/MESSAGE_SENT':\n            return {\n                ...state,\n                messageList: [...state.messageList, {...action.newMessage}]\n            };\n        case 'SN/DIALOGS/DIALOGS_LIST_RECEIVED':\n            return {\n                ...state,\n                userList: [...action.payload]\n            }\n        case 'SN/DIALOGS/MESSAGES_LIST_RECEIVED':\n            return {\n                ...state,\n                messageList: [...getUnescapedMessages(action.payload), ...state.messageList],\n                currentDialogPage: state.currentDialogPage + 1\n            }\n        case 'SN/DIALOGS/CHAT_CHANGED':\n            return {\n                ...state,\n                currentDialogId: action.payload,\n                messageList: [],\n                currentDialogPage: 0,\n                currentDialogHasMore: false\n            }\n        case 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED':\n            return {\n                ...state,\n                newMessagesCount: action.payload\n            }\n        case 'SN/DIALOGS/CHAT_MESSAGES_READ': {\n            let messagesWasRead = 0;\n            return {\n                ...state,\n                userList: state.userList.map(userItem => {\n                    if (action.payload === userItem.id) {\n                        messagesWasRead = userItem.newMessagesCount;\n                        userItem.newMessagesCount = 0;\n                        userItem.hasNewMessages = false;\n                    }\n\n                    return userItem;\n                }),\n                newMessagesCount: state.newMessagesCount >= messagesWasRead ? state.newMessagesCount - messagesWasRead : 0\n            }\n        }\n        case 'SN/DIALOGS/COUNT_MESSAGES_CHANGED':\n            return {\n                ...state,\n                currentDialogHasMore: action.payload > state.messageList.length\n            }\n        case 'SN/DIALOGS/UPDATE_IS_DIALOGS_FETCHING':\n            return {\n                ...state,\n                isDialogsFetching: action.payload\n            }\n        case 'SN/DIALOGS/UPDATE_IS_MESSAGES_FETCHING':\n            return {\n                ...state,\n                isMessagesFetching: action.payload\n            }\n        case 'SN/DIALOGS/UPDATE_IS_MESSAGE_SENT_FETCHING':\n            return {\n                ...state,\n                isMessageSentFetching: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const dialogsActions = {\n    /** Action after message sending */\n    messageSent: (newMessage: messageListType) => ({type: 'SN/DIALOGS/MESSAGE_SENT', newMessage} as const),\n    /** Action after list of dialogs was received from API */\n    dialogsListReceived: (list: Array<userListType>) => ({type: 'SN/DIALOGS/DIALOGS_LIST_RECEIVED', payload: list} as const),\n    /** Action after list messages was received from API */\n    messagesListReceived: (list: Array<messageListType>) => ({type: 'SN/DIALOGS/MESSAGES_LIST_RECEIVED', payload: list} as const),\n    /** Action after change of dialog opponent */\n    chatChanged: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_CHANGED', payload: chatId} as const),\n    /** Action after read messages in current dialog */\n    chatMessagesRead: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_MESSAGES_READ', payload: chatId} as const),\n    /** Action after counter of unread messages was received from API */\n    newMessagesCountReceived: (count: number) => ({type: 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED', payload: count} as const),\n    /** Action after change count of messages in messages list */\n    countMessagesChanged: (count: number) => ({type: 'SN/DIALOGS/COUNT_MESSAGES_CHANGED', payload: count} as const),\n    /** Action which sets status of dialogs list receiving. true - in progress, false - is done */\n    updateDialogsFetching: (isDialogsFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_DIALOGS_FETCHING',\n        payload: isDialogsFetching\n    } as const),\n    /** Action which sets status of messages list receiving. true - in progress, false - is done */\n    updateMessagesFetching: (isMessagesFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_MESSAGES_FETCHING',\n        payload: isMessagesFetching\n    } as const),\n    /** Action which sets status of message sent process. true - in progress, false - is done */\n    updateMessageSentFetching: (isMessageSentFetching: boolean) => ({\n        type: 'SN/DIALOGS/UPDATE_IS_MESSAGE_SENT_FETCHING',\n        payload: isMessageSentFetching\n    } as const),\n}\n\n/**\n * Requests list of dialogs from api and set it to state.\n */\nexport const getDialogsList = (): thunkType => async (dispatch) => {\n    dispatch(dialogsActions.updateDialogsFetching(true));\n    let data = await Api.Dialogs.getDialogsList();\n\n    if (!data || !data.length) {\n        dispatch(dialogsActions.dialogsListReceived([]));\n        return;\n    }\n\n    dispatch(dialogsActions.dialogsListReceived(data));\n    dispatch(dialogsActions.updateDialogsFetching(false));\n}\n\n/**\n * Add new user in dialogs list or set it first if existing.\n * Reload dialogs list from API.\n * @param {number} userId - opponent ID\n */\nexport const startRefreshDialog = (userId: number): thunkType => async (dispatch) => {\n    let isSuccessful = await Api.Dialogs.startRefreshDialog(userId);\n\n    if (isSuccessful) {\n        await dispatch(getDialogsList());\n    }\n}\n\n/**\n * Requests list of messages from api and set it to state.\n * @param {number} userId - opponent ID\n */\nexport const getMessagesList = (userId: number): thunkType => async (dispatch, getState) => {\n    const dialogsPage = getState().dialogsPage;\n\n    dispatch(dialogsActions.updateMessagesFetching(true));\n\n    let data = await Api.Dialogs.getMessagesList(userId, dialogsPage.currentDialogPage);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messagesListReceived(data.items));\n    dispatch(dialogsActions.countMessagesChanged(data.totalCount));\n    dispatch(dialogsActions.updateMessagesFetching(false));\n}\n\n/**\n * Send new message to current dialog.\n * @param {string} text - text of message\n */\nexport const sendMessage = (text: string): thunkType => async (dispatch, getState) => {\n    let userId = getState().dialogsPage.currentDialogId;\n\n    dispatch(dialogsActions.updateMessageSentFetching(true));\n\n    let data = await Api.Dialogs.sendMessage(userId, text);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messageSent(data));\n    dispatch(dialogsActions.updateMessageSentFetching(false));\n}\n\n/**\n * Requests counter of new messages from api and set it to state.\n */\nexport const getNewMessagesCount = (): thunkType => async (dispatch, getState) => {\n    const isAuthorized = getState().auth.isAuth;\n\n    if (!isAuthorized) {\n        return;\n    }\n\n    let data = await Api.Dialogs.getNewMessagesCount();\n\n    dispatch(dialogsActions.newMessagesCountReceived(data));\n}\n\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user-male.ba3e9327.png\";","export type setErrorsType = (field: string, value: string | undefined) => void;\nexport type setStatusType = (field: string) => void;\n\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} field - not need to put param\n * @param {string|undefined} value - not need to put param\n */\nexport function emptyErrorCallback(field: string, value: string | undefined) {}\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} data - not need to put param\n */\nexport function emptyStatusCallback(data: string) {}\n\n/**\n * Call callback for every item in data. Parse every item to field name and error text.\n * @param {Array<string>} data - array with errors.\n * @param {setErrorsType} formikSetErrors - setErrors function from formik.\n * @param {setStatusType} formikSetStatus - setStatus function from formik.\n */\nexport function setErrors (data: Array<string>, formikSetErrors: setErrorsType, formikSetStatus: setStatusType) {\n    data.forEach(error => {\n        let rawError = error.split('(')[1],\n            hasSubkey = rawError.indexOf('->') !== -1,\n            key, subkey, errorTextRaw, errorText;\n\n        if (hasSubkey) {\n            key = rawError.split('->')[0].toLowerCase();\n            subkey = rawError.substring(0, rawError.length - 1).split('->')[1].toLowerCase();\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length - 1);\n\n            formikSetErrors(`${key}.${subkey}`, errorText);\n        } else {\n            key = rawError.substring(0, rawError.length - 1);\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length -1);\n\n            if (key === 'contacts') {\n                formikSetStatus(errorText);\n            }\n\n            formikSetErrors(key, errorText);\n        }\n    });\n}"],"sourceRoot":""}