{"version":3,"sources":["Common/MessagesList/MessagesList.tsx","../node_modules/@material-ui/icons/ChevronLeft.js","components/Dialogs/NoDialog/NoDialog.tsx","components/Dialogs/Dialog/MoreDialogMessagesButton/MoreDialogMessagesButton.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Dialogs.tsx"],"names":["MessagesList","props","messages","messagesRef","React","useRef","useState","isAutoscroll","setIsAutoscroll","useEffect","setTimeout","current","scrollIntoView","behavior","block","style","height","overflowY","width","onScroll","event","element","currentTarget","scrollHeight","scrollTop","clientHeight","ref","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","_default","createElement","d","NoDialog","classes","makeStyles","theme","createStyles","helperText","display","flexGrow","alignItems","justifyContent","breakpoints","down","useStyles","Container","className","Typography","variant","color","MoreDialogMessagesButton","dispatch","useDispatch","Button","onClick","getMessagesList","currentDialogId","margin","spacing","goBackButtonWrapper","up","Dialog","useSelector","getDialogsMessagesSelector","opponents","getDialogsUserListSelector","ownerId","getOwnerIdSelector","ownerPhoto","getOwnerPhotosSelector","small","hasMore","getDialogHasMoreSelector","history","useHistory","opponent","dialogId","filter","user","id","undefined","length","getOpponentData","opponentPhoto","photos","hasNewMessages","dialogsActions","chatMessagesRead","messagesComponentsList","map","message","isOwner","senderId","action","viewed","PostActions","textWithOk","body","addedAt","textWithWait","onlyText","Post","postId","avatar","userName","rightSided","unshift","IconButton","push","getRouteNameById","routes","dialogs","Divider","AddMessageForm","blockWidth","sendMessage","buttonText","minTextLength","withRouter","withAuthRedirect","userList","match","params","userId","parseInt","dialogsWrapper","dialogsItems","users","newMessagesCount","Counter","count","inCorner","String","primaryLink","chatChanged","getDialogsList","List","orientation"],"mappings":"sLAgBaA,EAAgD,SAACC,GAC1D,IAAOC,EAAYD,EAAZC,SACDC,EAAcC,IAAMC,OAAsB,MAChD,EAAwCD,IAAME,UAAS,GAAvD,mBAAOC,EAAP,KAAqBC,EAArB,KAwBA,OARAJ,IAAMK,WAAU,WACRF,GACAG,YAAW,WAAO,IAAD,EACb,UAAAP,EAAYQ,eAAZ,SAAqBC,eAAe,CAACC,SAAU,SAAUC,MAAO,UACjE,OAER,CAACZ,EAAUK,IAGV,eAAC,IAAD,CAAMQ,MAAO,CAACC,OAAQf,EAAMe,OAAQC,UAAW,OAAQC,MAAO,QAASC,SAnB3E,SAAuBC,GACnB,IAAMC,EAAUD,EAAME,cAEjBD,EAAQE,aAAeF,EAAQG,YAAeH,EAAQI,cACtDlB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAapC,UACKN,EACD,oBAAIwB,IAAKvB,S,iCC5CrB,IAAIwB,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAI9B,EAAQyB,EAAwBD,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,KAElBM,SAAuB9B,EAAMgC,cAAc,OAAQ,CACnFC,EAAG,kDACD,eAEJL,EAAQE,QAAUC,G,kKCVLG,EAAqB,WAC9B,IAcMC,EAdYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,WAAW,aACPC,QAAS,OACTC,SAAU,EACVC,WAAY,SACZC,eAAgB,UACfN,EAAMO,YAAYC,KAAK,MAAQ,CAC5BL,QAAS,aAMTM,GAEhB,OACI,cAACC,EAAA,EAAD,CAAWC,UAAWb,EAAQI,WAA9B,SACI,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,gBAA/B,0D,+ECbCC,EAAwE,SAACvD,GAClF,IAAMwD,EAAWC,cAMjB,OACI,oBAAI3C,MAAO,CAAC6B,QAAS,OAAQG,eAAgB,UAA7C,SACI,cAACY,EAAA,EAAD,CAAQL,QAAQ,WAAWC,MAAM,UAAUK,QANnD,WACIH,EAASI,YAAgB5D,EAAM6D,mBAK3B,8BCGNZ,EAAYV,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTxC,SAAU,CACN2C,SAAU,EACV3B,MAAO,MACP6C,OAAQtB,EAAMuB,QAAQ,IAE1BC,oBAAoB,eACfxB,EAAMO,YAAYkB,GAAG,MAAQ,CAC1BtB,QAAS,cAuBlB,IAAMuB,EAAoC,SAAClE,GAAW,IAAD,EACnD6D,EAAmB7D,EAAnB6D,gBACC5D,EAAWkE,YAAYC,KACvBC,EAAYF,YAAYG,KACxBC,EAAUJ,YAAYK,KACtBC,EAAU,UAAGN,YAAYO,YAAf,aAAG,EAAqCC,MAClDC,EAAUT,YAAYU,KACtBvC,EAAUW,IACV6B,EAAUC,cACVvB,EAAWC,cAEXuB,EAvBV,SAAyBX,EAAgCY,GACrD,IAAID,EAAWX,EAAUa,QAAO,SAAAC,GAC5B,OAAOA,EAAKC,KAAOH,EAAWE,OAAuBE,KAGzD,OAAOL,EAASM,OAASN,EAAS,GAAK,KAkBtBO,CAAgBlB,EAAWR,GACtC2B,EAAgBR,EAAWA,EAASS,OAAOd,MAAQ,KAEzDxE,IAAMK,WAAU,WACPqD,GAAoBmB,GAIrBA,EAASU,gBACTlC,EAASmC,IAAeC,iBAAiB/B,MAE9C,CAACA,EAAiBL,EAAUwB,IAE/B,IAAIa,EAAyB5F,EAAS6F,KAAI,SAAAC,GACtC,IAAMC,EAAUD,EAAQE,WAAa1B,EAC/B2B,EAASF,EACRD,EAAQI,OACLC,IAAYC,WAAWN,EAAQO,KAAMP,EAAQQ,SAC7CH,IAAYI,aAAaT,EAAQO,KAAMP,EAAQQ,SAEnDH,IAAYK,SAASV,EAAQO,KAAMP,EAAQQ,SAEjD,OAAO,cAACG,EAAA,EAAD,CACMC,OAAQZ,EAAQX,GAChBc,OAAQA,EACRU,OAASZ,EAA0BvB,GAAc,KAA9Be,EACnBqB,SAAU,GACVC,WAAYd,GALP,UAAYD,EAAQX,OAiB1C,OARIR,GACAiB,EAAuBkB,QAAQ,cAAC,EAAD,CAAqDlD,gBAAiBA,GAAvC,uBAQ9D,sBAAKV,UAAWb,EAAQrC,SAAxB,UACI,sBAAKkD,UAAWb,EAAQ0B,oBAAxB,UACI,cAACgD,EAAA,EAAD,CAAYrD,QAPxB,WACImB,EAAQmC,KAAR,WAAiBC,YAAiBC,IAAOC,QAAQhC,OAMzC,SACI,cAAC,IAAD,MAEJ,cAACiC,EAAA,EAAD,OAEJ,cAACtH,EAAA,EAAD,CAAcE,SAAU4F,EAAwB9E,OAAQ,SACxD,cAACsG,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAgBC,WAAY,OACZC,YAAaA,IACbC,WAAW,OACXC,cAAe,Q,kBCrB5BC,sBAAWC,aAxEW,SAAC5H,GAClC,IAAM6H,EAAW1D,YAAYG,KACvBd,EAAWC,cACXI,EAAkB7D,EAAM8H,MAAMC,OAAOC,OAASC,SAASjI,EAAM8H,MAAMC,OAAOC,QAAU,EA0BpF1F,EAxBYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyF,eAAgB,CACZvF,QAAS,OACTmB,OAAQtB,EAAMuB,SAAS,IAE3BqD,QAAQ,aACJzE,QAAS,QACRH,EAAMO,YAAYC,KAAK,MAAQ,CAC5BL,QAASkB,EAAkB,OAAS,OACpC5C,MAAO,SAGfkH,aAAc,CACVpH,OAAQ,OACRC,UAAW,OACX4B,SAAU,EACV,eAAgB,CACZA,SAAU,QAMVK,GAEZmF,EAAQP,EAAS/B,KAAK,SAACX,GACvB,IAAIe,EAASf,EAAKkD,iBAAmB,EAAI,cAACC,EAAA,EAAD,CAASC,MAAOpD,EAAKkD,iBAAkBG,UAAU,SAAUnD,EAEpG,OAAO,cAACqB,EAAA,EAAD,CACMC,OAAQ8B,OAAOtD,EAAKC,IACpBwB,OAAQzB,EAAKM,OAAOd,MACpBkC,SAAU1B,EAAK0B,SACfmB,OAAQ7C,EAAKC,GACbsD,YAAavD,EAAKC,KAAOvB,EACzBqC,OAAQA,GANH,OAASf,EAAKC,OAsBpC,OAZAjF,IAAMK,WAAU,WACRqD,IACAL,EAASmC,IAAegD,YAAY9E,IACpCL,EAASI,YAAgBC,OAE9B,CAACA,EAAiBL,IAErBrD,IAAMK,WAAU,WACZgD,EAASoF,iBAEV,IAGC,sBAAKzF,UAAWb,EAAQ4F,eAAxB,UACI,sBAAK/E,UAAWb,EAAQ8E,QAAxB,UACI,cAACyB,EAAA,EAAD,CAAM1F,UAAWb,EAAQ6F,aAAzB,SACKC,IAEL,cAACf,EAAA,EAAD,CAASyB,YAAY,gBAExBjF,EACK,cAAC,EAAD,CAAQA,gBAAiBA,IACzB,cAAC,EAAD","file":"static/js/4.13052142.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\n\ntype messagesListPropsType = {\n    messages: Array<JSX.Element>,\n    height: string\n}\n\n/**\n * Returns list of messages width autoscroll functionality.\n * If list scrolled to bottom list will autoscroll.\n * @param {messagesListPropsType} props - props object.\n * @param {Array<JSX.Element>} props.messages - array of messages as JSX.\n * @param {string} props.height - CSS string value for height (i.e. \"10px\").\n * @constructor\n */\nexport const MessagesList: React.FC<messagesListPropsType> = (props) => {\n    const {messages} = props;\n    const messagesRef = React.useRef<HTMLLIElement>(null);\n    const [isAutoscroll, setIsAutoscroll] = React.useState(true);\n\n    /**\n     * Detects scroll end and set autoscroll to true or false.\n     * @param event\n     */\n    function scrollHandler(event: React.UIEvent<HTMLUListElement, UIEvent>) {\n        const element = event.currentTarget;\n\n        if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {\n            !isAutoscroll && setIsAutoscroll(true);\n        } else {\n            isAutoscroll && setIsAutoscroll(false);\n        }\n    }\n\n    React.useEffect(() => {\n        if (isAutoscroll) {\n            setTimeout(() => {\n                messagesRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\n            }, 500);\n        }\n    }, [messages, isAutoscroll]);\n\n    return (\n        <List style={{height: props.height, overflowY: 'auto', width: '100%'}} onScroll={scrollHandler}>\n            {messages}\n            <li ref={messagesRef}/>\n        </List>\n    );\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Empty block with helper text for dialogs page.\n * @constructor\n */\nexport const NoDialog: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            helperText: {\n                display: 'flex',\n                flexGrow: 1,\n                alignItems: 'center',\n                justifyContent: 'center',\n                [theme.breakpoints.down('xs')]: {\n                    display: 'none'\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.helperText}>\n            <Typography variant='h4' color='textSecondary'>Please click on user name to start dialog</Typography>\n        </Container>\n    );\n}","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {getMessagesList} from '../../../../reducers/dialogsReducer';\nimport Button from '@material-ui/core/Button';\n\ntype moreDialogMessagesButtonPropsType = {\n    currentDialogId: number\n}\n\n/**\n * Returns complete button for request next page of messages.\n * @param {moreDialogMessagesButtonPropsType} props - props object\n * @param {number} props.currentDialogId - ID of opponent profile\n * @constructor\n */\nexport const MoreDialogMessagesButton: React.FC<moreDialogMessagesButtonPropsType> = (props) => {\n    const dispatch = useDispatch();\n\n    function onClick() {\n        dispatch(getMessagesList(props.currentDialogId));\n    }\n\n    return (\n        <li style={{display: 'flex', justifyContent: 'center'}}>\n            <Button variant='outlined' color='primary' onClick={onClick}>More messages</Button>\n        </li>\n    );\n}","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    getDialogHasMoreSelector,\n    getDialogsMessagesSelector,\n    getDialogsUserListSelector,\n    getOwnerIdSelector,\n    getOwnerPhotosSelector\n} from '../../../Common/Selectors/Selectors';\nimport Post from '../../../Common/Post/Post';\nimport Divider from '@material-ui/core/Divider';\nimport {AddMessageForm} from '../../../Common/AddMessageForm/AddMessageForm';\nimport {dialogsActions, sendMessage} from '../../../reducers/dialogsReducer';\nimport {PostActions} from '../../../Common/Post/PostActions/PostActions';\nimport {MessagesList} from '../../../Common/MessagesList/MessagesList';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {useHistory} from 'react-router-dom';\nimport {userListType} from '../../../types';\nimport {getRouteNameById, routes} from '../../../Common/Routes';\nimport {MoreDialogMessagesButton} from './MoreDialogMessagesButton/MoreDialogMessagesButton';\n\ntype dialogPropsType = {\n    currentDialogId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        messages: {\n            flexGrow: 1,\n            width: '20%',\n            margin: theme.spacing(3),\n        },\n        goBackButtonWrapper: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        }\n    }),\n);\n\n/**\n * Returns opponent data.\n * @param {Array<userListType>} opponents - list of dialogs\n * @param {number} dialogId - profile ID of opponent.\n */\nfunction getOpponentData(opponents: Array<userListType>, dialogId: number):userListType|null  {\n    let opponent = opponents.filter(user => {\n        return user.id === dialogId ? user as userListType : undefined;\n    });\n\n    return opponent.length ? opponent[0] : null;\n}\n\n/**\n * Returns block of dialog with list of messages and form to add new.\n * @constructor\n */\nexport const Dialog: React.FC<dialogPropsType> = (props) => {\n    let {currentDialogId} = props;\n    const messages = useSelector(getDialogsMessagesSelector);\n    const opponents = useSelector(getDialogsUserListSelector);\n    const ownerId = useSelector(getOwnerIdSelector);\n    const ownerPhoto = useSelector(getOwnerPhotosSelector)?.small;\n    const hasMore = useSelector(getDialogHasMoreSelector);\n    const classes = useStyles();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const opponent = getOpponentData(opponents, currentDialogId);\n    const opponentPhoto = opponent ? opponent.photos.small : null;\n\n    React.useEffect(() => {\n        if (!currentDialogId || !opponent){\n            return;\n        }\n\n        if (opponent.hasNewMessages) {\n            dispatch(dialogsActions.chatMessagesRead(currentDialogId));\n        }\n    }, [currentDialogId, dispatch, opponent]);\n\n    let messagesComponentsList = messages.map(message => {\n        const isOwner = message.senderId === ownerId;\n        const action = isOwner\n            ? (message.viewed\n                ? PostActions.textWithOk(message.body, message.addedAt)\n                : PostActions.textWithWait(message.body, message.addedAt)\n              )\n            : PostActions.onlyText(message.body, message.addedAt);\n\n        return <Post key={'Message' + message.id}\n                     postId={message.id}\n                     action={action}\n                     avatar={!isOwner ? opponentPhoto : ownerPhoto || null}\n                     userName={''}\n                     rightSided={isOwner}\n        />\n    });\n\n    if (hasMore) {\n        messagesComponentsList.unshift(<MoreDialogMessagesButton key={'MoreMessagesButton'} currentDialogId={currentDialogId}/>);\n    }\n\n    function closeDialog () {\n        history.push(`/${getRouteNameById(routes.dialogs.id)}`);\n    }\n\n    return (\n        <div className={classes.messages}>\n            <div className={classes.goBackButtonWrapper}>\n                <IconButton onClick={closeDialog}>\n                    <ChevronLeftIcon/>\n                </IconButton>\n                <Divider/>\n            </div>\n            <MessagesList messages={messagesComponentsList} height={'70vh'}/>\n            <Divider/>\n            <AddMessageForm blockWidth={'30ch'}\n                            sendMessage={sendMessage}\n                            buttonText='Send'\n                            minTextLength={2}\n            />\n        </div>\n    );\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport {dialogsActions, getDialogsList, getMessagesList} from '../../reducers/dialogsReducer';\nimport List from '@material-ui/core/List';\nimport Post from '../../Common/Post/Post';\nimport Divider from '@material-ui/core/Divider';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {MatchParams} from '../../types';\nimport {NoDialog} from './NoDialog/NoDialog';\nimport {Dialog} from './Dialog/Dialog';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {Counter} from '../../Common/Counter/Counter';\nimport {getDialogsUserListSelector} from '../../Common/Selectors/Selectors';\nimport withAuthRedirect from '../../Hocs/withAuthRedirect';\n\ntype matchType = RouteComponentProps<MatchParams>;\n\n/**\n * Returns page with dialogs.\n * Allow only for authorized users.\n * @param {Object} props - props object\n * @param {matchType} props.match - props from router\n * @constructor\n */\nconst Dialogs: React.FC<matchType> = (props) => {\n    const userList = useSelector(getDialogsUserListSelector);\n    const dispatch = useDispatch();\n    const currentDialogId = props.match.params.userId ? parseInt(props.match.params.userId) : 0;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            dialogsWrapper: {\n                display: 'flex',\n                margin: theme.spacing(-3)\n            },\n            dialogs: {\n                display: 'flex',\n                [theme.breakpoints.down('xs')]: {\n                    display: currentDialogId ? 'none' : 'flex',\n                    width: '100%'\n                },\n            },\n            dialogsItems: {\n                height: '90vh',\n                overflowY: 'auto',\n                flexGrow: 1,\n                '& > li > div': {\n                    flexGrow: 1,\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let users = userList.map( (user) => {\n        let action = user.newMessagesCount > 0 ? <Counter count={user.newMessagesCount} inCorner={true}/> : undefined;\n\n        return <Post key={'User' + user.id}\n                     postId={String(user.id)}\n                     avatar={user.photos.small}\n                     userName={user.userName}\n                     userId={user.id}\n                     primaryLink={user.id !== currentDialogId}\n                     action={action}\n        />\n    });\n\n    React.useEffect(() => {\n        if (currentDialogId) {\n            dispatch(dialogsActions.chatChanged(currentDialogId));\n            dispatch(getMessagesList(currentDialogId));\n        }\n    }, [currentDialogId, dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDialogsList());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={classes.dialogsWrapper}>\n            <div className={classes.dialogs}>\n                <List className={classes.dialogsItems}>\n                    {users}\n                </List>\n                <Divider orientation='vertical'/>\n            </div>\n            {currentDialogId\n                ? <Dialog currentDialogId={currentDialogId}/>\n                : <NoDialog/>\n            }\n        </div>\n    );\n};\n\nexport default withRouter(withAuthRedirect(Dialogs));"],"sourceRoot":""}