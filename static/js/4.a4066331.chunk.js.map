{"version":3,"sources":["Common/MessagesList/MessagesList.tsx","../node_modules/@material-ui/core/esm/Container/Container.js","../node_modules/@material-ui/icons/ChevronLeft.js","components/Messages/NoDialog/NoDialog.tsx","components/Messages/Dialog/Dialog.tsx","components/Messages/Dialogs.tsx","components/Messages/DialogsContainer.tsx"],"names":["MessagesList","props","messagesRef","useRef","useState","isAutoscroll","setIsAutoscroll","useEffect","setTimeout","current","scrollIntoView","behavior","block","messages","style","height","overflowY","width","onScroll","event","element","currentTarget","scrollHeight","scrollTop","clientHeight","ref","Container","React","classes","className","_props$component","component","Component","_props$disableGutters","disableGutters","_props$fixed","fixed","_props$maxWidth","maxWidth","other","_objectWithoutProperties","_extends","clsx","root","concat","capitalize","String","withStyles","theme","_defineProperty","marginLeft","boxSizing","marginRight","paddingLeft","spacing","paddingRight","display","breakpoints","up","Object","keys","values","reduce","acc","breakpoint","value","maxWidthXs","Math","max","xs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl","name","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","NoDialog","makeStyles","createStyles","helperText","flexGrow","alignItems","justifyContent","down","useStyles","Typography","variant","color","margin","goBackButtonWrapper","Dialog","useSelector","getDialogsMessagesSelector","opponents","getDialogsUserListSelector","ownerId","getOwnerIdSelector","history","useHistory","opponent","filter","user","id","currentDialogId","undefined","opponentPhoto","length","photos","small","messagesComponentsList","map","message","isOwner","senderId","action","viewed","PostActions","textWithOk","body","textWithWait","onlyText","Post","postId","avatar","userName","rightSided","IconButton","onClick","push","getRouteNameById","routes","dialogs","Divider","AddMessageForm","blockWidth","sendMessage","buttonText","minTextLength","Dialogs","dispatch","useDispatch","match","params","userId","parseInt","dialogsWrapper","dialogsItems","users","dialogsPage","userList","newMessagesCount","Counter","count","inCorner","primaryLink","dialogsActions","chatChanged","getMessagesList","getDialogsList","List","orientation","connect","state","withRouter","withAuthRedirect"],"mappings":"6KAgBaA,EAAgD,SAACC,GAC1D,IAAMC,EAAcC,iBAAsB,MAC1C,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAwBA,OARAC,qBAAU,WACFF,GACAG,YAAW,WAAO,IAAD,EACb,UAAAN,EAAYO,eAAZ,SAAqBC,eAAe,CAACC,SAAU,SAAUC,MAAO,UACjE,OAER,CAACX,EAAMY,SAAUR,IAGhB,eAAC,IAAD,CAAMS,MAAO,CAACC,OAAQd,EAAMc,OAAQC,UAAW,OAAQC,MAAO,QAASC,SAnB3E,SAAuBC,GACnB,IAAMC,EAAUD,EAAME,cAEjBD,EAAQE,aAAeF,EAAQG,YAAeH,EAAQI,cACtDnB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAapC,UACKL,EAAMY,SACP,oBAAIY,IAAKvB,S,iCC7CrB,6DAqEIwB,EAAyBC,cAAiB,SAAmB1B,EAAOwB,GACtE,IAAIG,EAAU3B,EAAM2B,QAChBC,EAAY5B,EAAM4B,UAClBC,EAAmB7B,EAAM8B,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDG,EAAwBhC,EAAMiC,eAC9BA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAelC,EAAMmC,MACrBA,OAAyB,IAAjBD,GAAkCA,EAC1CE,EAAkBpC,EAAMqC,SACxBA,OAA+B,IAApBD,EAA6B,KAAOA,EAC/CE,EAAQC,YAAyBvC,EAAO,CAAC,UAAW,YAAa,YAAa,iBAAkB,QAAS,aAE7G,OAAoB0B,gBAAoBK,EAAWS,YAAS,CAC1DZ,UAAWa,YAAKd,EAAQe,KAAMd,EAAWO,GAASR,EAAQQ,MAAOF,GAAkBN,EAAQM,gBAA6B,IAAbI,GAAsBV,EAAQ,WAAWgB,OAAOC,YAAWC,OAAOR,OAC7Kb,IAAKA,GACJc,OAsDUQ,iBAnIK,SAAgBC,GAClC,MAAO,CAELL,KAAMM,YAAgB,CACpBhC,MAAO,OACPiC,WAAY,OACZC,UAAW,aACXC,YAAa,OACbC,YAAaL,EAAMM,QAAQ,GAC3BC,aAAcP,EAAMM,QAAQ,GAC5BE,QAAS,SACRR,EAAMS,YAAYC,GAAG,MAAO,CAC7BL,YAAaL,EAAMM,QAAQ,GAC3BC,aAAcP,EAAMM,QAAQ,KAI9BpB,eAAgB,CACdmB,YAAa,EACbE,aAAc,GAIhBnB,MAAOuB,OAAOC,KAAKZ,EAAMS,YAAYI,QAAQC,QAAO,SAAUC,EAAKC,GACjE,IAAIC,EAAQjB,EAAMS,YAAYI,OAAOG,GAQrC,OANc,IAAVC,IACFF,EAAIf,EAAMS,YAAYC,GAAGM,IAAe,CACtC1B,SAAU2B,IAIPF,IACN,IAGHG,WAAYjB,YAAgB,GAAID,EAAMS,YAAYC,GAAG,MAAO,CAC1DpB,SAAU6B,KAAKC,IAAIpB,EAAMS,YAAYI,OAAOQ,GAAI,OAIlDC,WAAYrB,YAAgB,GAAID,EAAMS,YAAYC,GAAG,MAAO,CAC1DpB,SAAUU,EAAMS,YAAYI,OAAOU,KAIrCC,WAAYvB,YAAgB,GAAID,EAAMS,YAAYC,GAAG,MAAO,CAC1DpB,SAAUU,EAAMS,YAAYI,OAAOY,KAIrCC,WAAYzB,YAAgB,GAAID,EAAMS,YAAYC,GAAG,MAAO,CAC1DpB,SAAUU,EAAMS,YAAYI,OAAOc,KAIrCC,WAAY3B,YAAgB,GAAID,EAAMS,YAAYC,GAAG,MAAO,CAC1DpB,SAAUU,EAAMS,YAAYI,OAAOgB,QA0EP,CAChCC,KAAM,gBADO/B,CAEZrB,I,iCC3IH,IAAIqD,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCrB,OAAOuB,eAAeC,EAAS,aAAc,CAC3ClB,OAAO,IAETkB,EAAQC,aAAU,EAElB,IAAIzD,EAAQsD,EAAwBD,EAAQ,IAIxCK,GAAW,EAFMN,EAAuBC,EAAQ,KAElBI,SAAuBzD,EAAM2D,cAAc,OAAQ,CACnFC,EAAG,kDACD,eAEJJ,EAAQC,QAAUC,G,iJCVLG,EAAqB,WAC9B,IAcM5D,EAdY6D,aAAW,SAACzC,GAAD,OACzB0C,YAAa,CACTC,WAAW,aACPnC,QAAS,OACToC,SAAU,EACVC,WAAY,SACZC,eAAgB,UACf9C,EAAMS,YAAYsC,KAAK,MAAQ,CAC5BvC,QAAS,aAMTwC,GAEhB,OACI,cAACtE,EAAA,EAAD,CAAWG,UAAWD,EAAQ+D,WAA9B,SACI,cAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,gBAA/B,0D,8ECJNH,EAAYP,aAAW,SAACzC,GAAD,OACzB0C,YAAa,CACT7E,SAAU,CACN+E,SAAU,EACV3E,MAAO,MACPmF,OAAQpD,EAAMM,QAAQ,IAE1B+C,oBAAoB,eACfrD,EAAMS,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,cAUZ8C,EAAoC,SAACrG,GAC9C,IAAMY,EAAW0F,YAAYC,KACvBC,EAAYF,YAAYG,KACxBC,EAAUJ,YAAYK,KACtBhF,EAAUoE,IACVa,EAAUC,cAEVC,EAAWN,EAAUO,QAAO,SAAAC,GAC9B,OAAOA,EAAKC,KAAOjH,EAAMkH,gBAAkBF,OAAuBG,KAGhEC,EAAgBN,EAASO,OAASP,EAAS,GAAGQ,OAAOC,MAAQ,KAE/DC,EAAyB5G,EAAS6G,KAAI,SAAAC,GACtC,IAAMC,EAAUD,EAAQE,WAAalB,EAC/BmB,EAASF,EACRD,EAAQI,OACLC,IAAYC,WAAWN,EAAQO,MAC/BF,IAAYG,aAAaR,EAAQO,MAErCF,IAAYI,SAAST,EAAQO,MAEnC,OAAO,cAACG,EAAA,EAAD,CACMC,OAAQX,EAAQT,GAChBY,OAAQA,EACRS,OAASX,EAA0B,KAAhBP,EACnBmB,SAAU,GACVC,WAAYb,GALP,UAAYD,EAAQT,OAa1C,OACI,sBAAKrF,UAAWD,EAAQf,SAAxB,UACI,sBAAKgB,UAAWD,EAAQyE,oBAAxB,UACI,cAACqC,EAAA,EAAD,CAAYC,QAPxB,WACI9B,EAAQ+B,KAAR,WAAiBC,YAAiBC,IAAOC,QAAQ7B,OAMzC,SACI,cAAC,IAAD,MAEJ,cAAC8B,EAAA,EAAD,OAEJ,cAAChJ,EAAA,EAAD,CAAca,SAAU4G,EAAwB1G,OAAQ,SACxD,cAACiI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAgBC,WAAY,OACZC,YAAaA,IACbC,WAAW,OACXC,cAAe,Q,SCS5BC,EAvEyC,SAACrJ,GACrD,IAAMsJ,EAAWC,cACXrC,EAAkBlH,EAAMwJ,MAAMC,OAAOC,OAASC,SAAS3J,EAAMwJ,MAAMC,OAAOC,QAAU,EA0BpF/H,EAxBY6D,aAAW,SAACzC,GAAD,OACzB0C,YAAa,CACTmE,eAAgB,CACZrG,QAAS,OACT4C,OAAQpD,EAAMM,SAAS,IAE3ByF,QAAQ,aACJvF,QAAS,QACRR,EAAMS,YAAYsC,KAAK,MAAQ,CAC5BvC,QAAS2D,EAAkB,OAAS,OACpClG,MAAO,SAGf6I,aAAc,CACV/I,OAAQ,OACRC,UAAW,OACX4E,SAAU,EACV,eAAgB,CACZA,SAAU,QAMVI,GAEZ+D,EAAQ9J,EAAM+J,YAAYC,SAASvC,KAAK,SAACT,GACzC,IAAIa,EAASb,EAAKiD,iBAAmB,EAAI,cAACC,EAAA,EAAD,CAASC,MAAOnD,EAAKiD,iBAAkBG,UAAU,SAAUjD,EAEpG,OAAO,cAACiB,EAAA,EAAD,CACMC,OAAQxF,OAAOmE,EAAKC,IACpBqB,OAAQtB,EAAKM,OAAOC,MACpBgB,SAAUvB,EAAKuB,SACfmB,OAAQ1C,EAAKC,GACboD,YAAarD,EAAKC,KAAOC,EACzBW,OAAQA,GANH,OAASb,EAAKC,OAsBpC,OAZA3G,qBAAU,WACF4G,IACAoC,EAASgB,IAAeC,YAAYrD,IACpCoC,EAASkB,YAAgBtD,OAE9B,CAACA,EAAiBoC,IAErBhJ,qBAAU,WACNgJ,EAASmB,iBAEV,IAGC,sBAAK7I,UAAWD,EAAQiI,eAAxB,UACI,sBAAKhI,UAAWD,EAAQmH,QAAxB,UACI,cAAC4B,EAAA,EAAD,CAAM9I,UAAWD,EAAQkI,aAAzB,SACKC,IAEL,cAACf,EAAA,EAAD,CAAS4B,YAAY,gBAExBzD,EACK,cAAC,EAAD,CAAQA,gBAAiBA,IACzB,cAAC,EAAD,Q,SC7EH0D,uBANO,SAACC,GACnB,MACI,CAACd,YAAac,EAAMd,eAMxB,GAFWa,CAGbE,YAAWC,YAAiB1B","file":"static/js/4.a4066331.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport List from '@material-ui/core/List';\n\ntype messagesListPropsType = {\n    messages: Array<JSX.Element>,\n    height: string\n}\n\n/**\n * Returns list of messages width autoscroll functionality.\n * If list scrolled to bottom list will autoscroll.\n * @param {messagesListPropsType} props - props object.\n * @param {Array<JSX.Element>} props.messages - array of messages as JSX.\n * @param {string} props.height - CSS string value for height (i.e. \"10px\").\n * @constructor\n */\nexport const MessagesList: React.FC<messagesListPropsType> = (props) => {\n    const messagesRef = useRef<HTMLLIElement>(null);\n    const [isAutoscroll, setIsAutoscroll] = useState(true);\n\n    /**\n     * Detects scroll end and set autoscroll to true or false.\n     * @param event\n     */\n    function scrollHandler(event: React.UIEvent<HTMLUListElement, UIEvent>) {\n        const element = event.currentTarget;\n\n        if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {\n            !isAutoscroll && setIsAutoscroll(true);\n        } else {\n            isAutoscroll && setIsAutoscroll(false);\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoscroll) {\n            setTimeout(() => {\n                messagesRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\n            }, 500);\n        }\n    }, [props.messages, isAutoscroll]);\n\n    return (\n        <List style={{height: props.height, overflowY: 'auto', width: '100%'}} onScroll={scrollHandler}>\n            {props.messages}\n            <li ref={messagesRef}/>\n        </List>\n    );\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _defineProperty({\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      display: 'block'\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","import React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Empty block with helper text for dialogs page.\n * @constructor\n */\nexport const NoDialog: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            helperText: {\n                display: 'flex',\n                flexGrow: 1,\n                alignItems: 'center',\n                justifyContent: 'center',\n                [theme.breakpoints.down('xs')]: {\n                    display: 'none'\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.helperText}>\n            <Typography variant='h4' color='textSecondary'>Please click on user name to start dialog</Typography>\n        </Container>\n    );\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {\n    getDialogsMessagesSelector,\n    getDialogsUserListSelector,\n    getOwnerIdSelector\n} from '../../../Common/Selectors/Selectors';\nimport Post from '../../../Common/Post/Post';\nimport Divider from '@material-ui/core/Divider';\nimport {AddMessageForm} from '../../../Common/AddMessageForm/AddMessageForm';\nimport {sendMessage} from '../../../reducers/dialogsReducer';\nimport {PostActions} from '../../../Common/Post/PostActions/PostActions';\nimport {MessagesList} from '../../../Common/MessagesList/MessagesList';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {useHistory} from 'react-router-dom';\nimport {userListType} from '../../../types';\nimport {getRouteNameById, routes} from '../../../Common/Routes';\n\ntype dialogPropsType = {\n    currentDialogId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        messages: {\n            flexGrow: 1,\n            width: '20%',\n            margin: theme.spacing(3),\n        },\n        goBackButtonWrapper: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        }\n    }),\n);\n\n/**\n * Returns block of dialog with list of messages and form to add new.\n * @constructor\n */\nexport const Dialog: React.FC<dialogPropsType> = (props) => {\n    const messages = useSelector(getDialogsMessagesSelector);\n    const opponents = useSelector(getDialogsUserListSelector);\n    const ownerId = useSelector(getOwnerIdSelector);\n    const classes = useStyles();\n    const history = useHistory();\n\n    const opponent = opponents.filter(user => {\n        return user.id === props.currentDialogId ? user as userListType : undefined;\n    });\n\n    const opponentPhoto = opponent.length ? opponent[0].photos.small : null;\n\n    let messagesComponentsList = messages.map(message => {\n        const isOwner = message.senderId === ownerId;\n        const action = isOwner\n            ? (message.viewed\n                ? PostActions.textWithOk(message.body)\n                : PostActions.textWithWait(message.body)\n              )\n            : PostActions.onlyText(message.body);\n\n        return <Post key={'Message' + message.id}\n                     postId={message.id}\n                     action={action}\n                     avatar={!isOwner ? opponentPhoto : null}\n                     userName={''}\n                     rightSided={isOwner}\n        />\n    });\n\n    function closeDialog () {\n        history.push(`/${getRouteNameById(routes.dialogs.id)}`);\n    }\n\n    return (\n        <div className={classes.messages}>\n            <div className={classes.goBackButtonWrapper}>\n                <IconButton onClick={closeDialog}>\n                    <ChevronLeftIcon/>\n                </IconButton>\n                <Divider/>\n            </div>\n            <MessagesList messages={messagesComponentsList} height={'70vh'}/>\n            <Divider/>\n            <AddMessageForm blockWidth={'30ch'}\n                            sendMessage={sendMessage}\n                            buttonText='Send'\n                            minTextLength={2}\n            />\n        </div>\n    );\n}","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useEffect} from 'react';\nimport {dialogsActions, getDialogsList, getMessagesList, initialStateType} from '../../reducers/dialogsReducer';\nimport List from '@material-ui/core/List';\nimport Post from '../../Common/Post/Post';\nimport Divider from '@material-ui/core/Divider';\nimport {useDispatch} from 'react-redux';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {MatchParams} from '../../types';\nimport {NoDialog} from './NoDialog/NoDialog';\nimport {Dialog} from './Dialog/Dialog';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {Counter} from '../../Common/Counter/Counter';\n\nexport type dialogsPropsType = {\n    dialogsPage: initialStateType\n};\n\ntype matchType = RouteComponentProps<MatchParams>;\n\n/**\n * Returns page with dialogs.\n * @param {dialogsPropsType} props - props object (whole dialogs stage)\n * @constructor\n */\nconst Dialogs: React.FC<dialogsPropsType & matchType> = (props) => {\n    const dispatch = useDispatch();\n    const currentDialogId = props.match.params.userId ? parseInt(props.match.params.userId) : 0;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            dialogsWrapper: {\n                display: 'flex',\n                margin: theme.spacing(-3)\n            },\n            dialogs: {\n                display: 'flex',\n                [theme.breakpoints.down('xs')]: {\n                    display: currentDialogId ? 'none' : 'flex',\n                    width: '100%'\n                },\n            },\n            dialogsItems: {\n                height: '90vh',\n                overflowY: 'auto',\n                flexGrow: 1,\n                '& > li > div': {\n                    flexGrow: 1,\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let users = props.dialogsPage.userList.map( (user) => {\n        let action = user.newMessagesCount > 0 ? <Counter count={user.newMessagesCount} inCorner={true}/> : undefined;\n\n        return <Post key={'User' + user.id}\n                     postId={String(user.id)}\n                     avatar={user.photos.small}\n                     userName={user.userName}\n                     userId={user.id}\n                     primaryLink={user.id !== currentDialogId}\n                     action={action}\n        />\n    });\n\n    useEffect(() => {\n        if (currentDialogId) {\n            dispatch(dialogsActions.chatChanged(currentDialogId));\n            dispatch(getMessagesList(currentDialogId));\n        }\n    }, [currentDialogId, dispatch]);\n\n    useEffect(() => {\n        dispatch(getDialogsList());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={classes.dialogsWrapper}>\n            <div className={classes.dialogs}>\n                <List className={classes.dialogsItems}>\n                    {users}\n                </List>\n                <Divider orientation='vertical'/>\n            </div>\n            {currentDialogId\n                ? <Dialog currentDialogId={currentDialogId}/>\n                : <NoDialog/>\n            }\n        </div>\n    );\n};\n\nexport default Dialogs;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport {connect} from 'react-redux';\nimport Dialogs, {dialogsPropsType} from './Dialogs';\nimport withAuthRedirect from '../../Hocs/withAuthRedirect';\nimport {appStateType} from '../../redux/reduxStore';\nimport {withRouter} from 'react-router-dom';\n\nlet mapStateToProps = (state: appStateType) => {\n    return (\n        {dialogsPage: state.dialogsPage}\n    );\n};\n\nexport default connect<dialogsPropsType, {}, {}, appStateType>(\n    mapStateToProps,\n    {}\n)(withRouter(withAuthRedirect(Dialogs)));"],"sourceRoot":""}