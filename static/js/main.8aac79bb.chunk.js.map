{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","utils/fontHelpers.ts","Common/Preloader/Preloader.module.css","components/Header/AppHeader.module.css","Common/Post/Post.tsx","Hocs/withAuthRedirect.tsx","reducers/usersReducer.ts","Common/AddMessageForm/EmojiPicker/EmojiPicker.tsx","Common/AddMessageForm/AddMessageForm.tsx","Common/Post/LikesBlock/LikesBlock.tsx","Common/Post/PostActions/PostActions.tsx","Common/Counter/Counter.tsx","components/API/chat-api.ts","reducers/chatReducer.ts","components/Navbar/Navbar.module.css","Common/Routes.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","Common/FormComponents/FieldsComponentsFormik.tsx","reportWebVitals.js","assets/images/vk-rounded.svg","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/AdditionalInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/AdditionalInfo/AdditionalInfo.tsx","components/Profile/ProfileInfo/AdditionalInfoForm/AdditionalInfoForm.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","assets/images/social-network-pattern-background.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","reducers/authReducer.ts","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","reducers/appReducer.ts","Pages/StartPage.tsx","assets/images/logo.svg","components/Header/AppHeader.tsx","components/NotFound.tsx","Common/GlobalAlert/GlobalAlert.tsx","App.tsx","redux/reduxStore.ts","index.tsx","components/API/api.ts","utils/validators.ts","reducers/profileReducer.ts","types.ts","Common/Selectors/Selectors.ts","reducers/dialogsReducer.ts","assets/images/user-male.png","assets/images/preloader-spinner.svg","Common/Preloader/Preloader.tsx","utils/formikSetters.ts","Common/Post/PostActions/PostActions.module.css"],"names":["module","exports","getFontsWithEmoji","theme","fontPool","typography","fontFamily","split","splice","join","Post","props","classes","makeStyles","createStyles","postsItem","padding","justifyContent","rightSided","postWrapper","display","margin","spacing","width","blockWidth","text","whiteSpace","overflowWrap","flexDirection","useStyles","avatarSmall","avatar","userMale","secondary","Fragment","action","postId","primaryLinked","to","getRouteNameById","routes","dialogs","id","userId","userName","alignItems","className","variant","profile","alt","src","primary","primaryLink","withAuthRedirect","Component","connect","state","isAuth","auth","restProps","initialState","users","currentPage","pageSize","isUsersFetching","followingInProgress","filter","searchTerm","friend","mapUserFollowingStatus","userObject","status","followed","userActions","type","isFetching","getUsers","dispatch","getState","a","usersPage","Api","Users","data","items","processFollowUnfollow","apiMethod","actionCreator","follow","unfollow","usersReducer","map","user","EmojiPicker","React","useState","anchorElement","setAnchorElement","isPopoverOpen","Boolean","IconButton","onClick","event","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","open","anchorEl","onClose","onSelect","onEmojiClick","set","AddMessageForm","minLength","minLengthCreator","minTextLength","maxLength","maxTextLength","maxLengthCreator","undefined","validatorsList","required","push","newPostForm","maxWidth","newPostFormInputWrapper","flexGrow","stretched","useDispatch","formik","useFormik","initialValues","newMessage","onSubmit","values","setSubmitting","resetForm","sendMessage","handleSubmit","value","Tooltip","title","aria-label","placement","arrow","createField","FormikField","validatorCreator","multiline","emojiObject","setFieldValue","native","Button","color","disabled","isBlocked","isSubmitting","dirty","isValid","buttonText","likeWrapper","LikesBlock","iconSize","substr","profileActions","addLike","likeCount","fontSize","PostActions","onlyText","Typography","component","textWithOk","styles","textWithIconWrapper","style","icon","textWithWait","textWithLikes","likes","Counter","useTheme","position","inCorner","top","right","label","count","size","subscribers","ws","closeHandler","console","log","notifyConnectionChanged","setTimeout","createChanel","messageHandler","newMessages","JSON","parse","forEach","message","nanoid","subscriber","openHandler","cleanUpWs","removeEventListener","close","WebSocket","addEventListener","chatApi","eventName","callback","send","messages","isConnected","chatActions","payload","_messageHandler","messageHandlerCreator","_connectionHandler","connectionHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","slice","PersonOutlinedIcon","EmailOutlinedIcon","FeaturedPlayListOutlinedIcon","LibraryMusicOutlinedIcon","MessageOutlinedIcon","PeopleAltOutlinedIcon","SettingsOutlinedIcon","getRouteIdByName","routeName","routeId","Object","keys","find","route","FormControl","field","children","meta","form","getFieldMeta","name","hasError","touched","error","helperText","elementProps","isValidElement","cloneElement","root","FormikCheckbox","formikSelect","memo","options","option","key","placeholder","validate","_path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MenuItem","selected","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","Navbar","currentRoute","useHistory","location","pathname","newMessagesCount","useSelector","getNewMessagesCountSelector","selectedIndex","setSelectedIndex","MenuList","currentRouteId","createElement","index","onMenuClick","drawerContainer","List","ProfileStatus","statusInput","statusText","flexBasis","divider","isStatusEditing","setStatusEditing","setStatus","useEffect","toggleEditing","newValue","updateStatus","statusFetching","Preloader","notCentered","isOwner","TextField","autoFocus","onBlur","onChange","target","statusDiv","Divider","_extends","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgVkRounded","_ref","svgRef","titleId","xmlns","height","viewBox","d","ForwardRef","ProfileContact","contactTitle","contactInfo","Icon","SvgIcon","VkRounded","rel","href","additionalInfo","marginLeft","marginRight","additionalInfoItem","marginTop","wrapped","flexWrap","contacts","AdditionalInfo","ContactsList","contactValue","isNeedContacts","every","contact","aboutMe","lookingForAJob","lookingForAJobDescription","setEditMode","additionalInfoForm","buttonsWrapper","additionalInfoRow","textAlign","infoWrapper","errorText","errorsWrapper","FormBasicInfo","checked","setChecked","Card","triggerCheckbox","FormContactsInfo","AdditionalInfoForm","normalizeContacts","enableReinitialize","formData","setFieldError","hasApiErrors","saveProfile","submitCount","onChancel","avatarWrapper","large","input","ProfileAvatar","history","profileAvatarLarge","largePhoto","AddDialogButton","startRefreshDialog","Avatar","AvatarUploadButton","accept","files","savePhoto","htmlFor","startIcon","wallpaper","backgroundImage","ProfileBackground","backgroundSize","profileDescriptionWrapper","ProfileInfo","isEditMode","profileDescription","photos","fullName","postsList","backgroundColor","palette","background","paper","postsTitle","MyPosts","posts","postsData","post","postBlock","sendPost","MyPostsContainer","profilePage","small","login","Profile","ProfileContainer","getProfile","parseInt","match","params","getStatus","getProfileData","prevProps","prevState","snapshot","mapDispatchToProps","withRouter","email","captchaUrl","authActions","url","getAuth","Auth","Me","getCaptcha","Security","authReducer","maxLength30","loginForm","loginInput","alignSelf","marginBottom","LoginForm","password","rememberMe","captcha","errorCallback","emptyStatusCallback","Login","resultCode","captchaResultCodeType","captchaRequired","checkboxWrapper","autoComplete","loginPage","getIsAuthSelector","getCaptchaUrlSelector","initDone","appActions","StartPage","loginBlock","subtitle1","appBar","zIndex","drawer","headerContentWrapper","menuButton","breakpoints","up","leftPart","AppHeader","getLoginSelector","ownerPhotos","getOwnerPhotosSelector","AppBar","Toolbar","edge","headerLogo","logo","Logout","loginLink","NotFound","GlobalAlert","Snackbar","isOpen","reason","setNotificationOpen","autoHideDuration","TransitionComponent","Slide","Settings","lazy","Music","News","UsersContainer","DialogsContainer","ChatPage","Content","content","fallback","exact","path","news","music","settings","chat","isInitDone","app","makeInit","getNewMessagesCount","getOwnerProfile","isNotificationOpen","notificationText","setNotificationText","isMenuOpen","setMenuOpen","down","drawerPaper","catchGenericError","response","window","Drawer","rootReducer","combineReducers","profileReducer","dialogsPage","dialogsReducer","appReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","defaultApi","axios","create","withCredentials","baseURL","headers","get","page","term","delete","resultCodesType","Success","result","put","file","FormData","append","Promise","resolve","reject","Dialogs","getDialogsList","getMessagesList","body","validators","validator","ownerProfile","newPost","deletePost","setProfile","setOwnersProfile","updateProfile","toggleStatusFetching","savePhotoSuccess","alert","ownerId","emptyErrorCallback","statusCallback","setErrors","replace","newProfile","getUsersSelector","getCurrentPageSelector","getPageSizeSelector","getIsUsersFetchingSelector","getFollowingInProgressSelector","getUsersFilterSelector","getOwnerIdSelector","getChatMessages","getIsChatConnectedSelector","getDialogsMessagesSelector","messageList","getDialogsUserListSelector","userList","currentDialogId","dialogsActions","messageSent","dialogsListReceived","list","messagesListReceived","chatChanged","chatId","chatMessagesRead","newMessagesCountReceived","messagesWasRead","userItem","hasNewMessages","preloaderWrapper","preloader","formikSetErrors","formikSetStatus","subkey","errorTextRaw","rawError","toLowerCase","substring"],"mappings":"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","file":"static/js/main.8aac79bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDescription\":\"ProfileInfo_profileDescription__1ViSc\",\"statusDiv\":\"ProfileInfo_statusDiv__14SC_\"};","import {Theme} from '@material-ui/core/styles';\n\n/**\n * Returns fontFamily string.\n * @param {Theme} theme - Material-UI theme\n */\nexport function getFontsWithEmoji(theme: Theme) {\n    let fontPool = theme.typography.fontFamily?.split(',');\n    fontPool?.splice(1, 0, \"Twemoji Mozilla\");\n    return fontPool?.join(',');\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__1-vJZ\",\"preloader\":\"Preloader_preloader__1fZTW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerLogo\":\"AppHeader_headerLogo__1q3ko\",\"loginLink\":\"AppHeader_loginLink__1Epif\"};","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport userMale from \"../../assets/images/user-male.png\";\nimport {stringOrNull} from '../../types';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport {NavLink} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../Routes';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype postPropsType = {\n    postId: string,\n    action?: React.ReactElement,\n    avatar: stringOrNull,\n    userName: stringOrNull,\n    userId?: number,\n    blockWidth?: string,\n    rightSided?: boolean,\n    primaryLink?: boolean,\n}\n\n/**\n * Unified post block with avatar, title, text and optional likes-block.\n * @param {postPropsType} props - props object\n * @param {string} props.postId - post ID as string\n * @param {React.ReactElement=} props.action - post text\n * @param {string|null} props.avatar - link to avatar image\n * @param {string|null} props.userName - text for title\n * @param {number=} props.userId - if exist, will append to avatar navlink\n * @param {string=} props.blockWidth - sets max-width of block (CSS value, i.e. \"5px\")\n * @param {boolean=} props.primaryLink - if true, title text will anchor\n * @constructor\n */\nconst Post: React.FC<postPropsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            postsItem: {\n                padding: 0,\n                justifyContent: props.rightSided ? 'end' : 'start'\n            },\n            postWrapper: {\n                display: 'flex',\n                margin: theme.spacing(1),\n                width: props.blockWidth || 'max-content',\n                padding: theme.spacing(1, 2)\n            },\n            text: {\n                whiteSpace: 'pre-line',\n                overflowWrap: 'break-word',\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                '& > p > span': {\n                    fontFamily: getFontsWithEmoji(theme)\n                },\n            }\n        }),\n    );\n\n    const classes = useStyles();\n    let avatarSmall = props.avatar || userMale;\n\n    const secondary = [\n        <React.Fragment key={props.postId}>\n            {props.action}\n        </React.Fragment>\n    ];\n\n    const primaryLinked = <NavLink to={`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`}>\n                              {props.userName}\n                          </NavLink>;\n\n    return(\n        <ListItem alignItems='flex-start' className={classes.postsItem}>\n            <Card variant={'outlined'} className={classes.postWrapper}>\n                <ListItemAvatar>\n                    {!!props.userId\n                        ? <NavLink to={`/${getRouteNameById(routes.profile.id)}/${props.userId}`}>\n                            <Avatar alt='ava' src={avatarSmall} />\n                          </NavLink>\n                        : <Avatar alt='ava' src={avatarSmall} />\n                    }\n                </ListItemAvatar>\n                <ListItemText className={classes.text}\n                              primary={!!props.primaryLink ? primaryLinked : props.userName}\n                              secondary={secondary}\n                />\n            </Card>\n        </ListItem>\n    );\n};\n\nexport default Post;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {appStateType} from '../redux/reduxStore';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\nfunction withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\n    let mapStateToProps = (state: appStateType) => {\n        return (\n            {isAuth: state.auth.isAuth}\n        );\n    };\n\n    const AuthRedirect: React.FC<mapStatePropsType & {}> = (props) => {\n        let {isAuth, ...restProps} = props;\n\n        if (!isAuth) {\n            return <Redirect to='/login'/>\n        }\n\n        return <Component {...restProps as WCP}/>;\n    }\n\n    return connect(mapStateToProps)(AuthRedirect);\n}\n\nexport default withAuthRedirect;","import {Api} from '../components/API/api';\nimport {baseThunkType, arrayOfNumbers, usersType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {Dispatch} from 'redux';\n\nexport type initialStateType = {\n    users: Array<usersType>,\n    currentPage: number,\n    pageSize: number,\n    isUsersFetching: boolean,\n    followingInProgress: arrayOfNumbers,\n    filter: filterType\n}\n\nexport type filterType = {\n    searchTerm: stringOrNull,\n    friend: null | boolean\n}\ntype actionsType = inferActionsType<typeof userActions>;\ntype thunkType = baseThunkType<actionsType>;\n\ntype apiMethodType = typeof Api.Users.follow | typeof Api.Users.unfollow;\n\nconst initialState: initialStateType = {\n    users: [],\n    currentPage: 0,\n    pageSize: 12,\n    isUsersFetching: false,\n    followingInProgress: [],\n    filter: {\n        searchTerm: null,\n        friend: null\n    }\n};\n\nfunction mapUserFollowingStatus(userObject: usersType, userId: number, status: boolean) {\n        if (userObject.id === userId) {\n            return {...userObject, followed: status}\n        }\n        return userObject;\n}\n\nconst usersReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, true))\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => mapUserFollowingStatus(user, action.userId, false))\n            }\n        case 'SN/USERS/ZERO_NEXT_PAGE':\n            return {...state, currentPage: 0};\n        case 'SN/USERS/SET_SEARCH_TERM':\n            return {...state, filter: {...action.filter}, users: []};\n        case 'SN/USERS/SET_USERS':\n            return {...state, users: [...state.users, ...action.users]}\n        case 'SN/USERS/NEXT_PAGE':\n            return {...state, currentPage: ++state.currentPage}\n        case 'SN/USERS/UPDATE_IS_USERS_FETCHING':\n            return {...state, isUsersFetching: action.isUsersFetching}\n        case 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING':\n            return {\n                ...state,\n                followingInProgress:\n                    action.isFetching\n                        ? [...state.followingInProgress, action.userId]\n                        : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const userActions = {\n    followUser: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowUser: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    zeroNextPage: () => ({type: 'SN/USERS/ZERO_NEXT_PAGE'} as const),\n    setSearchFilter: (filter: filterType) => ({type: 'SN/USERS/SET_SEARCH_TERM', filter} as const),\n    setUsers: (users: Array<usersType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setNextPage: () => ({type: 'SN/USERS/NEXT_PAGE'} as const),\n    updateUsersFetching: (isUsersFetching: boolean) => ({\n        type: 'SN/USERS/UPDATE_IS_USERS_FETCHING',\n        isUsersFetching\n    } as const),\n    updateFollowingFetching: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/UPDATE_IS_FOLLOWING_FETCHING',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const getUsers = (pageSize: number, currentPage: number, filter: filterType): thunkType => {\n    return async (dispatch, getState) => {\n        dispatch(userActions.updateUsersFetching(true));\n        if (filter !== getState().usersPage.filter) {\n            dispatch(userActions.setSearchFilter(filter));\n            dispatch(userActions.zeroNextPage());\n        }\n\n        //TODO: хранить currentPage в стейте и оттуда же доставать\n        let data = await Api.Users.getUsers(pageSize, currentPage, filter);\n\n        dispatch(userActions.updateUsersFetching(false));\n\n        if (data === null) {\n            return;\n        }\n\n        dispatch(userActions.setUsers(data.items));\n        dispatch(userActions.setNextPage());\n    }\n}\n\nconst processFollowUnfollow = async (\n    userId: number,\n    dispatch: Dispatch<actionsType>,\n    apiMethod: apiMethodType,\n    actionCreator: (userId: number) => actionsType\n) => {\n    dispatch(userActions.updateFollowingFetching(true, userId));\n    let isSuccessful = await apiMethod(userId);\n\n    if (isSuccessful) {\n        dispatch(actionCreator(userId));\n    }\n\n    dispatch(userActions.updateFollowingFetching(false, userId));\n}\n\nexport const follow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.follow, userActions.followUser);\n    }\n}\n\nexport const unfollow = (userId: number): thunkType => {\n    return async (dispatch) => {\n        await processFollowUnfollow(userId, dispatch, Api.Users.unfollow, userActions.unfollowUser);\n    }\n}\n\nexport default usersReducer;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\nimport Popover from '@material-ui/core/Popover';\nimport 'emoji-mart/css/emoji-mart.css'\nimport {BaseEmoji, Picker} from 'emoji-mart'\n\ntype emojiPickerPropsType = {\n    onEmojiClick: (emojiObject:  BaseEmoji) => void\n}\n\n/**\n * Returns IconButton with emoji picker in popup.\n * @param {emojiPickerPropsType} props - props object\n * @param {function(emojiObject: BaseEmoji):void} props.onEmojiClick - function which will set picked emoji\n * @constructor\n */\nexport const EmojiPicker: React.FC<emojiPickerPropsType> = (props) => {\n    const [anchorElement, setAnchorElement] = React.useState<HTMLButtonElement | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorElement(null);\n    };\n\n    const isPopoverOpen = Boolean(anchorElement);\n\n    return (\n        <React.Fragment>\n            <IconButton onClick={handleClick}>\n                <EmojiEmotionsOutlinedIcon/>\n            </IconButton>\n            <Popover\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={isPopoverOpen}\n                anchorEl={anchorElement}\n                onClose={handleClose}\n            >\n                <Picker onSelect={props.onEmojiClick}\n                        set='apple'\n                />\n            </Popover>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport {createField, FormikField} from '../FormComponents/FieldsComponentsFormik';\nimport {maxLengthCreator, minLengthCreator, required, validatorCreator} from '../../utils/validators';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useDispatch} from 'react-redux';\nimport {EmojiPicker} from './EmojiPicker/EmojiPicker';\nimport {BaseEmoji} from 'emoji-mart';\n\ntype propsType = {\n    blockWidth?: string,\n    buttonText: string,\n    minTextLength: number,\n    maxTextLength?: number,\n    isBlocked?: boolean,\n    sendMessage: (text: string) => void\n};\n\ntype formDataType = {\n    newMessage: string\n}\n\ntype fieldNamesType = keyof formDataType;\n\n/**\n * Returns form for adding new message with one multiline input and one button.\n * @param {propsType} props - props object.\n * @param {string=} props.blockWidth - width of form (optional param, 'inherit' by default)\n * @param {string} props.buttonText - text on button\n * @param {number} props.minTextLength - min length of input value\n * @param {number=} props.maxTextLength - max length of input value (optional)\n * @param {boolean} props.isBlocked - is need to disable button\n * @param {function(text: string): void} props.sendMessage - callback for set new message\n * @constructor\n */\nexport const AddMessageForm: React.FC<propsType> = (props) => {\n    let minLength = minLengthCreator(props.minTextLength);\n    let maxLength = props.maxTextLength ? maxLengthCreator(props.maxTextLength) : undefined;\n\n    let validatorsList = [required, minLength];\n\n    if (maxLength !== undefined) {\n        validatorsList.push(maxLength);\n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            newPostForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: props.blockWidth || 'inherit',\n                '& > div': {\n                    display: 'flex',\n                    margin: theme.spacing(1),\n                },\n            },\n            newPostFormInputWrapper: {\n                display: 'flex',\n                '& > div': {\n                    display: 'flex',\n                    flexGrow: 1,\n                    margin: theme.spacing(1),\n                },\n            },\n            stretched: {\n                flexGrow: 1,\n            }\n        }),\n    );\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onSubmit(values: formDataType, {setSubmitting, resetForm}: FormikHelpers<formDataType>) {\n        dispatch(props.sendMessage(values.newMessage));\n        setSubmitting(false);\n        resetForm();\n    }\n\n    const formik = useFormik({\n        initialValues: {newMessage: ''},\n        onSubmit,\n    });\n\n    const onEmojiClick = (emojiObject: BaseEmoji) => {\n        formik.setFieldValue('newMessage', formik.values.newMessage + emojiObject.native);\n    };\n\n    return (\n        <form onSubmit={formik.handleSubmit} className={classes.newPostForm}>\n            <div className={classes.newPostFormInputWrapper}>\n                <FormikProvider value={formik}>\n                    <Tooltip title={'You can type multiline. Just hit enter.'} aria-label='Hint' placement=\"right\" arrow>\n                        {createField<fieldNamesType>(\n                            classes.stretched,\n                            'Type something',\n                            'newMessage',\n                            FormikField,\n                            validatorCreator(validatorsList),\n                            {multiline: true}\n                        )}\n                    </Tooltip>\n                </FormikProvider>\n                <EmojiPicker onEmojiClick={onEmojiClick}/>\n            </div>\n            <div>\n                <Button variant='contained'\n                        color='primary'\n                        type='submit'\n                        disabled={!!props.isBlocked || formik.isSubmitting || !formik.dirty || !formik.isValid}\n                >\n                    {props.buttonText}\n                </Button>\n            </div>\n        </form>\n    );\n}","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\n\ntype likesBlockPropsType = {\n    postId: string,\n    likeCount: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        likeWrapper: {\n            display: 'flex',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        }\n    }),\n);\n\n/**\n * Returns counter for post likes with tooltip and button to add like.\n * @param {likesBlockPropsType} props\n * @constructor\n */\nexport const LikesBlock: React.FC<likesBlockPropsType> = (props) => {\n    const iconSize = 'small';\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    /**\n     * Add like to post\n     * @param {React.MouseEvent<HTMLSpanElement>} event - sets automatically, not need to put it\n     */\n    const likeHandler = (event: React.MouseEvent<HTMLSpanElement>) => {\n        let targetId = event.currentTarget.id;\n        let postId = targetId.substr(5);\n\n        if (postId) {\n            dispatch(profileActions.addLike(postId));\n        }\n    };\n\n    return (\n        <span onClick={likeHandler} id={'post-' + props.postId} className={classes.likeWrapper}>\n            <Tooltip arrow title='Like' aria-label='like'>\n                {props.likeCount ? <ThumbUpIcon fontSize={iconSize}/> : <ThumbUpOutlinedIcon fontSize={iconSize}/>}\n            </Tooltip>\n            <span>{props.likeCount}</span>\n        </span>\n    );\n};","import React from 'react';\nimport styles from './PostActions.module.css'\nimport Typography from '@material-ui/core/Typography';\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\nimport ScheduleOutlinedIcon from '@material-ui/icons/ScheduleOutlined';\nimport {LikesBlock} from '../LikesBlock/LikesBlock';\n\nexport const PostActions = {\n    onlyText(text: string) {\n        return <Typography component='span'>{text}</Typography>;\n    },\n    textWithOk(text: string) {\n        return (\n            <div className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <CheckOutlinedIcon style={{fontSize: '0.9rem'}} color='primary' className={styles.icon}/>\n            </div>\n        );\n    },\n    textWithWait(text: string) {\n        return (\n            <div className={styles.textWithIconWrapper}>\n                <Typography component='span'>{text}</Typography>\n                <ScheduleOutlinedIcon style={{fontSize: '0.9rem'}} color='disabled' className={styles.icon}/>\n            </div>\n        );\n    },\n    textWithLikes(text: string, postId: string, likes: number) {\n        return (\n            <>\n                <Typography component='span'>{text}</Typography>\n                <LikesBlock postId={postId} likeCount={likes}/>\n            </>\n        );\n    }\n}","import React from 'react';\nimport {useTheme} from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\n\ntype counterPropsType = {\n    count: number,\n    inCorner?: boolean\n}\n\n/**\n * Returns small numeric label.\n * @param {counterPropsType} props - props object\n * @param {number} props.count - number which will be show.\n * @param {boolean=} props.isInCorner - if true, will be positioned in top-right corner (optional).\n * @constructor\n */\nexport const Counter: React.FC<counterPropsType> = (props) => {\n    const theme = useTheme();\n    return (\n        <Chip style={{\n                margin: theme.spacing(0, 1),\n                position: props.inCorner ? 'absolute' : undefined,\n                top: props.inCorner ? theme.spacing(1) : undefined,\n                right: props.inCorner ? theme.spacing(0) : undefined\n                }}\n              color='primary'\n              label={props.count}\n              size='small'/>\n    );\n}","import {nanoid} from 'nanoid';\n\ntype ApiMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n};\n\nexport type eventNamesType = 'message-received' | 'connection-changed';\n\nexport interface messageType extends ApiMessageType {\n    id: string\n}\n\ntype messageReceivedSubscriberType = (messages: Array<messageType>) => void;\ntype connectionChangedSubscriberType = (status: boolean) => void;\ntype subscribersType = {\n    'message-received': Array<messageReceivedSubscriberType>,\n    'connection-changed': Array<connectionChangedSubscriberType>\n}\n\n/** @constant {string} URL to websocket end-point */\nconst BASE_URL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx';\n\nlet subscribers: subscribersType = {\n    'message-received': [],\n    'connection-changed': []\n};\n\nlet ws: WebSocket | null = null;\n\nfunction closeHandler() {\n    console.log('CLOSE WS');\n    notifyConnectionChanged(false);\n    setTimeout(createChanel, 3000);\n}\n\nfunction messageHandler(event: MessageEvent) {\n    const newMessages = JSON.parse(event.data);\n    newMessages.forEach((message: messageType) => message.id = nanoid());\n    subscribers['message-received'].forEach(subscriber => subscriber(newMessages));\n}\n\n/**\n * Notify about connection is opened\n */\nfunction openHandler() {\n    notifyConnectionChanged(true);\n}\n\n/**\n * Clean WebSocket object from listeners and closes connection.\n */\nfunction cleanUpWs() {\n    ws?.removeEventListener('close', closeHandler);\n    ws?.removeEventListener('message', messageHandler);\n    ws?.removeEventListener('open', openHandler);\n    ws?.close();\n}\n\nfunction notifyConnectionChanged(status: boolean) {\n    subscribers['connection-changed'].forEach(subscriber => subscriber(status));\n}\n\nfunction createChanel() {\n    cleanUpWs();\n    ws = new WebSocket(BASE_URL);\n    notifyConnectionChanged(false);\n    ws.addEventListener('close', closeHandler);\n    ws.addEventListener('message', messageHandler);\n    ws.addEventListener('open', openHandler);\n}\n\nexport const chatApi = {\n    //TODO: refactor this\n    subscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName].push(callback);\n        // @ts-ignore\n        return () => subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    //TODO: refactor this too\n    unsubscribe(eventName: eventNamesType, callback: messageReceivedSubscriberType | connectionChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback);\n    },\n    sendMessage(message: string) {\n        ws?.send(message);\n    },\n    connect() {\n        createChanel();\n    },\n    disconnect() {\n        cleanUpWs();\n        subscribers['message-received'] = [];\n        subscribers['connection-changed'] = [];\n    }\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {chatApi, messageType} from '../components/API/chat-api';\nimport {Dispatch} from 'redux';\n\n/**\n * @constant\n * @type number\n * @description Maximal number of posts in chat\n */\nconst MAX_CHAT_MESSAGES = 100;\n\nexport type initialStateType = {\n    messages: Array<messageType>,\n    isConnected: boolean\n};\n\ntype actionsType = inferActionsType<typeof chatActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    messages: [],\n    isConnected: false\n};\n\nconst chatReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/CHAT/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload].slice(-MAX_CHAT_MESSAGES)\n            };\n        case 'SN/CHAT/CHAT_CLEARED':\n            return {\n                ...state,\n                messages: []\n            };\n        case 'SN/CHAT/CONNECTION_CHANGED':\n            return {\n                ...state,\n                isConnected: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport const chatActions = {\n    messagesReceived: (messages: Array<messageType>) => ({type: 'SN/CHAT/MESSAGES_RECEIVED', payload: messages} as const),\n    chatCleared: () => ({type: 'SN/CHAT/CHAT_CLEARED'} as const),\n    connectionChanged: (isConnected: boolean) => ({type: 'SN/CHAT/CONNECTION_CHANGED', payload: isConnected} as const)\n}\n\nlet _messageHandler: ((messages: Array<messageType>) => void) | null = null;\n\n/**\n * Helper function for create listener of new messages.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet messageHandlerCreator = (dispatch: Dispatch) => {\n    if (_messageHandler === null) {\n        _messageHandler = (messages) => {\n            dispatch(chatActions.messagesReceived(messages));\n        }\n    }\n\n    return _messageHandler;\n};\n\nlet _connectionHandler: ((status: boolean) => void) | null = null;\n\n/**\n * Helper function for create listener of connection.\n * Returns ready listener function.\n * @param {Dispatch} dispatch\n */\nlet connectionHandlerCreator = (dispatch: Dispatch) => {\n    if (_connectionHandler === null) {\n        _connectionHandler = (status) => {\n            dispatch(chatActions.connectionChanged(status));\n        }\n    }\n\n    return _connectionHandler;\n};\n\n/**\n * Starts connection to chat and will set new messages and connection status to state.\n */\nexport const startMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.connect();\n    chatApi.subscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.subscribe('connection-changed', connectionHandlerCreator(dispatch));\n}\n\n/**\n * Stops listeners, clears chat and disconnects from server.\n */\nexport const stopMessagesListening = (): thunkType => (dispatch) => {\n    chatApi.unsubscribe('message-received', messageHandlerCreator(dispatch));\n    chatApi.unsubscribe('connection-changed', connectionHandlerCreator(dispatch));\n    dispatch(chatActions.chatCleared());\n    chatApi.disconnect();\n}\n\n/**\n * Send new message to chat\n * @param {string} message - text of message\n */\nexport const sendMessage = (message: string): thunkType => () => {\n    chatApi.sendMessage(message);\n}\n\nexport default chatReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerContainer\":\"Navbar_drawerContainer__1aacK\"};","import PersonOutlinedIcon from '@material-ui/icons/PersonOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport FeaturedPlayListOutlinedIcon from '@material-ui/icons/FeaturedPlayListOutlined';\nimport LibraryMusicOutlinedIcon from '@material-ui/icons/LibraryMusicOutlined';\nimport MessageOutlinedIcon from '@material-ui/icons/MessageOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\nimport {SvgIconTypeMap} from '@material-ui/core';\n\nexport type routesVariants = 'profile' | 'dialogs' | 'news' | 'music' | 'chat' | 'users' | 'settings';\n\nexport type routesType = {\n    [key in routesVariants]: {\n        id: number,\n        title: string,\n        icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>\n    };\n};\n\n/**\n * Object for pages routines in app.\n */\nexport const routes: routesType = {\n    'profile': {id: 1, title: 'Profile', icon: PersonOutlinedIcon},\n    'dialogs': {id: 2, title: 'Dialogs', icon: EmailOutlinedIcon},\n    'news': {id: 3, title: 'News', icon: FeaturedPlayListOutlinedIcon},\n    'music': {id: 4, title: 'Music', icon: LibraryMusicOutlinedIcon},\n    'chat': {id: 5, title: 'Chat', icon: MessageOutlinedIcon},\n    'users': {id: 6, title: 'Users', icon: PeopleAltOutlinedIcon},\n    'settings': {id: 7, title: 'Settings', icon: SettingsOutlinedIcon},\n}\n\n/**\n * Gets route ID.\n * @param {routesVariants} routeName route as string\n */\nexport const getRouteIdByName = (routeName: routesVariants) => {\n    return routeName in routes ? routes[routeName].id : 0;\n}\n\n/**\n * Gets route name as string.\n * @param {number} routeId route ID\n */\nexport const getRouteNameById = (routeId: number) => {\n    return Object.keys(routes).find(route => routes[route as routesVariants].id === routeId);\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkboxWrapper\":\"Login_checkboxWrapper__7_o-w\"};","import React from \"react\";\nimport {Field, FieldProps} from \"formik\";\nimport {validatorType} from \"../../utils/validators\";\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {createStyles, makeStyles} from '@material-ui/core';\nimport {getFontsWithEmoji} from '../../utils/fontHelpers';\n\ntype elementPropsType = {\n    error?: boolean,\n    helperText?: string\n};\n\n/**\n * Constructs wrapped component for formik field.\n * @param {Object} field\n * @param {Object | Array} children - React children\n * @param {Object} props - any needed props\n * @constructor\n */\nconst FormControl: React.FC<FieldProps> = ({field, children, ...props}) => {\n    const meta = props.form.getFieldMeta(field.name);\n    const hasError = meta.touched && meta.error;\n    const helperText = meta.error || undefined;\n\n    const elementProps: typeof field & typeof props & elementPropsType = {\n        ...field,\n        ...props\n    };\n\n    if (hasError) elementProps.error = !!hasError;\n    if (helperText) elementProps.helperText = helperText;\n\n    return (\n        <div>\n            {React.isValidElement(children) && React.cloneElement(children, elementProps)}\n        </div>\n    );\n};\n\n/**\n * Material-UI input for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikField: React.FC<FieldProps> = (props) => {\n    const useStyles = makeStyles((theme) =>\n        createStyles({\n            root: {\n                '& > div': {\n                    fontFamily: getFontsWithEmoji(theme)\n                }\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <FormControl {...props}><TextField classes={classes}/></FormControl>\n    );\n};\n\n/**\n * Material-UI checkbox for formik field constructor.\n * @param {Object} props - any needed props\n */\nexport const FormikCheckbox: React.FC<FieldProps> = (props) => {\n    return (\n        <FormControl {...props}><Checkbox/></FormControl>\n    );\n};\n\n/**\n * Material-UI select for formik field constructor.\n * @param {Object} props - props.children must be transferred for select options and must be an Array\n */\nexport const formikSelect: React.FC<FieldProps> = React.memo((props) => {\n    let options = props.children as Array<{key: string, value: string}>;\n\n    return (\n        <FormControl {...props}>\n            <Select>\n                {options && options.map(option => {\n                    return(\n                        <MenuItem key={option.key} value={option.key}>{option.value}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n});\n\n/**\n * Creates formik field based on transferred component.\n * @param {string | undefined} className\n * @param {string | undefined} placeholder\n * @param {string} name - field name as string\n * @param {React.FC} component - valid React component\n * @param {validatorType} validate - field validator\n * @param {Object} props - any props as object\n */\nexport function createField<namesType extends string> (\n    className: string | undefined,\n    placeholder: string | undefined,\n    name: namesType,\n    component: React.FC<FieldProps>,\n    validate: validatorType,\n    props = {}\n) {\n    return (\n        <Field className={className}\n               placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgVkRounded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm.25 16.996h-2.134c-1.205 0-1.409-.687-2.401-1.679-.897-.897-1.395-.209-1.374 1.068.006.339-.161.611-.566.611-1.264 0-3.08.178-4.918-1.806-1.883-2.033-3.857-6.111-3.857-6.513 0-.237.196-.344.524-.344h2.17c.574 0 .623.284.783.649.667 1.521 2.265 4.574 2.69 2.87.244-.978.344-3.245-.703-3.44-.594-.11.452-.746 1.968-.746.377 0 .786.041 1.205.137.769.179.771.523.761 1.026-.039 1.903-.269 3.184.233 3.507.479.31 1.739-1.717 2.403-3.281.183-.433.219-.722.734-.722h2.654c1.39 0-.182 1.997-1.383 3.557-.968 1.255-.916 1.28.209 2.324.803.744 1.75 1.76 1.75 2.336.002.272-.21.446-.748.446z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgVkRounded);\nexport default __webpack_public_path__ + \"static/media/vk-rounded.850582a3.svg\";\nexport { ForwardRef as ReactComponent };","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport styles from './Navbar.module.css';\nimport {Link, LinkProps, useHistory} from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {getRouteIdByName, getRouteNameById, routes, routesVariants} from '../../Common/Routes';\nimport {useSelector} from 'react-redux';\nimport {getNewMessagesCountSelector} from '../../Common/Selectors/Selectors';\nimport {Counter} from '../../Common/Counter/Counter';\n\ninterface MainMenuItemProps {\n    icon: React.ReactElement;\n    primary: string;\n    secondary?: JSX.Element;\n    to: string;\n    selected?: boolean;\n    onClick: () => void;\n}\n\ntype navbarPropsType = {\n    onMenuClick: () => void\n}\n\n/**\n * Returns one item (<li> for <ul>) of app menu.\n * @param {MainMenuItemProps} props\n * @constructor\n */\nconst MenuItem = (props: MainMenuItemProps) => {\n    const {icon, primary, secondary, to, selected, onClick} = props;\n\n    const renderLink = React.useMemo(() =>\n            React.forwardRef<any, Omit<LinkProps, 'to'>>((itemProps, ref) => (\n                <Link to={to} ref={ref} {...itemProps} />\n            )),\n        [to]);\n\n    return (\n        <li>\n            <ListItem button component={renderLink} selected={selected} onClick={onClick}>\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText style={{display: 'flex'}} primary={primary} secondary={secondary}/>\n            </ListItem>\n        </li>\n    );\n}\n\n/**\n * Returns complete app menu list.\n * @constructor\n */\nconst Navbar: React.FC<navbarPropsType> = (props) => {\n    const history = useHistory();\n    const currentRoute = history.location.pathname.substr(1) as routesVariants;\n    const newMessagesCount = useSelector(getNewMessagesCountSelector);\n    const [selectedIndex, setSelectedIndex] = useState(getRouteIdByName(currentRoute));\n\n    const setActive = (index: number) => {\n        props.onMenuClick();\n        setSelectedIndex(index);\n    };\n\n    const MenuList = Object.keys(routes).map(route => {\n        let currentRoute = route as routesVariants;\n        let currentRouteId = routes[currentRoute].id;\n        let title = routes[currentRoute].title;\n        let icon = React.createElement(routes[currentRoute].icon);\n        let routeName = getRouteNameById(currentRouteId);\n        let secondary = (routeName === 'dialogs' && newMessagesCount > 0) ? <Counter count={newMessagesCount}/> : undefined;\n\n        return <MenuItem to={\"/\" + routeName}\n                         primary={title}\n                         secondary={secondary}\n                         icon={icon}\n                         selected={selectedIndex === currentRouteId}\n                         onClick={() => {setActive(currentRouteId)}}\n                         key={routeName}\n        />\n    });\n\n    return(\n        <div className={styles.drawerContainer}>\n            <List>\n                {MenuList}\n            </List>\n        </div>\n    );\n};\n\nexport default Navbar;","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport styles from './ProfileInfo.module.css';\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    blockWidth?: string,\n    updateStatus: (status: string) => void\n};\n\n/**\n * Returns status block or input for editing status.\n * @param {propsType} props - props object\n * @param {string} props.status - status text\n * @param {boolean} props.isOwner - is user owner of this page\n * @param {boolean} props.statusFetching - fetching in progress flag\n * @param {string=} props.blockWidth - with of block (optional)\n * @param {function(status: string):void} props.updateStatus - callback for set status\n * @constructor\n */\nconst ProfileStatus: React.FC<propsType> = (props) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            statusInput: {\n                margin: theme.spacing(1),\n            },\n            statusText: {\n                overflowWrap: 'anywhere',\n                maxWidth: props.blockWidth || 'auto',\n                flexBasis: '35.5ch',\n                flexGrow: 1,\n                whiteSpace: 'pre-line'\n            },\n            divider: {\n                maxWidth: props.blockWidth || 'auto',\n            }\n        }),\n    );\n\n    const classes = useStyles();\n\n    let statusText = props.status || 'No status';\n\n    let [isStatusEditing, setStatusEditing] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const toggleEditing = () => {\n        let newValue = !isStatusEditing;\n        setStatusEditing(newValue);\n\n        if (!newValue && status && (statusText !== status)) {\n            props.updateStatus(status);\n        }\n    }\n\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setStatus(event.target.value);\n    }\n\n    if (props.statusFetching) {\n        return <Preloader notCentered={true}/>\n    }\n\n    return isStatusEditing && props.isOwner\n        ? <Tooltip title=\"Click to empty place to save\" aria-label=\"save status\" placement=\"right\">\n            <TextField autoFocus={true}\n                       onBlur={toggleEditing}\n                       onChange={onStatusChange}\n                       className={classes.statusInput}\n                       value={status}\n                       multiline={true}\n            />\n          </Tooltip>\n        : <React.Fragment>\n            <div className={styles.statusDiv} onClick={toggleEditing}>\n                {props.isOwner\n                    ? <Tooltip title=\"Click to edit\" aria-label=\"edit status\" placement=\"right\">\n                        <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                    </Tooltip>\n                    : <Typography color='textSecondary' className={classes.statusText}>{statusText}</Typography>\n                }\n            </div>\n            <Divider className={classes.divider}/>\n        </React.Fragment>;\n}\n\nexport default ProfileStatus;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HttpIcon from '@material-ui/icons/Http';\nimport {contactsType} from '../../../../../types';\nimport {ReactComponent as VkRounded} from '../../../../../assets/images/vk-rounded.svg';\n\ntype contactKeysType = keyof contactsType;\n\ntype propsType = {\n    contactTitle: contactKeysType,\n    contactInfo: string\n}\n\n/**\n * Returns one icon-button as anchor with contact.\n * @param {{\n * contactTitle: contactKeysType\n * contactInfo: string\n * }} props - props like contactsType\n * @param {contactKeysType} props.contactTitle - name of contact\n * @param {string} props.contactInfo - contact link\n * @constructor\n */\nexport const ProfileContact: React.FC<propsType> = ({contactTitle, contactInfo}) => {\n    let Icon = <div/>;\n\n    switch (contactTitle) {\n        case 'facebook':\n            Icon = <FacebookIcon/>;\n            break;\n        case 'website':\n            Icon = <LanguageIcon/>;\n            break;\n        case 'vk':\n            Icon = <SvgIcon component={VkRounded}/>;\n            break;\n        case 'twitter':\n            Icon = <TwitterIcon/>;\n            break;\n        case 'instagram':\n            Icon = <InstagramIcon/>;\n            break;\n        case 'youtube':\n            Icon = <YouTubeIcon/>;\n            break;\n        case 'github':\n            Icon = <GitHubIcon/>;\n            break;\n        case 'mainLink':\n            Icon = <HttpIcon/>;\n            break;\n    }\n\n    return (\n        <IconButton color=\"primary\" component='a' rel={'noreferrer'} href={contactInfo} target={'_blank'}>\n            {Icon}\n        </IconButton>\n    );\n}","import React from \"react\";\nimport {contactsType} from '../../../../types';\nimport {ProfileContact} from './ProfileContact/ProfileContact';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype propsType = {\n    aboutMe: string,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    contacts: contactsType,\n    isOwner: boolean,\n    blockWidth: string,\n    setEditMode: () => void\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfo: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > div': {\n                marginLeft: theme.spacing(2),\n                marginRight: theme.spacing(2),\n            },\n        },\n        additionalInfoItem: {\n            marginTop: theme.spacing(1)\n        },\n        wrapped: {\n            display: 'flex',\n            flexWrap: 'wrap'\n        },\n        contacts: {\n            display: 'flex',\n            alignItems: 'center',\n            width: '100%'\n        }\n    }),\n);\n\n/**\n * Returns additional info about user with 3 text blocks and 1 block of contact-links.\n * If user is owner of profile also returns button for edit data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let ContactsList = getContactsList(props.contacts);\n    let isNeedContacts = !ContactsList.every(contact => contact === null);\n\n    /**\n     * Returns array of ProfileContacts if contact value is not empty.\n     * @param {contactsType} contacts - array of contacts from profile.\n     */\n    function getContactsList (contacts: contactsType) {\n        return Object.keys(contacts).map((key) => {\n            let contactValue = contacts[key as keyof contactsType];\n\n            return contactValue\n                ? <ProfileContact key={key} contactTitle={key as keyof contactsType} contactInfo={contactValue}/>\n                : null;\n        })\n    }\n\n    return (\n        <div className={classes.additionalInfo} style={{maxWidth: props.blockWidth}}>\n            <div className={classes.additionalInfoItem}>\n                <Typography>About Me: {props.aboutMe || 'Empty'}</Typography>\n                <Typography>Looking for a job: {props.lookingForAJob ? 'Yes' : 'No'}</Typography>\n                {props.lookingForAJob && <Typography className={classes.wrapped}>\n                    Job description: {props.lookingForAJobDescription}\n                </Typography>}\n            </div>\n\n            {isNeedContacts\n                ? <div className={classes.contacts}>\n                    <div>\n                        <Typography>Contacts:</Typography>\n                    </div>\n                    <div  className={classes.wrapped}>\n                        {ContactsList}\n                    </div>\n                </div>\n                : <div className={classes.contacts}>\n                    <Typography>no contacts</Typography>\n                </div>\n            }\n            {props.isOwner && <Button color='primary' variant='contained' onClick={props.setEditMode}>Edit info</Button>}\n        </div>\n    );\n};\n\nexport default AdditionalInfo","import React, {useState} from \"react\";\nimport {required, validatorCreator} from \"../../../../utils/validators\";\nimport {contactsType, profileType} from '../../../../types';\nimport Button from '@material-ui/core/Button';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {createField, FormikCheckbox, FormikField} from '../../../../Common/FormComponents/FieldsComponentsFormik';\nimport {ErrorMessage, FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport {useDispatch} from 'react-redux';\nimport {saveProfile} from '../../../../reducers/profileReducer';\n\ntype propsType = {\n    profile: profileType,\n    onChancel: () => void\n}\n\ntype formBasicInfoPropsType = {\n    checked: boolean,\n    triggerCheckbox: () => void\n}\n\ntype formContactsInfoPropsType = {\n    contacts: contactsType\n}\n\ntype formDataType = profileType;\ntype fieldNamesType = keyof formDataType;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        additionalInfoForm: {\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        buttonsWrapper: {\n            display: 'flex',\n            justifyContent: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        additionalInfoRow: {\n            display: 'flex',\n            justifyContent: 'start',\n            alignItems: 'center',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n            '& > p': {\n                flexBasis: '92px',\n                textAlign: 'end',\n                margin: theme.spacing(1),\n            },\n            '& > div': {\n                flexGrow: 1,\n                display: 'flex'\n            }\n        },\n        infoWrapper: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                flexGrow: 1,\n                flexBasis: '460px',\n            }\n        },\n        stretched: {\n            flexGrow: 1\n        },\n        errorText: {\n            color: 'red',\n            marginLeft: theme.spacing(1),\n        },\n        errorsWrapper: {\n            display: 'flex',\n            justifyContent: 'center'\n        }\n    }),\n);\n\n/**\n * Returns form with profile-info data.\n * @param {propsType} props\n * @constructor\n */\nconst AdditionalInfoForm: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    let initialValues = props.profile;\n    initialValues.contacts = normalizeContacts(initialValues.contacts);\n\n    const formik = useFormik({\n        initialValues: props.profile,\n        enableReinitialize: true,\n        onSubmit: onSubmit,\n    });\n\n    async function onSubmit (formData: profileType, {setSubmitting, setFieldError, setStatus}: FormikHelpers<profileType>) {\n        let hasApiErrors = '';\n\n        try {\n            await dispatch(saveProfile(formData,  setFieldError, setStatus));\n        }\n        catch (error) {\n            hasApiErrors = error;\n        }\n        finally {\n            setSubmitting(false);\n        }\n\n        if (!hasApiErrors && formik.submitCount > 0) {\n            props.onChancel();\n        }\n    }\n\n    /**\n     * Sets every contact value to empty string if it's value is null.\n     * Because Material-UI not allow null as value to input.\n     * @param {contactsType} contacts - object with contacts\n     */\n    function normalizeContacts (contacts: contactsType) {\n        for (let contact in contacts) {\n            if (contacts.hasOwnProperty(contact)) {\n                contacts[contact as keyof contactsType] = contacts[contact as keyof contactsType] || '';\n            }\n\n        }\n\n        return contacts;\n    }\n\n    /**\n     * Handler for manually trigger lookingForAJob-checkbox in formik.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     */\n    function triggerCheckbox() {\n        formik.setFieldValue(\"lookingForAJob\", !formik.values.lookingForAJob);\n    }\n\n    return (\n        <form className={classes.additionalInfoForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n            <div className={classes.infoWrapper}>\n                <FormBasicInfo checked={props.profile.lookingForAJob} triggerCheckbox={triggerCheckbox}/>\n                <FormContactsInfo contacts={props.profile.contacts}/>\n            </div>\n            <div className={classes.errorsWrapper}>\n                <div className={classes.errorText}>{formik.status}</div>\n            </div>\n            <div className={classes.buttonsWrapper}>\n                <Button color='primary'\n                        variant='contained'\n                        type='submit'\n                        disabled={formik.isSubmitting || !formik.isValid || !formik.dirty}\n                >Save</Button>\n                <Button color='secondary' variant='contained' onClick={props.onChancel}>Cancel</Button>\n            </div>\n            </FormikProvider>\n        </form>\n    );\n}\n\n/**\n * Returns fields: fullName, aboutMe, lookingForAJob, lookingForAJobDescription\n * for profile-info form with needed handlers.\n * @param {formBasicInfoPropsType} props\n * @constructor\n */\nconst FormBasicInfo: React.FC<formBasicInfoPropsType> = (props) => {\n    const classes = useStyles();\n    const [checked, setChecked] = useState(props.checked);\n\n    /**\n     * Checkbox trigger handler. Sets value to Checkbox and to formik differently.\n     * Because formik can't trigger Material-UI Checkbox by himself if default value set.\n     * @param event\n     */\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.triggerCheckbox();\n        setChecked(event.target.checked);\n    };\n\n    return (\n        <Card variant={'outlined'}>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Full name: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Your name',\n                    'fullName',\n                    FormikField,\n                    validatorCreator([required])\n                )}\n                <ErrorMessage name='fullName' />\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>About me: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about you',\n                    'aboutMe',\n                    FormikField,\n                    validatorCreator([])\n                )}\n            </div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Look for job: </Typography>\n                {createField<fieldNamesType>(\n                    undefined,\n                    undefined,\n                    'lookingForAJob',\n                    FormikCheckbox,\n                    validatorCreator([]),\n                    {checked, color: 'primary', onChange}\n                )}\n            </div>\n            <div className={classes.errorText}><ErrorMessage name={'lookingForAJob'} /></div>\n            <div className={classes.additionalInfoRow}>\n                <Typography>Skills: </Typography>\n                {createField<fieldNamesType>(\n                    classes.stretched,\n                    'Say about job or skills',\n                    'lookingForAJobDescription',\n                    FormikField,\n                    validatorCreator([]),\n                    {multiline: true}\n                )}\n            </div>\n        </Card>\n    );\n}\n\n/**\n * Returns fields with contacts for profile-info form.\n * @param {formContactsInfoPropsType} props\n * @constructor\n */\nconst FormContactsInfo: React.FC<formContactsInfoPropsType> = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Card variant={'outlined'}>\n            {Object.keys(props.contacts).map(key => {\n                return (\n                    <div key={key} className={classes.additionalInfoRow}><Typography>{key}:</Typography>\n                        {createField(\n                            classes.stretched,\n                            key + ' link with http',\n                            'contacts.' + key,\n                            FormikField,\n                            validatorCreator([])\n                        )}\n                    </div>\n                );\n            })}\n        </Card>\n    );\n}\n\nexport default AdditionalInfoForm;","import {stringOrNull} from '../../../../types';\nimport React, {ChangeEvent} from 'react';\nimport {useDispatch} from 'react-redux';\nimport userMale from '../../../../assets/images/user-male.png';\nimport {savePhoto} from '../../../../reducers/profileReducer';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {useHistory} from 'react-router-dom';\nimport {getRouteNameById, routes} from '../../../../Common/Routes';\nimport {startRefreshDialog} from '../../../../reducers/dialogsReducer';\n\ntype profileAvatarPropsType = {\n    largePhoto: stringOrNull,\n    isOwner: boolean,\n    userId: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        avatarWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(38),\n            height: theme.spacing(38),\n        },\n        input: {\n            display: 'none',\n        },\n        label: {\n            display: 'flex',\n            justifyContent: 'center',\n        }\n    }),\n);\n\n/**\n * Returns avatar-block with avatar-image and button for upload new.\n * If user is not owner of this profile returns avatar without button.\n * @param {profileAvatarPropsType} props - url to image, user ID and isOwner.\n * @constructor\n */\nexport const ProfileAvatar: React.FC<profileAvatarPropsType> = (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const profileAvatarLarge = props.largePhoto || userMale;\n\n    /**\n     * Add new dialog or refresh existing.\n     * Redirects to new dialog's route.\n     */\n    const addDialog = () => {\n        dispatch(startRefreshDialog(props.userId));\n        history.push(`/${getRouteNameById(routes.dialogs.id)}/${props.userId}`);\n    }\n\n    const AddDialogButton = <Button variant='contained' color='primary' onClick={addDialog}>Start dialog</Button>;\n\n    return (\n        <div className={classes.avatarWrapper}>\n            <Avatar className={classes.large} src={profileAvatarLarge}/>\n            {props.isOwner ? <AvatarUploadButton/> : AddDialogButton}\n        </div>\n    );\n}\n\n/**\n * Returns styled button for upload user's avatar.\n * @constructor\n */\nconst AvatarUploadButton: React.FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    function onFileChange(event: ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n        }\n\n        dispatch(savePhoto(event.target.files[0]));\n    }\n\n    return (\n        <>\n            <input className={classes.input}\n                   accept='image/*'\n                   type='file'\n                   id='icon-button-file'\n                   onChange={onFileChange}\n            />\n            <label htmlFor='icon-button-file' className={classes.label}>\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        component=\"span\"\n                        startIcon={<PhotoCamera />}\n                >\n                    Upload\n                </Button>\n            </label>\n        </>\n    );\n}","export default __webpack_public_path__ + \"static/media/social-network-pattern-background.066f3894.jpg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React, {useState} from 'react';\nimport styles from './ProfileInfo.module.css';\nimport Preloader from \"../../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport AdditionalInfo from \"./AdditionalInfo/AdditionalInfo\";\nimport AdditionalInfoForm from \"./AdditionalInfoForm/AdditionalInfoForm\";\nimport {profileType} from '../../../types';\nimport {ProfileAvatar} from './ProfileAvatar/ProfileAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport ProfileBackground from '../../../assets/images/social-network-pattern-background.jpg';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nexport type propsType = {\n    profile: profileType | null,\n    status: string,\n    isOwner: boolean,\n    statusFetching: boolean,\n    updateStatus: (status: string) => void,\n}\n\nconst wallpaperBlend = 'linear-gradient(rgba(255,255,255,.95), rgba(255,255,255,.95))';\nconst blockWidth = '52.5ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        wallpaper: {\n            backgroundImage: `${wallpaperBlend}, url(${ProfileBackground})`,\n            backgroundSize: '40%',\n            margin: theme.spacing(-3)\n        },\n        profileDescriptionWrapper: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n            margin: theme.spacing(0, 4),\n        }\n    }),\n);\n\n/**\n * Returns profile-block with avatar, status and profile info.\n * @param {propsType} props - props\n * @constructor\n */\nconst ProfileInfo: React.FC<propsType> = (props) => {\n    const classes = useStyles();\n\n    let [isEditMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.wallpaper}>\n            <div className={styles.profileDescription}>\n                <ProfileAvatar largePhoto={props.profile.photos.large} isOwner={props.isOwner} userId={props.profile.userId}/>\n                <div className={classes.profileDescriptionWrapper}>\n                    <Typography variant='h4'>{props.profile.fullName}</Typography>\n                    <ProfileStatus status={props.status}\n                                   updateStatus={props.updateStatus}\n                                   statusFetching={props.statusFetching}\n                                   isOwner={props.isOwner}\n                                   blockWidth={blockWidth}\n                    />\n                    {isEditMode\n                            ? <AdditionalInfoForm onChancel={() => setEditMode(false)}\n                                                  profile={props.profile}\n                            />\n                            : <AdditionalInfo aboutMe={props.profile.aboutMe}\n                                              lookingForAJob={props.profile.lookingForAJob}\n                                              lookingForAJobDescription={props.profile.lookingForAJobDescription}\n                                              contacts={props.profile.contacts}\n                                              setEditMode={() => setEditMode(true)}\n                                              isOwner={props.isOwner}\n                                              blockWidth={blockWidth}\n                            />\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport styles from './MyPosts.module.css';\nimport Post from '../../../Common/Post/Post';\nimport {postsDataType, stringOrNull} from '../../../types';\nimport List from '@material-ui/core/List';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {AddMessageForm} from '../../../Common/AddMessageForm/AddMessageForm';\nimport {profileActions} from '../../../reducers/profileReducer';\nimport Typography from '@material-ui/core/Typography';\nimport {PostActions} from '../../../Common/Post/PostActions/PostActions';\n\nexport type myPostsPropsType = {\n    postsData: Array<postsDataType>,\n    avatar: stringOrNull,\n    userName: stringOrNull\n}\n\n/**\n * @const\n * @type string\n * @description block max width.\n */\nconst maxWidth = '30ch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        postsList: {\n            width: '100%',\n            maxWidth: maxWidth,\n            backgroundColor: theme.palette.background.paper,\n            display: 'flex',\n            flexDirection: 'column-reverse'\n        },\n        postsTitle: {\n            margin: theme.spacing(2, 0)\n        }\n    })\n);\n\n/**\n * Component with title, form and list of posts.\n * @param {myPostsPropsType} props\n * @constructor\n */\nconst MyPosts: React.FC<myPostsPropsType> = (props) => {\n    const classes = useStyles();\n\n    let posts = props.postsData.map( (post) =>\n        <Post key={'MyPost' +post.id}\n              postId={post.id}\n              action={PostActions.textWithLikes(post.text, post.id, post.likes)}\n              avatar={props.avatar}\n              userName={props.userName}\n              blockWidth={maxWidth}\n        />\n    );\n\n    return (\n        <div className={styles.postBlock}>\n            <Typography variant='h5' className={classes.postsTitle}>Posts</Typography>\n            <AddMessageForm blockWidth={maxWidth}\n                            sendMessage={profileActions.sendPost}\n                            buttonText='Add Post'\n                            minTextLength={2}\n                            maxTextLength={100}\n            />\n            <List className={classes.postsList}>\n                {posts}\n            </List>\n        </div>\n    );\n};\n\nexport default MyPosts;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport {connect} from \"react-redux\";\nimport MyPosts, {myPostsPropsType} from \"./MyPosts\";\nimport {appStateType} from '../../../redux/reduxStore';\n\nlet mapStateToProps = (state: appStateType) => {\n    return (\n        {\n            postsData: state.profilePage.postsData,\n            avatar: state.profilePage.profile ? state.profilePage.profile.photos.small : '',\n            userName: state.auth.login\n        }\n    );\n};\n\nconst MyPostsContainer = connect<myPostsPropsType, {}, {}, appStateType>(\n    mapStateToProps,\n    {}\n)(MyPosts);\n\nexport default MyPostsContainer;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport ProfileInfo, {propsType} from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\ntype profilePropsType = propsType;\n\n/**\n * Whole profile-page with info about user and posts-block.\n * @param {profilePropsType} props\n * @constructor\n */\nconst Profile: React.FC<profilePropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         statusFetching={props.statusFetching}\n                         isOwner={props.isOwner}\n            />\n            <MyPostsContainer/>\n        </div>);\n};\n\nexport default Profile;","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus, updateStatus} from \"../../reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport withAuthRedirect from \"../../Hocs/withAuthRedirect\";\nimport {MatchParams, profileType} from \"../../types\";\nimport {appStateType} from \"../../redux/reduxStore\";\n\ntype matchType = RouteComponentProps<MatchParams>;\n\ntype mapStatePropsType = {\n    profile: profileType | null,\n    status: string,\n    statusFetching: boolean\n};\n\ntype mapDispatchPropsType = {\n    getProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n    updateStatus: (status: string) => void,\n};\n\ntype ownPropsType = {\n};\n\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType;\n\n/**\n * Class component which returns profile-page.\n * If not logged-in will redirect to login.\n */\nclass ProfileContainer extends React.Component<propsType & matchType> {\n    getProfileData() {\n        this.props.getProfile(parseInt(this.props.match.params.userId));\n        this.props.getStatus(parseInt(this.props.match.params.userId));\n    }\n\n    componentDidMount() {\n        this.getProfileData();\n    }\n\n    componentDidUpdate(prevProps: mapStatePropsType  & matchType, prevState: appStateType, snapshot: any) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.getProfileData();\n        }\n    }\n    render() {\n        return <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\n    }\n}\n\nlet mapStateToProps = (state: appStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        statusFetching: state.profilePage.statusFetching\n    }\n}\n\nconst mapDispatchToProps: mapDispatchPropsType = {\n    getProfile,\n    getStatus,\n    updateStatus,\n}\n\nexport default connect<\n    mapStatePropsType,\n    mapDispatchPropsType,\n    ownPropsType,\n    appStateType\n    >(mapStateToProps, mapDispatchToProps) (withRouter(withAuthRedirect(ProfileContainer)));","import {Api} from '../components/API/api';\nimport {baseThunkType, captchaResultCodeType, stringOrNull} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {emptyStatusCallback, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    id: number | null,\n    email: stringOrNull,\n    login: stringOrNull,\n    isAuth: boolean,\n    isFetching: boolean,\n    captchaUrl: stringOrNull\n}\n\ntype actionsType = inferActionsType<typeof authActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false,\n    captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/AUTH/SET_AUTH':\n            return {\n                ...state,\n                ...action.data\n            }\n        case 'SN/AUTH/GET_CAPTCHA_SUCCESS':\n            return {\n                ...state,\n                captchaUrl: action.url\n            }\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    setAuth: (id: number | null, email: stringOrNull, login: stringOrNull, isAuth:boolean) => ({\n        type: 'SN/AUTH/SET_AUTH',\n        data: {id, email, login, isAuth}} as const),\n    getCaptchaSuccess: (url: stringOrNull) => ({type: 'SN/AUTH/GET_CAPTCHA_SUCCESS', url} as const)\n}\n\n/**\n * Gets auth data from backend and set it to state if successful.\n */\nexport const getAuth = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Me();\n\n    if (data === null) {\n        return;\n    }\n\n    let {id, email, login} = data;\n    dispatch(authActions.setAuth(id, email, login, true));\n}\n\n/**\n * Sets user logged-in on backend, if needed captcha then requests it.\n * If successful sets auth data to state.\n * @param {string} email - user email\n * @param {string} password - user password\n * @param {boolean} rememberMe - is need long session\n * @param {string} captcha - captcha text from user\n * @param {(string):void=} errorCallback - callback calls on error from backend (optional)\n */\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string, errorCallback: setStatusType = emptyStatusCallback): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Login(email, password, rememberMe, captcha);\n\n    if (data.error) {\n        if (data.resultCode === captchaResultCodeType.captchaRequired) {\n            await dispatch(getCaptcha());\n        }\n\n        return errorCallback(data.error);\n    }\n\n    await dispatch(getAuth());\n    dispatch(authActions.getCaptchaSuccess(null));\n}\n\n/**\n * Sets user as logged-out on backend, if successful clears auth data in state.\n */\nexport const logout = (): thunkType => async (dispatch) => {\n    let data = await Api.Auth.Logout();\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(authActions.setAuth(null, null, null, false));\n}\n\n/**\n * Gets url with captcha image from backend and sets it to state if successful.\n */\nexport const getCaptcha = (): thunkType => async (dispatch) => {\n    let url = await Api.Security.getCaptcha();\n\n    if (!url) {\n        return;\n    }\n\n    dispatch(authActions.getCaptchaSuccess(url));\n}\n\nexport default authReducer;","import {stringOrNull} from '../../../types';\nimport {maxLengthCreator, required, validatorCreator} from '../../../utils/validators';\nimport React from 'react';\nimport styles from '../Login.module.css';\nimport {FormikHelpers, FormikProvider, useFormik} from 'formik';\nimport Button from '@material-ui/core/Button';\nimport {useDispatch} from 'react-redux';\nimport {login} from '../../../reducers/authReducer';\nimport {createField, FormikCheckbox, FormikField} from '../../../Common/FormComponents/FieldsComponentsFormik';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nlet maxLength30 = maxLengthCreator(30);\n\nexport type loginFormDataType = {\n    login: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\ntype fieldNamesType = keyof loginFormDataType\ntype loginFormPropsType = {\n    captchaUrl: stringOrNull\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginForm: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '20ch',\n            margin: theme.spacing(1),\n            '& > *': {\n                display: 'flex',\n            },\n        },\n        loginInput: {\n            flexGrow: 1,\n            margin: theme.spacing(1),\n        },\n        errorText: {\n            color: 'red',\n            alignSelf: 'center',\n            marginBottom: theme.spacing(1),\n        }\n    }),\n);\n\n/**\n * Form for login process with two static inputs, one optional input with image for captcha, checkbox and button.\n * @param {loginFormPropsType} props - url to captcha img\n * @constructor\n */\nconst LoginForm: React.FC<loginFormPropsType> = (props) => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const initialValues = {\n        login: '',\n        password: '',\n        rememberMe: false,\n        captcha: ''\n    }\n\n    const onSubmit = (formData: loginFormDataType, {setSubmitting}: FormikHelpers<loginFormDataType>) => {\n        dispatch(login(formData.login, formData.password, formData.rememberMe, formData.captcha, formik.setStatus));\n        setSubmitting(false);\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n    });\n\n    return (\n        <form className={classes.loginForm} onSubmit={formik.handleSubmit}>\n            <FormikProvider value={formik}>\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter login',\n                    'login',\n                    FormikField,\n                    validatorCreator([required, maxLength30])\n                )}\n                {createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter password',\n                    'password',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {type: 'password'}\n                )}\n                <div className={styles.checkboxWrapper}>\n                    {createField<fieldNamesType>(\n                        undefined,\n                        undefined,\n                        'rememberMe',\n                        FormikCheckbox,\n                        validatorCreator([]),\n                        {color: 'primary'}\n                    )}\n                    <span>remember me</span>\n                </div>\n                {props.captchaUrl && <img alt={'captcha'} src={props.captchaUrl}/>}\n                {props.captchaUrl && createField<fieldNamesType>(\n                    classes.loginInput,\n                    'Enter symbols from image',\n                    'captcha',\n                    FormikField,\n                    validatorCreator([required, maxLength30]),\n                    {autoComplete: 'off'}\n                )}\n            </FormikProvider>\n            {formik.status && <div className={classes.errorText}>{formik.status}</div>}\n            <Button variant='contained'\n                    color='primary'\n                    type='submit'\n                    disabled={formik.isSubmitting || !formik.isValid}\n            >\n                Login\n            </Button>\n        </form>\n    );\n}\n\nexport default LoginForm;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {getCaptchaUrlSelector, getIsAuthSelector} from '../../Common/Selectors/Selectors';\nimport LoginForm from './LoginForm/LoginForm';\nimport Typography from '@material-ui/core/Typography';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        loginPage: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '80vh'\n        }\n    }),\n);\n\n/**\n * Login-page with header and form.\n * @constructor\n */\nexport const Login: React.FC = () => {\n    const classes = useStyles();\n    const auth = useSelector(getIsAuthSelector);\n    const captchaUrl = useSelector(getCaptchaUrlSelector);\n\n    if (auth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={classes.loginPage}>\n            <Typography variant='h4'>Login</Typography>\n            <LoginForm captchaUrl={captchaUrl}/>\n        </div>\n    );\n}","import {getAuth} from './authReducer';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType} from '../types';\nimport {getNewMessagesCount} from './dialogsReducer';\nimport {getOwnerProfile} from './profileReducer';\n\nexport type initialStateType = {\n    initDone: boolean\n}\n\ntype actionsType = inferActionsType<typeof appActions>;\ntype thunkType = baseThunkType<actionsType, void>;\n\nconst initialState: initialStateType = {\n    initDone: false\n};\n\nconst authReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n\n        case 'SN/APP/SET_INIT_DONE':\n            return {\n                ...state,\n                initDone: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const appActions = {\n    setInitDone: () => ({type: 'SN/APP/SET_INIT_DONE'} as const)\n}\n\n/**\n * Gets data, needed for app start.\n */\nexport const makeInit = (): thunkType => async (dispatch) => {\n    try {\n        await dispatch(getAuth());\n        await dispatch(getNewMessagesCount());\n        await dispatch(getOwnerProfile());\n    }\n    finally {\n        dispatch(appActions.setInitDone());\n    }\n}\n\nexport default authReducer;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\n\nconst StartPage = () => {\n    return <Redirect to={'/profile'}/>;\n}\n\nexport default StartPage;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport React from 'react';\nimport styles from './AppHeader.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getIsAuthSelector, getLoginSelector, getOwnerPhotosSelector} from '../../Common/Selectors/Selectors';\nimport {logout} from '../../reducers/authReducer';\nimport logo from '../../assets/images/logo.svg';\nimport userMale from \"../../assets/images/user-male.png\";\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\ntype appHeaderPropsType = {\n    onMenuClick: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginBlock: {\n            display: 'flex',\n            alignItems: 'center',\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n        },\n        login: {\n            ...theme.typography.subtitle1,\n            padding: theme.spacing(1),\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        headerContentWrapper: {\n            justifyContent: 'space-between'\n        },\n        menuButton: {\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        leftPart: {\n            display: 'flex'\n        }\n    }),\n);\n\n/**\n * Returns complete header for App with logo, menu-button, logout-button and owner-info.\n * @param {appHeaderPropsType} props - props object\n * @param {function():void} props.onMenuClick - function which will calls on menu-button click\n * @constructor\n */\nexport const AppHeader: React.FC<appHeaderPropsType> = (props) => {\n    const classes = useStyles();\n    const isAuth = useSelector(getIsAuthSelector);\n    const login = useSelector(getLoginSelector);\n    const ownerPhotos = useSelector(getOwnerPhotosSelector);\n\n    const dispatch = useDispatch();\n\n    const logoutCallback = () => {\n        dispatch(logout());\n    }\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.headerContentWrapper}>\n                <div className={classes.leftPart}>\n                    <IconButton color='inherit'\n                                edge='start'\n                                className={classes.menuButton}\n                                onClick={props.onMenuClick}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <img className={styles.headerLogo}\n                         src={logo}\n                         alt=\"logo\"/>\n                </div>\n                <div>\n                    {\n                        isAuth\n                            ? <div className={classes.loginBlock}>\n                                <Avatar alt={'Header Avatar'} src={ownerPhotos?.small || userMale}/>\n                                <Typography className={classes.login}>{login}</Typography>\n                                <IconButton onClick={logoutCallback}>\n                                    <ExitToAppOutlinedIcon/>\n                                </IconButton>\n                            </div>\n                            : <NavLink to='/login' className={styles.loginLink}>Login</NavLink>\n                    }\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};","import React from 'react';\n\nexport const NotFound: React.FC = () => {\n    return(\n        <div>404 Not Found</div>\n    );\n}","import React, {Dispatch, SetStateAction} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\n\ntype globalAlertPropsType = {\n    isOpen: boolean,\n    text: string,\n    setNotificationOpen: Dispatch<SetStateAction<boolean>>\n}\n\n/**\n * Component for smooth popup alert.\n * @param {globalAlertPropsType} props\n * @constructor\n */\nexport const GlobalAlert: React.FC<globalAlertPropsType> = (props) => {\n    const handleNotificationClose = (event: React.SyntheticEvent | MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.setNotificationOpen(false);\n    };\n\n    return (\n        <Snackbar anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                  open={props.isOpen}\n                  onClose={handleNotificationClose}\n                  autoHideDuration={6000}\n                  TransitionComponent={Slide}\n                  message={props.text}\n        />\n    );\n}","import React, {Suspense, useEffect} from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {Route, Switch} from 'react-router-dom';\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {makeInit} from \"./reducers/appReducer\";\nimport Preloader from \"./Common/Preloader/Preloader\";\nimport StartPage from \"./Pages/StartPage\";\nimport {appStateType} from './redux/reduxStore';\nimport {AppHeader} from './components/Header/AppHeader';\nimport {NotFound} from './components/NotFound';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {getRouteNameById, routes} from './Common/Routes';\nimport {GlobalAlert} from './Common/GlobalAlert/GlobalAlert';\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Messages/DialogsContainer'));\nconst ChatPage = React.lazy(() => import('./Pages/ChatPage'));\n\ntype mapStatePropsType = {\n    isInitDone: boolean,\n    isAuth: boolean\n}\n\ntype mapDispatchPropsType = {\n    makeInit: () => void,\n}\n\ntype ownPropsType = {};\n\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownPropsType;\n\nconst drawerWidth = 240;\n\n/**\n * Returns whole app (header, menu and needed page).\n * @param {propsType} props - props object\n * @param {boolean} props.isAuth - is user authorized\n * @param {boolean} props.isInitDone - is App initiated\n * @param {function():void} props.makeInit - App initiation function\n * @constructor\n */\nconst App: React.FC<propsType> = (props) => {\n    let {isInitDone, makeInit} = props;\n    const [isNotificationOpen, setNotificationOpen] = React.useState(false);\n    const [notificationText, setNotificationText] = React.useState('');\n    const [isMenuOpen, setMenuOpen] = React.useState<boolean>(false);\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n            },\n            drawer: {\n                width: drawerWidth,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n                [theme.breakpoints.down('xs')]: {\n                    display: isMenuOpen ? '' : 'none',\n                },\n                flexShrink: 0,\n            },\n            drawerPaper: {\n                width: drawerWidth,\n                [theme.breakpoints.down('md')]: {\n                    width: theme.spacing(7) + 1,\n                },\n            },\n        }),\n    );\n\n    /**\n     * Catch error reason and set alert-data.\n     * @param reason\n     */\n    const catchGenericError = (reason: PromiseRejectionEvent) => {\n        let response = reason.reason.response;\n\n        if (response) {\n            setNotificationText('ERROR: server returned ' + response.status + ' ' + response.statusText);\n        } else {\n            setNotificationText('ERROR: server is not respond!');\n        }\n\n        setNotificationOpen(true);\n    };\n\n    useEffect(() => {\n        window.addEventListener('unhandledrejection', catchGenericError);\n        makeInit();\n\n        // returned function will be called on component unmount\n        return () => {\n            window.removeEventListener('unhandledrejection', catchGenericError);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const classes = useStyles();\n\n    if (!isInitDone) {\n        return <Preloader/>\n    }\n\n    function onMenuClick() {\n        setMenuOpen(!isMenuOpen);\n    }\n\n    return (\n        <div className={classes.root}>\n            <GlobalAlert isOpen={isNotificationOpen}\n                         text={notificationText}\n                         setNotificationOpen={setNotificationOpen}\n            />\n            <AppHeader onMenuClick={onMenuClick}/>\n            <Drawer className={classes.drawer} variant='permanent' classes={{paper: classes.drawerPaper}}>\n                <Toolbar />\n                <Navbar onMenuClick={onMenuClick}/>\n            </Drawer>\n            <Content/>\n        </div>\n    );\n}\n\n/**\n * Returns correct page depends on route, uses suspend for lazy-load.\n * @constructor\n */\nconst Content: React.FC = () => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            content: {\n                flexGrow: 1,\n                width: 330,\n                padding: theme.spacing(3),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    let DialogsComponent = () =>  <DialogsContainer/>;\n    let ProfileComponent = () => <ProfileContainer/>;\n\n    return(\n        <main className={classes.content}>\n            <Toolbar />\n            <Suspense fallback={<div>Загрузка...</div>}>\n                <Switch>\n                    <Route exact path=\"/\" component={StartPage}/>\n                    <Route path={'/' + getRouteNameById(routes.profile.id) + '/:userId?'} component={ProfileComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.dialogs.id) + '/:userId?'} component={DialogsComponent}/>\n                    <Route path={'/' + getRouteNameById(routes.news.id)} component={News}/>\n                    <Route path={'/' + getRouteNameById(routes.music.id)} component={Music}/>\n                    <Route path={'/' + getRouteNameById(routes.users.id)} component={UsersContainer}/>\n                    <Route path={'/' + getRouteNameById(routes.settings.id)} component={Settings}/>\n                    <Route path={'/' + getRouteNameById(routes.chat.id)} component={ChatPage}/>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"*\" component={NotFound}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n}\n\nlet mapStateToProps = (state: appStateType): mapStatePropsType => {\n    return {\n        isInitDone: state.app.initDone,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect<mapStatePropsType, mapDispatchPropsType, ownPropsType, appStateType>(\n    mapStateToProps,\n    {makeInit}\n)(App);\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer from \"../reducers/profileReducer\";\nimport dialogsReducer from \"../reducers/dialogsReducer\";\nimport usersReducer from \"../reducers/usersReducer\";\nimport authReducer from \"../reducers/authReducer\";\nimport appReducer from \"../reducers/appReducer\";\nimport thunk from \"redux-thunk\";\nimport chatReducer from '../reducers/chatReducer';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    chat: chatReducer\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type appStateType = ReturnType<rootReducerType>;\n\nexport type inferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto'\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/reduxStore\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\nimport {\n    basicResponseType,\n    captchaResultCodeType, messageListType, Override,\n    photosType,\n    profileType,\n    resultCodesType, stringOrNull, userListType, usersType\n} from \"../../types\";\nimport {filterType} from '../../reducers/usersReducer';\n\nconst defaultApi = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '4b793204-e0f1-45c5-b96a-007d58f175b3'}\n});\n\ntype meResponseType = Override<basicResponseType, {\n    data: {\n        id: number,\n        email: string,\n        login: string\n    }\n}>;\n\ntype loginResponseType = Override<basicResponseType, {\n    data: {\n        id: number\n    },\n    resultCode: resultCodesType | captchaResultCodeType\n}>;\n\ntype updateProfileResponseType = Override<basicResponseType, {\n    fieldsErrors: Array<string>\n}>;\n\ntype savePhotoResponseType = Override<basicResponseType, {\n    data: {\n        photos: photosType,\n    },\n    fieldsErrors: Array<string>\n}>;\n\ntype captchaResponseType = {\n    url: string\n}\n\ntype getUsersResponseType = {\n    items: Array<usersType>,\n    totalCount: number,\n    error: string | null\n}\n\ntype dialogsListResponseType = Array<userListType>\n\ntype dialogsSendMessageResponseType = Override<basicResponseType, {\n    data: {\n        message: messageListType\n    },\n    fieldsErrors: Array<string>\n}>\n\ntype getMessagesListResponseType = {\n    items: Array<messageListType>,\n    totalCount: number,\n    error: stringOrNull\n}\n\nexport const Api = {\n    Users: {\n        getUsers: (pageSize = 4, currentPage = 0, filter: filterType) => {\n            return defaultApi.get<getUsersResponseType>('users',\n                {params: {count: pageSize, page: currentPage + 1, term: filter.searchTerm, friend: filter.friend}}\n            ).then(response => {\n                if (response.data.items.length === 0) {\n                    return null;\n                }\n\n                return response.data;\n            });\n        },\n        unfollow: (userId: number) => {\n            return defaultApi.delete<basicResponseType>('follow/' + userId)\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        follow: (userId: number) => {\n            return defaultApi.post<basicResponseType>('follow/' + userId).then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        }\n    },\n    Auth: {\n        Me: () => {\n            return defaultApi.get<meResponseType>('auth/me/').then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return response.data.data;\n                }\n\n                return null;\n            });\n        },\n        Login: (email: string, password: string, rememberMe: boolean, captcha: string) => {\n            return defaultApi.post<loginResponseType>('auth/login/', {email, password, rememberMe, captcha}).then(response => {\n                if (response.data.resultCode === resultCodesType.Success) {\n                    return {result: response.data.data};\n                }\n\n                let message = response.data.messages.length ? response.data.messages[0] : 'Unknown error';\n                let resultCode = response.data.resultCode || -1;\n\n                return {error: message, resultCode: resultCode};\n            });\n        },\n        Logout: () => {\n            return defaultApi.delete<basicResponseType>('auth/login/').then(response => {\n                return response.data.resultCode === resultCodesType.Success;\n            });\n        }\n    },\n    Profile: {\n        getProfile: (userId: number) => {\n            return defaultApi.get<profileType>('profile/' + userId)\n                .then( response => {\n                    if (!response.data) {\n                        return null;\n                    }\n\n                    return response.data;\n                });\n        },\n        getStatus: (userId: number) => {\n            return defaultApi.get<string>('profile/status/' + userId)\n                .then( response => {\n                    return response.data;\n                });\n        },\n        updateStatus: (status: string) => {\n            return defaultApi.put<basicResponseType>('profile/status', {status})\n                .then( response => {\n                    return response.data.resultCode === resultCodesType.Success;\n                });\n        },\n        savePhoto: (file: File) => {\n            const formData = new FormData();\n            formData.append('image', file);\n\n            return defaultApi.put<savePhotoResponseType>('profile/photo', formData, {\n                headers: {'Content-Type': 'multipart/form-data'}\n            })\n                .then( response => {\n                    if (response.data.resultCode === 0) {\n                        return response.data.data.photos;\n                    }\n                });\n        },\n        saveProfile: (profile: profileType) => {\n            return defaultApi.put<updateProfileResponseType>('profile', profile)\n                .then(response => {\n                    if (response.data.resultCode === resultCodesType.Success) {\n                        return Promise.resolve();\n                    } else {\n                        let reason = response.data.messages.length ? response.data.messages : ['Unknown error. (unknown)'];\n                        return Promise.reject(reason);\n                    }\n                });\n        }\n    },\n    Security: {\n        getCaptcha: () => {\n            return defaultApi.get<captchaResponseType>('security/get-captcha-url')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data.url;\n                })\n        }\n    },\n    Dialogs: {\n        getDialogsList: () => {\n            return defaultApi.get<dialogsListResponseType>('dialogs')\n                .then(response => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    return response.data;\n                })\n        },\n        startRefreshDialog: (userId: number) => {\n            return defaultApi.put<basicResponseType>('dialogs/' + userId)\n                .then(response => {\n                    return response.data.resultCode === resultCodesType.Success\n                })\n        },\n        getMessagesList: (userId: number) => {\n            return defaultApi.get<getMessagesListResponseType>('dialogs/' + userId + '/messages')\n                .then(response => {\n                    if (response.data.error) {\n                        return;\n                    }\n\n                    return response.data.items;\n                })\n        },\n        sendMessage: (userId: number, message: string) => {\n            return defaultApi.post<dialogsSendMessageResponseType>('dialogs/' + userId + '/messages', {body: message})\n                .then(response => {\n                    if (response.data.resultCode !== resultCodesType.Success) {\n                        return;\n                    }\n\n                    return response.data.data.message;\n                })\n        },\n        getNewMessagesCount: () => {\n            return defaultApi.get<number>('dialogs/messages/new/count')\n                .then(response => {\n                    return response.data;\n                })\n        }\n    }\n}","export type validatorType = (value: string) => string | undefined;\n\n/**\n * Creates one validator from array of validators.\n * Returns error text or empty text as string.\n * Need for formik field-level validation.\n * @param {Array<validatorType>} validators - array of validators.\n */\nexport const validatorCreator = (validators: Array<validatorType>) => (value: string) => {\n    let error = '';\n\n    validators.forEach(validator => {\n        let result = validator(value);\n        if (result !== undefined) error = result;\n    })\n    return error;\n}\n\n/**\n * Validator for required string.\n * Returns undefined or error text as string.\n * @param {string} value - string from form for validation.\n */\nexport const required: validatorType = (value) => {\n    if (value) return undefined;\n    return 'Required field'\n}\n\n/**\n * Function which creates \"max length validator\".\n * @param {number} maxLength - max string length for validator.\n */\nexport const maxLengthCreator = (maxLength: number): validatorType => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength}`;\n    return undefined;\n}\n\n/**\n * Function which creates \"min length validator\".\n * @param {number} minLength - min string length for validator.\n */\nexport const minLengthCreator = (minLength: number): validatorType => (value) => {\n    if (value && value.length < minLength) return `Min length is ${minLength}`;\n    return undefined;\n}","import {Api} from '../components/API/api';\nimport {baseThunkType, contactsType, photosType, postsDataType, profileType} from '../types';\nimport {inferActionsType} from '../redux/reduxStore';\nimport {nanoid} from 'nanoid';\nimport {emptyErrorCallback, emptyStatusCallback, setErrors, setErrorsType, setStatusType} from '../utils/formikSetters';\n\nexport type initialStateType = {\n    postsData: Array<postsDataType>,\n    profile: profileType | null,\n    ownerProfile: profileType | null,\n    statusFetching: boolean,\n    status: string\n}\n\ntype actionsType = inferActionsType<typeof profileActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    postsData: [\n        {id: nanoid(), text: 'First post!', likes: 15},\n        {id: nanoid(), text: 'Second post!', likes: 20},\n    ],\n    profile: null,\n    ownerProfile: null,\n    statusFetching: false,\n    status: ''\n};\n\nconst profileReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD_POST':\n            if (action.newPost === undefined || action.newPost.replace(/\\s+/g, '') === '') {\n                return state;\n            }\n\n            return {\n                ...state,\n                postsData: [...state.postsData, {id: nanoid(), text: action.newPost, likes: 0}]\n            };\n        case 'SN/PROFILE/DELETE_POST':\n            return {\n                ...state, postsData: state.postsData.filter(post => {\n                    return post.id !== action.postId;\n                })\n            };\n        case 'SN/PROFILE/SET_PROFILE':\n            return {...state, profile: action.profile};\n        case 'SN/PROFILE/SET_OWNER_PROFILE':\n            return {...state, ownerProfile: action.profile};\n        case 'SN/PROFILE/UPDATE_PROFILE':\n            let newProfile = {\n                ...(state.profile! as profileType),\n                ...action.profile,\n                contacts: {...(state.profile![\"contacts\"] as contactsType), ...action.profile.contacts}\n            };\n\n            return {\n                ...state,\n                profile: newProfile,\n                ownerProfile: newProfile\n            };\n        case 'SN/PROFILE/SET_STATUS':\n            return {...state, status: action.status};\n        case 'SN/PROFILE/TOGGLE_STATUS_FETCHING':\n            return {...state, statusFetching: !state.statusFetching};\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...(state.profile! as profileType), photos: action.photos},\n                ownerProfile: {...(state.ownerProfile! as profileType), photos: action.photos}\n            };\n        case 'SN/PROFILE/ADD_LIKE':\n            return {...state, postsData: state.postsData.map((post) => {\n                return post.id === action.postId ? {...post, likes: post.likes+1} : post;\n                })}\n        default:\n            return state;\n    }\n}\n\nexport const profileActions = {\n    sendPost: (newPost: string) => ({type: 'SN/PROFILE/ADD_POST', newPost} as const),\n    deletePost: (postId: string) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    setProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_PROFILE', profile} as const),\n    setOwnersProfile: (profile: profileType) => ({type: 'SN/PROFILE/SET_OWNER_PROFILE', profile} as const),\n    updateProfile: (profile: profileType) => ({type: 'SN/PROFILE/UPDATE_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    toggleStatusFetching: () => ({type: 'SN/PROFILE/TOGGLE_STATUS_FETCHING'} as const),\n    savePhotoSuccess: (photos: photosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n    addLike: (postId: string) => ({type: 'SN/PROFILE/ADD_LIKE', postId} as const),\n}\n\n/**\n * Requests status from api and set it to state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getStatus = (userId: number): thunkType => async (dispatch, getState) => {\n    let id = userId || getState().auth.id;\n\n    if (!id) {\n        return;\n    }\n\n    let data = await Api.Profile.getStatus(id);\n\n    if (data === null) {\n        dispatch(profileActions.setStatus(''));\n        return;\n    }\n\n    dispatch(profileActions.setStatus(data));\n}\n\n/**\n * Saves new status via API  and update it's in state.\n * @param {string} status - text of status\n */\nexport const updateStatus = (status: string): thunkType => async (dispatch) => {\n    dispatch(profileActions.toggleStatusFetching());\n\n    try {\n        let data = await Api.Profile.updateStatus(status);\n\n        if (!data) {\n            return;\n        }\n\n        dispatch(profileActions.setStatus(status));\n    } catch (reason) {\n        //TODO: переписать на нормальный вывод ошибки\n        alert('Не удалось сохранить статус, попробуйте позже!');\n    }\n\n    dispatch(profileActions.toggleStatusFetching());\n}\n\n/**\n * Requests user profile from api and set it to state.\n * If requested owners profile, it will returned from state.\n * @param {number} userId - user ID as number, if not valid will set owner ID\n */\nexport const getProfile = (userId: number): thunkType => async (dispatch, getState) => {\n    const ownerId = getState().auth.id;\n    const id = userId || ownerId;\n\n    if (!id) {\n        return;\n    }\n\n    const ownerProfile = getState().profilePage.ownerProfile;\n\n    if (id === ownerId && ownerProfile !== null) {\n        dispatch(profileActions.setProfile({...ownerProfile}));\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(id);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setProfile(data));\n}\n\n/**\n * Requests owner profile from api and set it to state.\n */\nexport const getOwnerProfile = (): thunkType => async (dispatch, getState) => {\n    const userId = getState().auth.id;\n\n    if (!userId) {\n        return;\n    }\n\n    let data = await Api.Profile.getProfile(userId);\n\n    if (data === null) {\n        return;\n    }\n\n    dispatch(profileActions.setOwnersProfile(data));\n}\n\n/**\n * Saves new photo via API  and update it's in state.\n * @param {File} file - file data\n */\nexport const savePhoto = (file: File): thunkType => async (dispatch) => {\n    let data = await Api.Profile.savePhoto(file);\n\n    if (data === undefined) {\n        return;\n    }\n\n    dispatch(profileActions.savePhotoSuccess(data));\n}\n\n/**\n * Saves new profile-data via API  and update it's in state.\n * @param {profileType} profile - whole profile object\n * @param {setErrorsType=} errorCallback - formik setErrors function (optional)\n * @param {setStatusType=} statusCallback - formik setStatus function (optional)\n */\nexport const saveProfile = (\n    profile: profileType,\n    errorCallback: setErrorsType = emptyErrorCallback,\n    statusCallback: setStatusType = emptyStatusCallback\n): thunkType => (dispatch) => {\n    let promise = Api.Profile.saveProfile(profile);\n\n    return promise.then(\n        () => {\n            dispatch(profileActions.updateProfile(profile));\n            return Promise.resolve();\n        },\n        (data) => {\n            setErrors(data, errorCallback, statusCallback)\n            return Promise.reject('formHasErrors');\n    });\n}\n\nexport default profileReducer;","import {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {appStateType} from './redux/reduxStore';\n\nexport type Override<T1, T2> = Omit<T1, keyof T2> & T2;\n\nexport type stringOrNull = string | null;\n\nexport type profileType = {\n    userId: number,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    contacts: contactsType,\n    photos: photosType,\n    aboutMe: string\n}\n\nexport type contactsType = {\n    github: string,\n    vk: string,\n    facebook: string,\n    instagram: string,\n    twitter: string,\n    website: string,\n    youtube: string,\n    mainLink: string\n}\n\nexport type photosType = {\n    small: string | null,\n    large: string | null\n}\n\nexport type usersType = {\n    id: number,\n    name: string,\n    status: stringOrNull,\n    photos: photosType,\n    followed: boolean,\n    uniqueUrlName: stringOrNull\n}\n\nexport interface MatchParams {\n    userId: string;\n}\n\nexport type arrayOfNumbers = Array<number>;\n\nexport enum resultCodesType {\n    Success = 0,\n    Error = 1\n}\n\nexport enum captchaResultCodeType {\n    captchaRequired = 10\n}\n\nexport type basicResponseType = {\n    data: {},\n    resultCode: resultCodesType,\n    messages: Array<string>\n};\n\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, appStateType, unknown, A>;\n\nexport type postsDataType = {\n    id: string,\n    text: string,\n    likes: number\n}\n\nexport type userListType = {\n    id: number,\n    userName: string,\n    hasNewMessages: boolean,\n    newMessagesCount: number,\n    photos: photosType\n}\n\nexport type messageListType = {\n    id: string,\n    body: string,\n    senderId: number,\n    senderName: string,\n    recipientId: number,\n    viewed: boolean\n}","import {appStateType} from '../../redux/reduxStore';\n\nexport function getUsersSelector (state: appStateType) {\n    return state.usersPage.users;\n}\n\nexport function getCurrentPageSelector (state: appStateType) {\n    return state.usersPage.currentPage;\n}\n\nexport function getPageSizeSelector (state: appStateType) {\n    return state.usersPage.pageSize;\n}\n\nexport function getIsUsersFetchingSelector (state: appStateType) {\n    return state.usersPage.isUsersFetching;\n}\n\nexport function getFollowingInProgressSelector (state: appStateType) {\n    return state.usersPage.followingInProgress;\n}\n\nexport function getUsersFilterSelector (state: appStateType) {\n    return state.usersPage.filter;\n}\n\nexport function getIsAuthSelector (state: appStateType) {\n    return state.auth.isAuth;\n}\n\nexport function getCaptchaUrlSelector (state: appStateType) {\n    return state.auth.captchaUrl;\n}\n\nexport function getLoginSelector (state: appStateType) {\n    return state.auth.login;\n}\n\nexport function getOwnerIdSelector (state: appStateType) {\n    return state.auth.id;\n}\n\nexport function getChatMessages (state: appStateType) {\n    return state.chat.messages;\n}\n\nexport function getIsChatConnectedSelector (state: appStateType) {\n    return state.chat.isConnected;\n}\n\nexport function getDialogsMessagesSelector (state: appStateType) {\n    return state.dialogsPage.messageList;\n}\n\nexport function getDialogsUserListSelector (state: appStateType) {\n    return state.dialogsPage.userList;\n}\n\nexport function getNewMessagesCountSelector (state: appStateType) {\n    return state.dialogsPage.newMessagesCount;\n}\n\nexport function getOwnerPhotosSelector (state: appStateType) {\n    return state.profilePage.ownerProfile?.photos;\n}","import {inferActionsType} from '../redux/reduxStore';\nimport {baseThunkType, messageListType, userListType} from '../types';\nimport {Api} from '../components/API/api';\n\nexport type initialStateType = {\n    userList: Array<userListType>,\n    messageList: Array<messageListType>,\n    currentDialogId: number,\n    newMessagesCount: number\n};\n\ntype actionsType = inferActionsType<typeof dialogsActions>;\ntype thunkType = baseThunkType<actionsType>;\n\nconst initialState: initialStateType = {\n    userList: [],\n    messageList: [],\n    currentDialogId: 0,\n    newMessagesCount: 0\n};\n\nconst dialogsReducer = (state = initialState, action: actionsType): initialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/ADD_MESSAGE':\n            return {\n                ...state,\n                messageList: [...state.messageList, {...action.newMessage}]\n            };\n        case 'SN/DIALOGS/DIALOGS_LIST_RECEIVED':\n            return {\n                ...state,\n                userList: [...action.payload]\n            }\n        case 'SN/DIALOGS/MESSAGES_LIST_RECEIVED':\n            return {\n                ...state,\n                messageList: [...action.payload]\n            }\n        case 'SN/DIALOGS/CHAT_CHANGED':\n            return {\n                ...state,\n                currentDialogId: action.payload\n            }\n        case 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED':\n            return {\n                ...state,\n                newMessagesCount: action.payload\n            }\n        case 'SN/DIALOGS/CHAT_MESSAGES_READ': {\n            let messagesWasRead = 0;\n            return {\n                ...state,\n                userList: state.userList.map(userItem => {\n                    if (action.payload === userItem.id) {\n                        messagesWasRead = userItem.newMessagesCount;\n                        userItem.newMessagesCount = 0;\n                        userItem.hasNewMessages = false;\n                    }\n\n                    return userItem;\n                }),\n                newMessagesCount: state.newMessagesCount >= messagesWasRead ? state.newMessagesCount - messagesWasRead : 0\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const dialogsActions = {\n    messageSent: (newMessage: messageListType) => ({type: 'SN/DIALOGS/ADD_MESSAGE', newMessage} as const),\n    dialogsListReceived: (list: Array<userListType>) => ({type: 'SN/DIALOGS/DIALOGS_LIST_RECEIVED', payload: list} as const),\n    messagesListReceived: (list: Array<messageListType>) => ({type: 'SN/DIALOGS/MESSAGES_LIST_RECEIVED', payload: list} as const),\n    chatChanged: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_CHANGED', payload: chatId} as const),\n    chatMessagesRead: (chatId: number) => ({type: 'SN/DIALOGS/CHAT_MESSAGES_READ', payload: chatId} as const),\n    newMessagesCountReceived: (count: number) => ({type: 'SN/DIALOGS/NEW_MESSAGES_COUNT_RECEIVED', payload: count} as const),\n}\n\n/**\n * Requests list of dialogs from api and set it to state.\n */\nexport const getDialogsList = (): thunkType => async (dispatch) => {\n    let data = await Api.Dialogs.getDialogsList();\n\n    if (!data || !data.length) {\n        dispatch(dialogsActions.dialogsListReceived([]));\n        return;\n    }\n\n    dispatch(dialogsActions.dialogsListReceived(data));\n}\n\n/**\n * Add new user in dialogs list or set it first if existing.\n * Reload dialogs list from API.\n * @param {number} userId - opponent ID\n */\nexport const startRefreshDialog = (userId: number): thunkType => async (dispatch) => {\n    let isSuccessful = await Api.Dialogs.startRefreshDialog(userId);\n\n    if (isSuccessful) {\n        await dispatch(getDialogsList());\n    }\n}\n\n/**\n * Requests list of messages from api and set it to state.\n * @param {number} userId - opponent ID\n */\nexport const getMessagesList = (userId: number): thunkType => async (dispatch) => {\n    let data = await Api.Dialogs.getMessagesList(userId);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messagesListReceived(data));\n}\n\n/**\n * Send new message to current dialog.\n * @param {string} text - text of message\n */\nexport const sendMessage = (text: string): thunkType => async (dispatch, getState) => {\n    let userId = getState().dialogsPage.currentDialogId;\n    let data = await Api.Dialogs.sendMessage(userId, text);\n\n    if (!data) {\n        return;\n    }\n\n    dispatch(dialogsActions.messageSent(data));\n}\n\n/**\n * Requests counter of new messages from api and set it to state.\n */\nexport const getNewMessagesCount = (): thunkType => async (dispatch, getState) => {\n    const isAuthorized = getState().auth.isAuth;\n\n    if (!isAuthorized) {\n        return;\n    }\n\n    let data = await Api.Dialogs.getNewMessagesCount();\n\n    dispatch(dialogsActions.newMessagesCountReceived(data));\n}\n\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user-male.ba3e9327.png\";","export default __webpack_public_path__ + \"static/media/preloader-spinner.635e13f4.svg\";","import React from \"react\";\nimport styles from './Preloader.module.css';\nimport preloader from \"../../assets/images/preloader-spinner.svg\";\n\ntype preloaderPropsType = {\n    notCentered?: boolean\n}\n\nconst Preloader: React.FC<preloaderPropsType> = (props) => {\n    return (\n        <div className={!props.notCentered ? styles.preloaderWrapper : undefined}>\n            <img alt='preloader' className={styles.preloader} src={preloader}/>\n        </div>\n    );\n}\n\nexport default Preloader;","export type setErrorsType = (field: string, value: string | undefined) => void;\nexport type setStatusType = (field: string) => void;\n\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} field - not need to put param\n * @param {string|undefined} value - not need to put param\n */\nexport function emptyErrorCallback(field: string, value: string | undefined) {}\n/**\n * Empty default callback which do nothing.\n * Need for callback param optionality.\n * @param {string} data - not need to put param\n */\nexport function emptyStatusCallback(data: string) {}\n\n/**\n * Call callback for every item in data. Parse every item to field name and error text.\n * @param {Array<string>} data - array with errors.\n * @param {setErrorsType} formikSetErrors - setErrors function from formik.\n * @param {setStatusType} formikSetStatus - setStatus function from formik.\n */\nexport function setErrors (data: Array<string>, formikSetErrors: setErrorsType, formikSetStatus: setStatusType) {\n    data.forEach(error => {\n        let rawError = error.split('(')[1],\n            hasSubkey = rawError.indexOf('->') !== -1,\n            key, subkey, errorTextRaw, errorText;\n\n        if (hasSubkey) {\n            key = rawError.split('->')[0].toLowerCase();\n            subkey = rawError.substring(0, rawError.length - 1).split('->')[1].toLowerCase();\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length - 1);\n\n            formikSetErrors(`${key}.${subkey}`, errorText);\n        } else {\n            key = rawError.substring(0, rawError.length - 1);\n            errorTextRaw = error.split('(')[0];\n            errorText = errorTextRaw.substring(0, errorTextRaw.length -1);\n\n            if (key === 'contacts') {\n                formikSetStatus(errorText);\n            }\n\n            formikSetErrors(key, errorText);\n        }\n    });\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWithIconWrapper\":\"PostActions_textWithIconWrapper__2-gBR\",\"icon\":\"PostActions_icon__3y829\"};"],"sourceRoot":""}